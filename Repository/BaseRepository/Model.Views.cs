




















//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets7DF6E5E23FC2141589B6A88A74A6E3BA95637374F2E6314CF0D4AAE88C953DF9))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets7DF6E5E23FC2141589B6A88A74A6E3BA95637374F2E6314CF0D4AAE88C953DF9 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets7DF6E5E23FC2141589B6A88A74A6E3BA95637374F2E6314CF0D4AAE88C953DF9()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "CaresModelStoreContainer";
            this.HashOverMappingClosure = "005ae1c4d490e64ef041a01fceb652da87226d3ed4e5e53af3ad8ed68e6d953e";
            this.HashOverAllExtentViews = "1b8d7e95abfea1998cc68468f51cc6f8dfdf46d1ac8eb7f2eba5949dceb60cbc";
            this.ViewCount = 170;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            if ((index == 58))
            {
                return GetView58();
            }
            if ((index == 59))
            {
                return GetView59();
            }
            if ((index == 60))
            {
                return GetView60();
            }
            if ((index == 61))
            {
                return GetView61();
            }
            if ((index == 62))
            {
                return GetView62();
            }
            if ((index == 63))
            {
                return GetView63();
            }
            if ((index == 64))
            {
                return GetView64();
            }
            if ((index == 65))
            {
                return GetView65();
            }
            if ((index == 66))
            {
                return GetView66();
            }
            if ((index == 67))
            {
                return GetView67();
            }
            if ((index == 68))
            {
                return GetView68();
            }
            if ((index == 69))
            {
                return GetView69();
            }
            if ((index == 70))
            {
                return GetView70();
            }
            if ((index == 71))
            {
                return GetView71();
            }
            if ((index == 72))
            {
                return GetView72();
            }
            if ((index == 73))
            {
                return GetView73();
            }
            if ((index == 74))
            {
                return GetView74();
            }
            if ((index == 75))
            {
                return GetView75();
            }
            if ((index == 76))
            {
                return GetView76();
            }
            if ((index == 77))
            {
                return GetView77();
            }
            if ((index == 78))
            {
                return GetView78();
            }
            if ((index == 79))
            {
                return GetView79();
            }
            if ((index == 80))
            {
                return GetView80();
            }
            if ((index == 81))
            {
                return GetView81();
            }
            if ((index == 82))
            {
                return GetView82();
            }
            if ((index == 83))
            {
                return GetView83();
            }
            if ((index == 84))
            {
                return GetView84();
            }
            if ((index == 85))
            {
                return GetView85();
            }
            if ((index == 86))
            {
                return GetView86();
            }
            if ((index == 87))
            {
                return GetView87();
            }
            if ((index == 88))
            {
                return GetView88();
            }
            if ((index == 89))
            {
                return GetView89();
            }
            if ((index == 90))
            {
                return GetView90();
            }
            if ((index == 91))
            {
                return GetView91();
            }
            if ((index == 92))
            {
                return GetView92();
            }
            if ((index == 93))
            {
                return GetView93();
            }
            if ((index == 94))
            {
                return GetView94();
            }
            if ((index == 95))
            {
                return GetView95();
            }
            if ((index == 96))
            {
                return GetView96();
            }
            if ((index == 97))
            {
                return GetView97();
            }
            if ((index == 98))
            {
                return GetView98();
            }
            if ((index == 99))
            {
                return GetView99();
            }
            if ((index == 100))
            {
                return GetView100();
            }
            if ((index == 101))
            {
                return GetView101();
            }
            if ((index == 102))
            {
                return GetView102();
            }
            if ((index == 103))
            {
                return GetView103();
            }
            if ((index == 104))
            {
                return GetView104();
            }
            if ((index == 105))
            {
                return GetView105();
            }
            if ((index == 106))
            {
                return GetView106();
            }
            if ((index == 107))
            {
                return GetView107();
            }
            if ((index == 108))
            {
                return GetView108();
            }
            if ((index == 109))
            {
                return GetView109();
            }
            if ((index == 110))
            {
                return GetView110();
            }
            if ((index == 111))
            {
                return GetView111();
            }
            if ((index == 112))
            {
                return GetView112();
            }
            if ((index == 113))
            {
                return GetView113();
            }
            if ((index == 114))
            {
                return GetView114();
            }
            if ((index == 115))
            {
                return GetView115();
            }
            if ((index == 116))
            {
                return GetView116();
            }
            if ((index == 117))
            {
                return GetView117();
            }
            if ((index == 118))
            {
                return GetView118();
            }
            if ((index == 119))
            {
                return GetView119();
            }
            if ((index == 120))
            {
                return GetView120();
            }
            if ((index == 121))
            {
                return GetView121();
            }
            if ((index == 122))
            {
                return GetView122();
            }
            if ((index == 123))
            {
                return GetView123();
            }
            if ((index == 124))
            {
                return GetView124();
            }
            if ((index == 125))
            {
                return GetView125();
            }
            if ((index == 126))
            {
                return GetView126();
            }
            if ((index == 127))
            {
                return GetView127();
            }
            if ((index == 128))
            {
                return GetView128();
            }
            if ((index == 129))
            {
                return GetView129();
            }
            if ((index == 130))
            {
                return GetView130();
            }
            if ((index == 131))
            {
                return GetView131();
            }
            if ((index == 132))
            {
                return GetView132();
            }
            if ((index == 133))
            {
                return GetView133();
            }
            if ((index == 134))
            {
                return GetView134();
            }
            if ((index == 135))
            {
                return GetView135();
            }
            if ((index == 136))
            {
                return GetView136();
            }
            if ((index == 137))
            {
                return GetView137();
            }
            if ((index == 138))
            {
                return GetView138();
            }
            if ((index == 139))
            {
                return GetView139();
            }
            if ((index == 140))
            {
                return GetView140();
            }
            if ((index == 141))
            {
                return GetView141();
            }
            if ((index == 142))
            {
                return GetView142();
            }
            if ((index == 143))
            {
                return GetView143();
            }
            if ((index == 144))
            {
                return GetView144();
            }
            if ((index == 145))
            {
                return GetView145();
            }
            if ((index == 146))
            {
                return GetView146();
            }
            if ((index == 147))
            {
                return GetView147();
            }
            if ((index == 148))
            {
                return GetView148();
            }
            if ((index == 149))
            {
                return GetView149();
            }
            if ((index == 150))
            {
                return GetView150();
            }
            if ((index == 151))
            {
                return GetView151();
            }
            if ((index == 152))
            {
                return GetView152();
            }
            if ((index == 153))
            {
                return GetView153();
            }
            if ((index == 154))
            {
                return GetView154();
            }
            if ((index == 155))
            {
                return GetView155();
            }
            if ((index == 156))
            {
                return GetView156();
            }
            if ((index == 157))
            {
                return GetView157();
            }
            if ((index == 158))
            {
                return GetView158();
            }
            if ((index == 159))
            {
                return GetView159();
            }
            if ((index == 160))
            {
                return GetView160();
            }
            if ((index == 161))
            {
                return GetView161();
            }
            if ((index == 162))
            {
                return GetView162();
            }
            if ((index == 163))
            {
                return GetView163();
            }
            if ((index == 164))
            {
                return GetView164();
            }
            if ((index == 165))
            {
                return GetView165();
            }
            if ((index == 166))
            {
                return GetView166();
            }
            if ((index == 167))
            {
                return GetView167();
            }
            if ((index == 168))
            {
                return GetView168();
            }
            if ((index == 169))
            {
                return GetView169();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.OrgGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.OrgGroup", @"
    SELECT VALUE -- Constructing OrgGroup
        [CaresModel.Store.OrgGroup](T1.OrgGroup_OrgGroupID, T1.OrgGroup_OrgGroupCode, T1.OrgGroup_OrgGroupName, T1.OrgGroup_OrgGroupDescription, T1.OrgGroup_RowVersion, T1.OrgGroup_IsActive, T1.OrgGroup_IsDeleted, T1.OrgGroup_IsPrivate, T1.OrgGroup_IsReadOnly, T1.OrgGroup_RecCreatedDt, T1.OrgGroup_RecCreatedBy, T1.OrgGroup_RecLastUpdatedDt, T1.OrgGroup_RecLastUpdatedBy, T1.OrgGroup_UserDomainKey)
    FROM (
        SELECT 
            T.OrgGroupId AS OrgGroup_OrgGroupID, 
            T.OrgGroupCode AS OrgGroup_OrgGroupCode, 
            T.OrgGroupName AS OrgGroup_OrgGroupName, 
            T.OrgGroupDescription AS OrgGroup_OrgGroupDescription, 
            T.RowVersion AS OrgGroup_RowVersion, 
            T.IsActive AS OrgGroup_IsActive, 
            T.IsDeleted AS OrgGroup_IsDeleted, 
            T.IsPrivate AS OrgGroup_IsPrivate, 
            T.IsReadOnly AS OrgGroup_IsReadOnly, 
            T.RecCreatedDt AS OrgGroup_RecCreatedDt, 
            T.RecCreatedBy AS OrgGroup_RecCreatedBy, 
            T.RecLastUpdatedDt AS OrgGroup_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS OrgGroup_RecLastUpdatedBy, 
            T.UserDomainKey AS OrgGroup_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.OrgGroups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Company", "\r\n    SELECT VALUE -- Constructing Company\r\n        [CaresModel.Store.Company](T1" +
                    ".Company_CompanyID, T1.Company_ParentCompany, T1.Company_OrgGroupID, T1.Company_" +
                    "CompanyCode, T1.Company_CompanyName, T1.Company_CompanyDescription, T1.Company_C" +
                    "ompanyLegalName, T1.Company_CRNumber, T1.Company_UAN, T1.Company_NTN, T1.Company" +
                    "_PaidUpCapital, T1.Company_BusinessSegmentID, T1.Company_RowVersion, T1.Company_" +
                    "IsActive, T1.Company_IsDeleted, T1.Company_IsPrivate, T1.Company_IsReadOnly, T1." +
                    "Company_RecCreatedDt, T1.Company_RecCreatedBy, T1.Company_RecLastUpdatedDt, T1.C" +
                    "ompany_RecLastUpdatedBy, T1.Company_UserDomainKey)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.CompanyId AS Company_CompanyID, \r\n            T.ParentCompanyId A" +
                    "S Company_ParentCompany, \r\n            T.OrgGroupId AS Company_OrgGroupID, \r\n   " +
                    "         T.CompanyCode AS Company_CompanyCode, \r\n            T.CompanyName AS Co" +
                    "mpany_CompanyName, \r\n            T.CompanyDescription AS Company_CompanyDescript" +
                    "ion, \r\n            T.CompanyLegalName AS Company_CompanyLegalName, \r\n           " +
                    " T.CrNumber AS Company_CRNumber, \r\n            T.Uan AS Company_UAN, \r\n         " +
                    "   T.Ntn AS Company_NTN, \r\n            T.PaidUpCapital AS Company_PaidUpCapital," +
                    " \r\n            T.BusinessSegmentId AS Company_BusinessSegmentID, \r\n            T" +
                    ".RowVersion AS Company_RowVersion, \r\n            T.IsActive AS Company_IsActive," +
                    " \r\n            T.IsDeleted AS Company_IsDeleted, \r\n            T.IsPrivate AS Co" +
                    "mpany_IsPrivate, \r\n            T.IsReadOnly AS Company_IsReadOnly, \r\n           " +
                    " T.RecCreatedDt AS Company_RecCreatedDt, \r\n            T.RecCreatedBy AS Company" +
                    "_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Company_RecLastUpdatedDt, \r\n " +
                    "           T.RecLastUpdatedBy AS Company_RecLastUpdatedBy, \r\n            T.UserD" +
                    "omainKey AS Company_UserDomainKey, \r\n            True AS _from0\r\n        FROM Ba" +
                    "seDbContext.Companies AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BusinessSegment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BusinessSegment", "\r\n    SELECT VALUE -- Constructing BusinessSegment\r\n        [CaresModel.Store.Bus" +
                    "inessSegment](T1.BusinessSegment_BusinessSegmentID, T1.BusinessSegment_BusinessS" +
                    "egmentCode, T1.BusinessSegment_BusinessSegmentName, T1.BusinessSegment_BusinessS" +
                    "egmentDescription, T1.BusinessSegment_RowVersion, T1.BusinessSegment_IsActive, T" +
                    "1.BusinessSegment_IsDeleted, T1.BusinessSegment_IsPrivate, T1.BusinessSegment_Is" +
                    "ReadOnly, T1.BusinessSegment_RecCreatedDt, T1.BusinessSegment_RecCreatedBy, T1.B" +
                    "usinessSegment_RecLastUpdatedDt, T1.BusinessSegment_RecLastUpdatedBy, T1.Busines" +
                    "sSegment_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BusinessSegm" +
                    "entId AS BusinessSegment_BusinessSegmentID, \r\n            T.BusinessSegmentCode " +
                    "AS BusinessSegment_BusinessSegmentCode, \r\n            T.BusinessSegmentName AS B" +
                    "usinessSegment_BusinessSegmentName, \r\n            T.BusinessSegmentDescription A" +
                    "S BusinessSegment_BusinessSegmentDescription, \r\n            T.RowVersion AS Busi" +
                    "nessSegment_RowVersion, \r\n            T.IsActive AS BusinessSegment_IsActive, \r\n" +
                    "            T.IsDeleted AS BusinessSegment_IsDeleted, \r\n            T.IsPrivate " +
                    "AS BusinessSegment_IsPrivate, \r\n            T.IsReadOnly AS BusinessSegment_IsRe" +
                    "adOnly, \r\n            T.RecCreatedDt AS BusinessSegment_RecCreatedDt, \r\n        " +
                    "    T.RecCreatedBy AS BusinessSegment_RecCreatedBy, \r\n            T.RecLastUpdat" +
                    "edDt AS BusinessSegment_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Bu" +
                    "sinessSegment_RecLastUpdatedBy, \r\n            T.UserDomainKey AS BusinessSegment" +
                    "_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Busines" +
                    "sSegments AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.AddressType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.AddressType", @"
    SELECT VALUE -- Constructing AddressType
        [CaresModel.Store.AddressType](T1.AddressType_AddressTypeID, T1.AddressType_AddressTypeCode, T1.AddressType_AddressTypeName, T1.AddressType_AddressTypeDescription, T1.AddressType_IsActive, T1.AddressType_IsDeleted, T1.AddressType_IsPrivate, T1.AddressType_IsReadOnly, T1.AddressType_RecCreatedDt, T1.AddressType_RecCreatedBy, T1.AddressType_RecLastUpdatedDt, T1.AddressType_RecLastUpdatedBy, T1.AddressType_UserDomainKey)
    FROM (
        SELECT 
            T.AddressTypeId AS AddressType_AddressTypeID, 
            T.AddressTypeCode AS AddressType_AddressTypeCode, 
            T.AddressTypeName AS AddressType_AddressTypeName, 
            T.AddressTypeDescription AS AddressType_AddressTypeDescription, 
            T.IsActive AS AddressType_IsActive, 
            T.IsDeleted AS AddressType_IsDeleted, 
            T.IsPrivate AS AddressType_IsPrivate, 
            T.IsReadOnly AS AddressType_IsReadOnly, 
            T.RecCreatedDt AS AddressType_RecCreatedDt, 
            T.RecCreatedBy AS AddressType_RecCreatedBy, 
            T.RecLastUpdatedDt AS AddressType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS AddressType_RecLastUpdatedBy, 
            T.UserDomainKey AS AddressType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.AddressTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Area
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Area", @"
    SELECT VALUE -- Constructing Area
        [CaresModel.Store.Area](T1.Area_AreaID, T1.Area_AreaCode, T1.Area_AreaName, T1.Area_AreaDescription, T1.Area_CityID, T1.Area_RowVersion, T1.Area_IsActive, T1.Area_IsPrivate, T1.Area_IsReadOnly, T1.Area_IsDeleted, T1.Area_RecCreatedDt, T1.Area_RecCreatedBy, T1.Area_RecLastUpdatedDt, T1.Area_RecLastUpdatedBy, T1.Area_UserDomainKey)
    FROM (
        SELECT 
            T.AreaId AS Area_AreaID, 
            T.AreaCode AS Area_AreaCode, 
            T.AreaName AS Area_AreaName, 
            T.AreaDescription AS Area_AreaDescription, 
            T.CityId AS Area_CityID, 
            T.RowVersion AS Area_RowVersion, 
            T.IsActive AS Area_IsActive, 
            T.IsPrivate AS Area_IsPrivate, 
            T.IsReadOnly AS Area_IsReadOnly, 
            T.IsDeleted AS Area_IsDeleted, 
            T.RecCreatedDt AS Area_RecCreatedDt, 
            T.RecCreatedBy AS Area_RecCreatedBy, 
            T.RecLastUpdatedDt AS Area_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Area_RecLastUpdatedBy, 
            T.UserDomainKey AS Area_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Areas AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPCompany
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPCompany", @"
    SELECT VALUE -- Constructing BPCompany
        [CaresModel.Store.BPCompany](T1.BPCompany_BPMainID, T1.BPCompany_BPCompanyCode, T1.BPCompany_BPCompanyName, T1.BPCompany_EstablishedSince, T1.BPCompany_SwiftCode, T1.BPCompany_AccountNumber, T1.BPCompany_BusinessSegmentID, T1.BPCompany_RowVersion, T1.BPCompany_RecCreatedBy, T1.BPCompany_RecCreatedDt, T1.BPCompany_RecLastUpdatedBy, T1.BPCompany_RecLastUpdatedDt, T1.BPCompany_UserDomainKey)
    FROM (
        SELECT 
            T.BusinessPartnerId AS BPCompany_BPMainID, 
            T.BusinessPartnerCompanyCode AS BPCompany_BPCompanyCode, 
            T.BusinessPartnerCompanyName AS BPCompany_BPCompanyName, 
            T.EstablishedSince AS BPCompany_EstablishedSince, 
            T.SwiftCode AS BPCompany_SwiftCode, 
            T.AccountNumber AS BPCompany_AccountNumber, 
            T.BusinessSegmentId AS BPCompany_BusinessSegmentID, 
            T.RowVersion AS BPCompany_RowVersion, 
            T.RecCreatedBy AS BPCompany_RecCreatedBy, 
            T.RecCreatedDt AS BPCompany_RecCreatedDt, 
            T.RecLastUpdatedBy AS BPCompany_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS BPCompany_RecLastUpdatedDt, 
            T.UserDomainKey AS BPCompany_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.BusinessPartnerCompanies AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPIndividual
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3044);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BPIndividual\r\n        [CaresModel.Store.BPInd");
            viewString.Append("ividual](T1.BPIndividual_BPMainID, T1.BPIndividual_FirstName, T1.BPIndividual_Mi");
            viewString.Append("ddleName, T1.BPIndividual_LastName, T1.BPIndividual_Initials, T1.BPIndividual_Li");
            viewString.Append("scenseNumber, T1.BPIndividual_LiscenseExpiryDate, T1.BPIndividual_GenderStatus, ");
            viewString.Append("T1.BPIndividual_PassportNumber, T1.BPIndividual_NIDNumber, T1.BPIndividual_Marit");
            viewString.Append("alStatusCode, T1.BPIndividual_TaxRegisterationCode, T1.BPIndividual_TaxNumber, T");
            viewString.Append("1.BPIndividual_DateOfBirth, T1.BPIndividual_OccupationTypeID, T1.BPIndividual_Is");
            viewString.Append("CompanyExternal, T1.BPIndividual_CompanyName, T1.BPIndividual_CompanyAddress, T1");
            viewString.Append(".BPIndividual_CompanyPhone, T1.BPIndividual_BPCompanyID, T1.BPIndividual_RowVers");
            viewString.Append("ion, T1.BPIndividual_RecCreatedBy, T1.BPIndividual_RecCreatedDt, T1.BPIndividual");
            viewString.Append("_RecLastUpdatedBy, T1.BPIndividual_RecLastUpdatedDt, T1.BPIndividual_NICExpDt, T");
            viewString.Append("1.BPIndividual_PassportExpDt, T1.BPIndividual_PassportCountryID, T1.BPIndividual");
            viewString.Append("_IqamaNo, T1.BPIndividual_IqamaExpDt, T1.BPIndividual_UserDomainKey)\r\n    FROM (");
            viewString.Append("\r\n        SELECT \r\n            T.BusinessPartnerId AS BPIndividual_BPMainID, \r\n ");
            viewString.Append("           T.FirstName AS BPIndividual_FirstName, \r\n            T.MiddleName AS ");
            viewString.Append("BPIndividual_MiddleName, \r\n            T.LastName AS BPIndividual_LastName, \r\n  ");
            viewString.Append("          T.Initials AS BPIndividual_Initials, \r\n            T.LiscenseNumber AS");
            viewString.Append(" BPIndividual_LiscenseNumber, \r\n            T.LiscenseExpiryDate AS BPIndividual");
            viewString.Append("_LiscenseExpiryDate, \r\n            T.GenderStatus AS BPIndividual_GenderStatus, ");
            viewString.Append("\r\n            T.PassportNumber AS BPIndividual_PassportNumber, \r\n            T.N");
            viewString.Append("icNumber AS BPIndividual_NIDNumber, \r\n            T.MaritalStatusCode AS BPIndiv");
            viewString.Append("idual_MaritalStatusCode, \r\n            T.TaxRegisterationCode AS BPIndividual_Ta");
            viewString.Append("xRegisterationCode, \r\n            T.TaxNumber AS BPIndividual_TaxNumber, \r\n     ");
            viewString.Append("       T.DateOfBirth AS BPIndividual_DateOfBirth, \r\n            T.OccupationType");
            viewString.Append("Id AS BPIndividual_OccupationTypeID, \r\n            T.IsCompanyExternal AS BPIndi");
            viewString.Append("vidual_IsCompanyExternal, \r\n            T.CompanyName AS BPIndividual_CompanyNam");
            viewString.Append("e, \r\n            T.CompanyAddress AS BPIndividual_CompanyAddress, \r\n            ");
            viewString.Append("T.CompanyPhone AS BPIndividual_CompanyPhone, \r\n            T.BusinessPartnerComp");
            viewString.Append("anyId AS BPIndividual_BPCompanyID, \r\n            T.RowVersion AS BPIndividual_Ro");
            viewString.Append("wVersion, \r\n            T.RecCreatedBy AS BPIndividual_RecCreatedBy, \r\n         ");
            viewString.Append("   T.RecCreatedDt AS BPIndividual_RecCreatedDt, \r\n            T.RecLastUpdatedBy");
            viewString.Append(" AS BPIndividual_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS BPIndivid");
            viewString.Append("ual_RecLastUpdatedDt, \r\n            T.NicExpiryDate AS BPIndividual_NICExpDt, \r\n");
            viewString.Append("            T.PassportExpiryDate AS BPIndividual_PassportExpDt, \r\n            T.");
            viewString.Append("PassportCountryId AS BPIndividual_PassportCountryID, \r\n            T.IqamaNo AS ");
            viewString.Append("BPIndividual_IqamaNo, \r\n            T.IqamaExpiryDate AS BPIndividual_IqamaExpDt");
            viewString.Append(", \r\n            T.UserDomainKey AS BPIndividual_UserDomainKey, \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM BaseDbContext.BusinessPartnerIndividuals AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPIndividual", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPInType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPInType", @"
    SELECT VALUE -- Constructing BPInType
        [CaresModel.Store.BPInType](T1.BPInType_BPInTypeID, T1.BPInType_BPInTypeDescription, T1.BPInType_FromDate, T1.BPInType_ToDate, T1.BPInType_BPMainID, T1.BPInType_BPSubTypeID, T1.BPInType_RowVersion, T1.BPInType_BPRatingTypeID, T1.BPInType_UserDomainKey)
    FROM (
        SELECT 
            T.BusinessPartnerInTypeId AS BPInType_BPInTypeID, 
            T.BusinessPartnerInTypeDescription AS BPInType_BPInTypeDescription, 
            T.FromDate AS BPInType_FromDate, 
            T.ToDate AS BPInType_ToDate, 
            T.BusinessPartnerId AS BPInType_BPMainID, 
            T.BusinessPartnerSubTypeId AS BPInType_BPSubTypeID, 
            T.RowVersion AS BPInType_RowVersion, 
            T.BpRatingTypeId AS BPInType_BPRatingTypeID, 
            T.UserDomainKey AS BPInType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.BusinessPartnerInTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPMain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2245);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BPMain\r\n        [CaresModel.Store.BPMain](T1.");
            viewString.Append("BPMain_BPMainID, T1.BPMain_CompanyID, T1.BPMain_BPMainCode, T1.BPMain_BPMainName");
            viewString.Append(", T1.BPMain_BPMainDescription, T1.BPMain_IsSystemGuarantor, T1.BPMain_SystemGuar");
            viewString.Append("antorID, T1.BPMain_NonSystemGuarantor, T1.BPMain_BusinessLegalStatusID, T1.BPMai");
            viewString.Append("n_IsIndividual, T1.BPMain_DealingEmployeeID, T1.BPMain_RowVersion, T1.BPMain_IsA");
            viewString.Append("ctive, T1.BPMain_IsDeleted, T1.BPMain_IsPrivate, T1.BPMain_IsReadOnly, T1.BPMain");
            viewString.Append("_RecCreatedDt, T1.BPMain_RecCreatedBy, T1.BPMain_RecLastUpdatedDt, T1.BPMain_Rec");
            viewString.Append("LastUpdatedBy, T1.BPMain_PaymentTermID, T1.BPMain_BPRatingTypeID, T1.BPMain_BPEm");
            viewString.Append("ailAddress, T1.BPMain_BPIsValid, T1.BPMain_UserDomainKey)\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.BusinessPartnerId AS BPMain_BPMainID, \r\n            T.Comp");
            viewString.Append("anyId AS BPMain_CompanyID, \r\n            T.BusinessPartnerCode AS BPMain_BPMainC");
            viewString.Append("ode, \r\n            T.BusinessPartnerName AS BPMain_BPMainName, \r\n            T.B");
            viewString.Append("usinessPartnerDesciption AS BPMain_BPMainDescription, \r\n            T.IsSystemGu");
            viewString.Append("arantor AS BPMain_IsSystemGuarantor, \r\n            T.SystemGuarantorId AS BPMain");
            viewString.Append("_SystemGuarantorID, \r\n            T.NonSystemGuarantor AS BPMain_NonSystemGuaran");
            viewString.Append("tor, \r\n            T.BusinessLegalStatusId AS BPMain_BusinessLegalStatusID, \r\n  ");
            viewString.Append("          T.IsIndividual AS BPMain_IsIndividual, \r\n            T.DealingEmployee");
            viewString.Append("Id AS BPMain_DealingEmployeeID, \r\n            T.RowVersion AS BPMain_RowVersion,");
            viewString.Append(" \r\n            T.IsActive AS BPMain_IsActive, \r\n            T.IsDeleted AS BPMai");
            viewString.Append("n_IsDeleted, \r\n            T.IsPrivate AS BPMain_IsPrivate, \r\n            T.IsRe");
            viewString.Append("adOnly AS BPMain_IsReadOnly, \r\n            T.RecCreatedDt AS BPMain_RecCreatedDt");
            viewString.Append(", \r\n            T.RecCreatedBy AS BPMain_RecCreatedBy, \r\n            T.RecLastUp");
            viewString.Append("datedDt AS BPMain_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS BPMain_R");
            viewString.Append("ecLastUpdatedBy, \r\n            T.PaymentTermId AS BPMain_PaymentTermID, \r\n      ");
            viewString.Append("      T.BPRatingTypeId AS BPMain_BPRatingTypeID, \r\n            T.BusinessPartner");
            viewString.Append("EmailAddress AS BPMain_BPEmailAddress, \r\n            T.BusinessPartnerIsValid AS");
            viewString.Append(" BPMain_BPIsValid, \r\n            T.UserDomainKey AS BPMain_UserDomainKey, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM BaseDbContext.BusinessPartners AS T\r\n    ) ");
            viewString.Append("AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPMain", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPMainType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPMainType", "\r\n    SELECT VALUE -- Constructing BPMainType\r\n        [CaresModel.Store.BPMainTy" +
                    "pe](T1.BPMainType_BPMainTypeID, T1.BPMainType_BPMainTypeCode, T1.BPMainType_BPMa" +
                    "inTypeKey, T1.BPMainType_BPMainTypeName, T1.BPMainType_BPMainTypeDescription, T1" +
                    ".BPMainType_RowVersion, T1.BPMainType_IsActive, T1.BPMainType_IsDeleted, T1.BPMa" +
                    "inType_IsReadOnly, T1.BPMainType_IsPrivate, T1.BPMainType_RecCreatedDt, T1.BPMai" +
                    "nType_RecCreatedBy, T1.BPMainType_RecLastUpdatedDt, T1.BPMainType_RecLastUpdated" +
                    "By, T1.BPMainType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Bus" +
                    "inessPartnerMainTypeId AS BPMainType_BPMainTypeID, \r\n            T.BusinessPartn" +
                    "erMainTypeCode AS BPMainType_BPMainTypeCode, \r\n            T.BusinessPartnerMain" +
                    "TypeKey AS BPMainType_BPMainTypeKey, \r\n            T.BusinessPartnerMainTypeName" +
                    " AS BPMainType_BPMainTypeName, \r\n            T.BusinessPartnerMainTypeDescriptio" +
                    "n AS BPMainType_BPMainTypeDescription, \r\n            T.RowVersion AS BPMainType_" +
                    "RowVersion, \r\n            T.IsActive AS BPMainType_IsActive, \r\n            T.IsD" +
                    "eleted AS BPMainType_IsDeleted, \r\n            T.IsReadOnly AS BPMainType_IsReadO" +
                    "nly, \r\n            T.IsPrivate AS BPMainType_IsPrivate, \r\n            T.RecCreat" +
                    "edDt AS BPMainType_RecCreatedDt, \r\n            T.RecCreatedBy AS BPMainType_RecC" +
                    "reatedBy, \r\n            T.RecLastUpdatedDt AS BPMainType_RecLastUpdatedDt, \r\n   " +
                    "         T.RecLastUpdatedBy AS BPMainType_RecLastUpdatedBy, \r\n            T.User" +
                    "DomainKey AS BPMainType_UserDomainKey, \r\n            True AS _from0\r\n        FRO" +
                    "M BaseDbContext.BusinessPartnerMainTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPMarketingChannel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPMarketingChannel", @"
    SELECT VALUE -- Constructing BPMarketingChannel
        [CaresModel.Store.BPMarketingChannel](T1.BPMarketingChannel_BPMarketingChannelID, T1.BPMarketingChannel_MarketingChannelID, T1.BPMarketingChannel_BPMainID, T1.BPMarketingChannel_RowVersion, T1.BPMarketingChannel_RecCreatedBy, T1.BPMarketingChannel_RecCreatedDt, T1.BPMarketingChannel_RecLastUpdatedBy, T1.BPMarketingChannel_RecLastUpdatedDt, T1.BPMarketingChannel_UserDomainKey)
    FROM (
        SELECT 
            T.BusinessPartnerMarketingChannelId AS BPMarketingChannel_BPMarketingChannelID, 
            T.MarketingChannelId AS BPMarketingChannel_MarketingChannelID, 
            T.BusinessPartnerId AS BPMarketingChannel_BPMainID, 
            T.RowVersion AS BPMarketingChannel_RowVersion, 
            T.RecCreatedBy AS BPMarketingChannel_RecCreatedBy, 
            T.RecCreatedDt AS BPMarketingChannel_RecCreatedDt, 
            T.RecLastUpdatedBy AS BPMarketingChannel_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS BPMarketingChannel_RecLastUpdatedDt, 
            T.UserDomainKey AS BPMarketingChannel_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.BusinessPartnerMarketingChannels AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPRelationship
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPRelationship", @"
    SELECT VALUE -- Constructing BPRelationship
        [CaresModel.Store.BPRelationship](T1.BPRelationship_BPRelationshipID, T1.BPRelationship_BPMainID, T1.BPRelationship_BPRelationshipTypeID, T1.BPRelationship_SecondaryBPID, T1.BPRelationship_RowVersion, T1.BPRelationship_RecCreatedBy, T1.BPRelationship_RecCreatedDt, T1.BPRelationship_RecLastUpdatedBy, T1.BPRelationship_RecLastUpdatedDt, T1.BPRelationship_UserDomainKey)
    FROM (
        SELECT 
            T.BusinessPartnerRelationshipId AS BPRelationship_BPRelationshipID, 
            T.BusinessPartnerId AS BPRelationship_BPMainID, 
            T.BusinessPartnerRelationshipTypeId AS BPRelationship_BPRelationshipTypeID, 
            T.SecondaryBusinessPartnerId AS BPRelationship_SecondaryBPID, 
            T.RowVersion AS BPRelationship_RowVersion, 
            T.RecCreatedBy AS BPRelationship_RecCreatedBy, 
            T.RecCreatedDt AS BPRelationship_RecCreatedDt, 
            T.RecLastUpdatedBy AS BPRelationship_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS BPRelationship_RecLastUpdatedDt, 
            T.UserDomainKey AS BPRelationship_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.BusinessPartnerRelationships AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPSubType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPSubType", "\r\n    SELECT VALUE -- Constructing BPSubType\r\n        [CaresModel.Store.BPSubType" +
                    "](T1.BPSubType_BPSubTypeID, T1.BPSubType_BPSubTypeCode, T1.BPSubType_BPSubTypeKe" +
                    "y, T1.BPSubType_BPSubTypeName, T1.BPSubType_BPSubTypeDescription, T1.BPSubType_B" +
                    "PMainTypeID, T1.BPSubType_RowVersion, T1.BPSubType_IsActive, T1.BPSubType_IsDele" +
                    "ted, T1.BPSubType_IsReadOnly, T1.BPSubType_IsPrivate, T1.BPSubType_RecCreatedDt," +
                    " T1.BPSubType_RecCreatedBy, T1.BPSubType_RecLastUpdatedDt, T1.BPSubType_RecLastU" +
                    "pdatedBy, T1.BPSubType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            " +
                    "T.BusinessPartnerSubTypeId AS BPSubType_BPSubTypeID, \r\n            T.BusinessPar" +
                    "tnerSubTypeCode AS BPSubType_BPSubTypeCode, \r\n            T.BusinessPartnerSubTy" +
                    "peKey AS BPSubType_BPSubTypeKey, \r\n            T.BusinessPartnerSubTypeName AS B" +
                    "PSubType_BPSubTypeName, \r\n            T.BusinessPartnerSubTypeDescription AS BPS" +
                    "ubType_BPSubTypeDescription, \r\n            T.BusinessPartnerMainTypeId AS BPSubT" +
                    "ype_BPMainTypeID, \r\n            T.RowVersion AS BPSubType_RowVersion, \r\n        " +
                    "    T.IsActive AS BPSubType_IsActive, \r\n            T.IsDeleted AS BPSubType_IsD" +
                    "eleted, \r\n            T.IsReadOnly AS BPSubType_IsReadOnly, \r\n            T.IsPr" +
                    "ivate AS BPSubType_IsPrivate, \r\n            T.RecCreatedDt AS BPSubType_RecCreat" +
                    "edDt, \r\n            T.RecCreatedBy AS BPSubType_RecCreatedBy, \r\n            T.Re" +
                    "cLastUpdatedDt AS BPSubType_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy A" +
                    "S BPSubType_RecLastUpdatedBy, \r\n            T.UserDomainKey AS BPSubType_UserDom" +
                    "ainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.BusinessPartner" +
                    "SubTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BusinessLegalStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BusinessLegalStatus", "\r\n    SELECT VALUE -- Constructing BusinessLegalStatus\r\n        [CaresModel.Store" +
                    ".BusinessLegalStatus](T1.BusinessLegalStatus_BusinessLegalStatusID, T1.BusinessL" +
                    "egalStatus_BusinessLegalStatusCode, T1.BusinessLegalStatus_BusinessLegalStatusNa" +
                    "me, T1.BusinessLegalStatus_BusinessLegalStatusDescription, T1.BusinessLegalStatu" +
                    "s_RowVersion, T1.BusinessLegalStatus_IsActive, T1.BusinessLegalStatus_IsDeleted," +
                    " T1.BusinessLegalStatus_IsPrivate, T1.BusinessLegalStatus_IsReadOnly, T1.Busines" +
                    "sLegalStatus_RecCreatedDt, T1.BusinessLegalStatus_RecCreatedBy, T1.BusinessLegal" +
                    "Status_RecLastUpdatedDt, T1.BusinessLegalStatus_RecLastUpdatedBy, T1.BusinessLeg" +
                    "alStatus_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BusinessLega" +
                    "lStatusId AS BusinessLegalStatus_BusinessLegalStatusID, \r\n            T.Business" +
                    "LegalStatusCode AS BusinessLegalStatus_BusinessLegalStatusCode, \r\n            T." +
                    "BusinessLegalStatusName AS BusinessLegalStatus_BusinessLegalStatusName, \r\n      " +
                    "      T.BusinessLegalStatusDescription AS BusinessLegalStatus_BusinessLegalStatu" +
                    "sDescription, \r\n            T.RowVersion AS BusinessLegalStatus_RowVersion, \r\n  " +
                    "          T.IsActive AS BusinessLegalStatus_IsActive, \r\n            T.IsDeleted " +
                    "AS BusinessLegalStatus_IsDeleted, \r\n            T.IsPrivate AS BusinessLegalStat" +
                    "us_IsPrivate, \r\n            T.IsReadOnly AS BusinessLegalStatus_IsReadOnly, \r\n  " +
                    "          T.RecCreatedDt AS BusinessLegalStatus_RecCreatedDt, \r\n            T.Re" +
                    "cCreatedBy AS BusinessLegalStatus_RecCreatedBy, \r\n            T.RecLastUpdatedDt" +
                    " AS BusinessLegalStatus_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Bu" +
                    "sinessLegalStatus_RecLastUpdatedBy, \r\n            T.UserDomainKey AS BusinessLeg" +
                    "alStatus_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext" +
                    ".BusinessLegalStatus1 AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.City
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.City", @"
    SELECT VALUE -- Constructing City
        [CaresModel.Store.City](T1.City_CityID, T1.City_CityCode, T1.City_CityName, T1.City_CityDescription, T1.City_RegionID, T1.City_SubRegionID, T1.City_CountryID, T1.City_RowVersion, T1.City_IsActive, T1.City_IsPrivate, T1.City_IsReadOnly, T1.City_IsDeleted, T1.City_RecCreatedDt, T1.City_RecCreatedBy, T1.City_RecLastUpdatedDt, T1.City_RecLastUpdatedBy, T1.City_UserDomainKey)
    FROM (
        SELECT 
            T.CityId AS City_CityID, 
            T.CityCode AS City_CityCode, 
            T.CityName AS City_CityName, 
            T.CityDescription AS City_CityDescription, 
            T.RegionId AS City_RegionID, 
            T.SubRegionId AS City_SubRegionID, 
            T.CountryId AS City_CountryID, 
            T.RowVersion AS City_RowVersion, 
            T.IsActive AS City_IsActive, 
            T.IsPrivate AS City_IsPrivate, 
            T.IsReadOnly AS City_IsReadOnly, 
            T.IsDeleted AS City_IsDeleted, 
            T.RecCreatedDt AS City_RecCreatedDt, 
            T.RecCreatedBy AS City_RecCreatedBy, 
            T.RecLastUpdatedDt AS City_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS City_RecLastUpdatedBy, 
            T.UserDomainKey AS City_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Cities AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Country
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Country", @"
    SELECT VALUE -- Constructing Country
        [CaresModel.Store.Country](T1.Country_CountryID, T1.Country_CountryCode, T1.Country_CountryName, T1.Country_CountryDescription, T1.Country_IsActive, T1.Country_IsReadOnly, T1.Country_IsPrivate, T1.Country_IsDeleted, T1.Country_RecLastUpdatedDt, T1.Country_RecLastUpdatedBy, T1.Country_RecCreatedBy, T1.Country_RecCreatedDt, T1.Country_UserDomainKey)
    FROM (
        SELECT 
            T.CountryId AS Country_CountryID, 
            T.CountryCode AS Country_CountryCode, 
            T.CountryName AS Country_CountryName, 
            T.CountryDescription AS Country_CountryDescription, 
            T.IsActive AS Country_IsActive, 
            T.IsReadOnly AS Country_IsReadOnly, 
            T.IsPrivate AS Country_IsPrivate, 
            T.IsDeleted AS Country_IsDeleted, 
            T.RecLastUpdatedDt AS Country_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Country_RecLastUpdatedBy, 
            T.RecCreatedBy AS Country_RecCreatedBy, 
            T.RecCreatedDt AS Country_RecCreatedDt, 
            T.UserDomainKey AS Country_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Countries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Department
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Department", "\r\n    SELECT VALUE -- Constructing Department\r\n        [CaresModel.Store.Departme" +
                    "nt](T1.Department_DepartmentID, T1.Department_DepartmentCode, T1.Department_Depa" +
                    "rtmentName, T1.Department_DepartmentDescription, T1.Department_DepartmentType, T" +
                    "1.Department_CompanyID, T1.Department_RowVersion, T1.Department_IsActive, T1.Dep" +
                    "artment_IsDeleted, T1.Department_IsPrivate, T1.Department_IsReadOnly, T1.Departm" +
                    "ent_RecCreatedDt, T1.Department_RecCreatedBy, T1.Department_RecLastUpdatedDt, T1" +
                    ".Department_RecLastUpdatedBy, T1.Department_UserDomainKey)\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.DepartmentId AS Department_DepartmentID, \r\n            T." +
                    "DepartmentCode AS Department_DepartmentCode, \r\n            T.DepartmentName AS D" +
                    "epartment_DepartmentName, \r\n            T.DepartmentDescription AS Department_De" +
                    "partmentDescription, \r\n            T.DepartmentType AS Department_DepartmentType" +
                    ", \r\n            T.CompanyId AS Department_CompanyID, \r\n            T.RowVersion " +
                    "AS Department_RowVersion, \r\n            T.IsActive AS Department_IsActive, \r\n   " +
                    "         T.IsDeleted AS Department_IsDeleted, \r\n            T.IsPrivate AS Depar" +
                    "tment_IsPrivate, \r\n            T.IsReadOnly AS Department_IsReadOnly, \r\n        " +
                    "    T.RecCreatedDt AS Department_RecCreatedDt, \r\n            T.RecCreatedBy AS D" +
                    "epartment_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Department_RecLastUp" +
                    "datedDt, \r\n            T.RecLastUpdatedBy AS Department_RecLastUpdatedBy, \r\n    " +
                    "        T.UserDomainKey AS Department_UserDomainKey, \r\n            True AS _from" +
                    "0\r\n        FROM BaseDbContext.Departments AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.DesigGrade
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.DesigGrade", @"
    SELECT VALUE -- Constructing DesigGrade
        [CaresModel.Store.DesigGrade](T1.DesigGrade_DesigGradeID, T1.DesigGrade_DesigGradeCode, T1.DesigGrade_DesigGradeName, T1.DesigGrade_DesigGradeDescription, T1.DesigGrade_RowVersion, T1.DesigGrade_IsActive, T1.DesigGrade_IsPrivate, T1.DesigGrade_IsDeleted, T1.DesigGrade_IsReadOnly, T1.DesigGrade_RecCreatedDt, T1.DesigGrade_RecCreatedBy, T1.DesigGrade_RecLastUpdatedDt, T1.DesigGrade_RecLastUpdatedBy, T1.DesigGrade_UserDomainKey)
    FROM (
        SELECT 
            T.DesigGradeId AS DesigGrade_DesigGradeID, 
            T.DesigGradeCode AS DesigGrade_DesigGradeCode, 
            T.DesigGradeName AS DesigGrade_DesigGradeName, 
            T.DesigGradeDescription AS DesigGrade_DesigGradeDescription, 
            T.RowVersion AS DesigGrade_RowVersion, 
            T.IsActive AS DesigGrade_IsActive, 
            T.IsPrivate AS DesigGrade_IsPrivate, 
            T.IsDeleted AS DesigGrade_IsDeleted, 
            T.IsReadOnly AS DesigGrade_IsReadOnly, 
            T.RecCreatedDt AS DesigGrade_RecCreatedDt, 
            T.RecCreatedBy AS DesigGrade_RecCreatedBy, 
            T.RecLastUpdatedDt AS DesigGrade_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS DesigGrade_RecLastUpdatedBy, 
            T.UserDomainKey AS DesigGrade_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.DesignGrades AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Designation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Designation", "\r\n    SELECT VALUE -- Constructing Designation\r\n        [CaresModel.Store.Designa" +
                    "tion](T1.Designation_DesignationID, T1.Designation_DesignationCode, T1.Designati" +
                    "on_DesignationName, T1.Designation_DesignationDescription, T1.Designation_Design" +
                    "ationKey, T1.Designation_RowVersion, T1.Designation_IsActive, T1.Designation_IsP" +
                    "rivate, T1.Designation_IsDeleted, T1.Designation_IsReadOnly, T1.Designation_RecC" +
                    "reatedDt, T1.Designation_RecCreatedBy, T1.Designation_RecLastUpdatedDt, T1.Desig" +
                    "nation_RecLastUpdatedBy, T1.Designation_UserDomainKey)\r\n    FROM (\r\n        SELE" +
                    "CT \r\n            T.DesignationId AS Designation_DesignationID, \r\n            T.D" +
                    "esignationCode AS Designation_DesignationCode, \r\n            T.DesignationName A" +
                    "S Designation_DesignationName, \r\n            T.DesignationDescription AS Designa" +
                    "tion_DesignationDescription, \r\n            T.DesignationKey AS Designation_Desig" +
                    "nationKey, \r\n            T.RowVersion AS Designation_RowVersion, \r\n            T" +
                    ".IsActive AS Designation_IsActive, \r\n            T.IsPrivate AS Designation_IsPr" +
                    "ivate, \r\n            T.IsDeleted AS Designation_IsDeleted, \r\n            T.IsRea" +
                    "dOnly AS Designation_IsReadOnly, \r\n            T.RecCreatedDt AS Designation_Rec" +
                    "CreatedDt, \r\n            T.RecCreatedBy AS Designation_RecCreatedBy, \r\n         " +
                    "   T.RecLastUpdatedDt AS Designation_RecLastUpdatedDt, \r\n            T.RecLastUp" +
                    "datedBy AS Designation_RecLastUpdatedBy, \r\n            T.UserDomainKey AS Design" +
                    "ation_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.De" +
                    "signations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.EmpAuthOperationsWorkplace
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2065);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EmpAuthOperationsWorkplace\r\n        [CaresMod");
            viewString.Append("el.Store.EmpAuthOperationsWorkplace](T1.EmpAuthOperationsWorkplace_EmpAuthOperat");
            viewString.Append("ionsWorkplaceID, T1.EmpAuthOperationsWorkplace_EmployeeID, T1.EmpAuthOperationsW");
            viewString.Append("orkplace_OperationsWorkplaceID, T1.EmpAuthOperationsWorkplace_IsDefault, T1.EmpA");
            viewString.Append("uthOperationsWorkplace_RowVersion, T1.EmpAuthOperationsWorkplace_IsActive, T1.Em");
            viewString.Append("pAuthOperationsWorkplace_IsPrivate, T1.EmpAuthOperationsWorkplace_IsDeleted, T1.");
            viewString.Append("EmpAuthOperationsWorkplace_IsReadOnly, T1.EmpAuthOperationsWorkplace_RecCreatedD");
            viewString.Append("t, T1.EmpAuthOperationsWorkplace_RecCreatedBy, T1.EmpAuthOperationsWorkplace_Rec");
            viewString.Append("LastUpdatedDt, T1.EmpAuthOperationsWorkplace_RecLastUpdatedBy, T1.EmpAuthOperati");
            viewString.Append("onsWorkplace_IsOperationDefault, T1.EmpAuthOperationsWorkplace_UserDomainKey)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.EmpAuthOperationsWorkplaceId AS EmpAut");
            viewString.Append("hOperationsWorkplace_EmpAuthOperationsWorkplaceID, \r\n            T.EmployeeId AS");
            viewString.Append(" EmpAuthOperationsWorkplace_EmployeeID, \r\n            T.OperationsWorkplaceId AS");
            viewString.Append(" EmpAuthOperationsWorkplace_OperationsWorkplaceID, \r\n            T.IsDefault AS ");
            viewString.Append("EmpAuthOperationsWorkplace_IsDefault, \r\n            T.RowVersion AS EmpAuthOpera");
            viewString.Append("tionsWorkplace_RowVersion, \r\n            T.IsActive AS EmpAuthOperationsWorkplac");
            viewString.Append("e_IsActive, \r\n            T.IsPrivate AS EmpAuthOperationsWorkplace_IsPrivate, \r");
            viewString.Append("\n            T.IsDeleted AS EmpAuthOperationsWorkplace_IsDeleted, \r\n            ");
            viewString.Append("T.IsReadOnly AS EmpAuthOperationsWorkplace_IsReadOnly, \r\n            T.RecCreate");
            viewString.Append("dDt AS EmpAuthOperationsWorkplace_RecCreatedDt, \r\n            T.RecCreatedBy AS ");
            viewString.Append("EmpAuthOperationsWorkplace_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Emp");
            viewString.Append("AuthOperationsWorkplace_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Em");
            viewString.Append("pAuthOperationsWorkplace_RecLastUpdatedBy, \r\n            T.IsOperationDefault AS");
            viewString.Append(" EmpAuthOperationsWorkplace_IsOperationDefault, \r\n            T.UserDomainKey AS");
            viewString.Append(" EmpAuthOperationsWorkplace_UserDomainKey, \r\n            True AS _from0\r\n       ");
            viewString.Append(" FROM BaseDbContext.EmpAuthOperationsWorkplaces AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.EmpAuthOperationsWorkplace", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.EmpDocsInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2474);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EmpDocsInfo\r\n        [CaresModel.Store.EmpDoc");
            viewString.Append("sInfo](T1.EmpDocsInfo_EmployeeID, T1.EmpDocsInfo_NIC, T1.EmpDocsInfo_NICExpDt, T");
            viewString.Append("1.EmpDocsInfo_IqamaNo, T1.EmpDocsInfo_IqamaExpDt, T1.EmpDocsInfo_PassportNo, T1.");
            viewString.Append("EmpDocsInfo_PassportExpDt, T1.EmpDocsInfo_PassportCountryID, T1.EmpDocsInfo_Visa");
            viewString.Append("No, T1.EmpDocsInfo_VisaExpDt, T1.EmpDocsInfo_VisaIssueCountryID, T1.EmpDocsInfo_");
            viewString.Append("LicenseNo, T1.EmpDocsInfo_LicenseExpDt, T1.EmpDocsInfo_LicenseTypeID, T1.EmpDocs");
            viewString.Append("Info_InsuranceNo, T1.EmpDocsInfo_InsuranceCompany, T1.EmpDocsInfo_InsuranceDt, T");
            viewString.Append("1.EmpDocsInfo_RowVersion, T1.EmpDocsInfo_IsActive, T1.EmpDocsInfo_IsPrivate, T1.");
            viewString.Append("EmpDocsInfo_IsDeleted, T1.EmpDocsInfo_IsReadOnly, T1.EmpDocsInfo_RecCreatedDt, T");
            viewString.Append("1.EmpDocsInfo_RecCreatedBy, T1.EmpDocsInfo_RecLastUpdatedDt, T1.EmpDocsInfo_RecL");
            viewString.Append("astUpdatedBy, T1.EmpDocsInfo_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.EmployeeId AS EmpDocsInfo_EmployeeID, \r\n            T.NIC AS EmpDocsInfo");
            viewString.Append("_NIC, \r\n            T.NICExpDt AS EmpDocsInfo_NICExpDt, \r\n            T.IqamaNo ");
            viewString.Append("AS EmpDocsInfo_IqamaNo, \r\n            T.IqamaExpDt AS EmpDocsInfo_IqamaExpDt, \r\n");
            viewString.Append("            T.PassportNo AS EmpDocsInfo_PassportNo, \r\n            T.PassportExpD");
            viewString.Append("t AS EmpDocsInfo_PassportExpDt, \r\n            T.PassportCountryId AS EmpDocsInfo");
            viewString.Append("_PassportCountryID, \r\n            T.VisaNo AS EmpDocsInfo_VisaNo, \r\n            ");
            viewString.Append("T.VisaExpDt AS EmpDocsInfo_VisaExpDt, \r\n            T.VisaIssueCountryId AS EmpD");
            viewString.Append("ocsInfo_VisaIssueCountryID, \r\n            T.LicenseNo AS EmpDocsInfo_LicenseNo, ");
            viewString.Append("\r\n            T.LicenseExpDt AS EmpDocsInfo_LicenseExpDt, \r\n            T.Licens");
            viewString.Append("eTypeId AS EmpDocsInfo_LicenseTypeID, \r\n            T.InsuranceNo AS EmpDocsInfo");
            viewString.Append("_InsuranceNo, \r\n            T.InsuranceCompany AS EmpDocsInfo_InsuranceCompany, ");
            viewString.Append("\r\n            T.InsuranceDt AS EmpDocsInfo_InsuranceDt, \r\n            T.RowVersi");
            viewString.Append("on AS EmpDocsInfo_RowVersion, \r\n            T.IsActive AS EmpDocsInfo_IsActive, ");
            viewString.Append("\r\n            T.IsPrivate AS EmpDocsInfo_IsPrivate, \r\n            T.IsDeleted AS");
            viewString.Append(" EmpDocsInfo_IsDeleted, \r\n            T.IsReadOnly AS EmpDocsInfo_IsReadOnly, \r\n");
            viewString.Append("            T.RecCreatedDt AS EmpDocsInfo_RecCreatedDt, \r\n            T.RecCreat");
            viewString.Append("edBy AS EmpDocsInfo_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS EmpDocsInf");
            viewString.Append("o_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpDocsInfo_RecLastUpdat");
            viewString.Append("edBy, \r\n            T.UserDomainKey AS EmpDocsInfo_UserDomainKey, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM BaseDbContext.EmpDocsInfoes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.EmpDocsInfo", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.EmpJobInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.EmpJobInfo", "\r\n    SELECT VALUE -- Constructing EmpJobInfo\r\n        [CaresModel.Store.EmpJobIn" +
                    "fo](T1.EmpJobInfo_EmployeeID, T1.EmpJobInfo_SupervisorID, T1.EmpJobInfo_Designat" +
                    "ionID, T1.EmpJobInfo_DesigGradeID, T1.EmpJobInfo_JobTypeID, T1.EmpJobInfo_Depart" +
                    "mentID, T1.EmpJobInfo_WorkplaceID, T1.EmpJobInfo_JoiningDt, T1.EmpJobInfo_Salary" +
                    ", T1.EmpJobInfo_RowVersion, T1.EmpJobInfo_IsActive, T1.EmpJobInfo_IsPrivate, T1." +
                    "EmpJobInfo_IsDeleted, T1.EmpJobInfo_IsReadOnly, T1.EmpJobInfo_RecCreatedDt, T1.E" +
                    "mpJobInfo_RecCreatedBy, T1.EmpJobInfo_RecLastUpdatedDt, T1.EmpJobInfo_RecLastUpd" +
                    "atedBy, T1.EmpJobInfo_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T" +
                    ".EmployeeId AS EmpJobInfo_EmployeeID, \r\n            T.SupervisorId AS EmpJobInfo" +
                    "_SupervisorID, \r\n            T.DesignationId AS EmpJobInfo_DesignationID, \r\n    " +
                    "        T.DesigGradeId AS EmpJobInfo_DesigGradeID, \r\n            T.JobTypeId AS " +
                    "EmpJobInfo_JobTypeID, \r\n            T.DepartmentId AS EmpJobInfo_DepartmentID, \r" +
                    "\n            T.WorkPlaceId AS EmpJobInfo_WorkplaceID, \r\n            T.JoiningDt " +
                    "AS EmpJobInfo_JoiningDt, \r\n            T.Salary AS EmpJobInfo_Salary, \r\n        " +
                    "    T.RowVersion AS EmpJobInfo_RowVersion, \r\n            T.IsActive AS EmpJobInf" +
                    "o_IsActive, \r\n            T.IsPrivate AS EmpJobInfo_IsPrivate, \r\n            T.I" +
                    "sDeleted AS EmpJobInfo_IsDeleted, \r\n            T.IsReadOnly AS EmpJobInfo_IsRea" +
                    "dOnly, \r\n            T.RecCreatedDt AS EmpJobInfo_RecCreatedDt, \r\n            T." +
                    "RecCreatedBy AS EmpJobInfo_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Emp" +
                    "JobInfo_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpJobInfo_RecLast" +
                    "UpdatedBy, \r\n            T.UserDomainKey AS EmpJobInfo_UserDomainKey, \r\n        " +
                    "    True AS _from0\r\n        FROM BaseDbContext.EmpJobInfoes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.EmpJobProg
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.EmpJobProg", "\r\n    SELECT VALUE -- Constructing EmpJobProg\r\n        [CaresModel.Store.EmpJobPr" +
                    "og](T1.EmpJobProg_EmpJobProgID, T1.EmpJobProg_EmployeeID, T1.EmpJobProg_Designat" +
                    "ionID, T1.EmpJobProg_WorkplaceID, T1.EmpJobProg_DesigStDt, T1.EmpJobProg_DesigEn" +
                    "dDt, T1.EmpJobProg_RowVersion, T1.EmpJobProg_IsActive, T1.EmpJobProg_IsPrivate, " +
                    "T1.EmpJobProg_IsDeleted, T1.EmpJobProg_IsReadOnly, T1.EmpJobProg_RecCreatedDt, T" +
                    "1.EmpJobProg_RecCreatedBy, T1.EmpJobProg_RecLastUpdatedDt, T1.EmpJobProg_RecLast" +
                    "UpdatedBy, T1.EmpJobProg_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n          " +
                    "  T.EmpJobProgId AS EmpJobProg_EmpJobProgID, \r\n            T.EmployeeId AS EmpJo" +
                    "bProg_EmployeeID, \r\n            T.DesignationId AS EmpJobProg_DesignationID, \r\n " +
                    "           T.WorkplaceId AS EmpJobProg_WorkplaceID, \r\n            T.DesigStDt AS" +
                    " EmpJobProg_DesigStDt, \r\n            T.DesigEndDt AS EmpJobProg_DesigEndDt, \r\n  " +
                    "          T.RowVersion AS EmpJobProg_RowVersion, \r\n            T.IsActive AS Emp" +
                    "JobProg_IsActive, \r\n            T.IsPrivate AS EmpJobProg_IsPrivate, \r\n         " +
                    "   T.IsDeleted AS EmpJobProg_IsDeleted, \r\n            T.IsReadOnly AS EmpJobProg" +
                    "_IsReadOnly, \r\n            T.RecCreatedDt AS EmpJobProg_RecCreatedDt, \r\n        " +
                    "    T.RecCreatedBy AS EmpJobProg_RecCreatedBy, \r\n            T.RecLastUpdatedDt " +
                    "AS EmpJobProg_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpJobProg_R" +
                    "ecLastUpdatedBy, \r\n            T.UserDomainKey AS EmpJobProg_UserDomainKey, \r\n  " +
                    "          True AS _from0\r\n        FROM BaseDbContext.EmpJobProgs AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Employee
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2088);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Employee\r\n        [CaresModel.Store.Employee]");
            viewString.Append("(T1.Employee_EmployeeID, T1.Employee_EmpCode, T1.Employee_EmpFName, T1.Employee_");
            viewString.Append("CompanyID, T1.Employee_EmpStatusID, T1.Employee_EmpMName, T1.Employee_EmpLName, ");
            viewString.Append("T1.Employee_DOB, T1.Employee_Gender, T1.Employee_Nationality, T1.Employee_Notes,");
            viewString.Append(" T1.Employee_AddNotes1, T1.Employee_AddNotes2, T1.Employee_AddNotes3, T1.Employe");
            viewString.Append("e_AddNotes4, T1.Employee_AddNotes5, T1.Employee_RowVersion, T1.Employee_IsActive");
            viewString.Append(", T1.Employee_IsDeleted, T1.Employee_IsPrivate, T1.Employee_IsReadOnly, T1.Emplo");
            viewString.Append("yee_RecCreatedDt, T1.Employee_RecCreatedBy, T1.Employee_RecLastUpdatedDt, T1.Emp");
            viewString.Append("loyee_RecLastUpdatedBy, T1.Employee_UserDomainKey)\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.EmployeeId AS Employee_EmployeeID, \r\n            T.EmpCode AS Emp");
            viewString.Append("loyee_EmpCode, \r\n            T.EmpFName AS Employee_EmpFName, \r\n            T.Co");
            viewString.Append("mpanyId AS Employee_CompanyID, \r\n            T.EmpStatusId AS Employee_EmpStatus");
            viewString.Append("ID, \r\n            T.EmpMName AS Employee_EmpMName, \r\n            T.EmpLName AS E");
            viewString.Append("mployee_EmpLName, \r\n            T.DOB AS Employee_DOB, \r\n            T.Gender AS");
            viewString.Append(" Employee_Gender, \r\n            T.NationalityId AS Employee_Nationality, \r\n     ");
            viewString.Append("       T.Notes AS Employee_Notes, \r\n            T.Notes1 AS Employee_AddNotes1, ");
            viewString.Append("\r\n            T.Notes2 AS Employee_AddNotes2, \r\n            T.Notes3 AS Employee");
            viewString.Append("_AddNotes3, \r\n            T.Notes4 AS Employee_AddNotes4, \r\n            T.Notes5");
            viewString.Append(" AS Employee_AddNotes5, \r\n            T.RowVersion AS Employee_RowVersion, \r\n   ");
            viewString.Append("         T.IsActive AS Employee_IsActive, \r\n            T.IsDeleted AS Employee_");
            viewString.Append("IsDeleted, \r\n            T.IsPrivate AS Employee_IsPrivate, \r\n            T.IsRe");
            viewString.Append("adOnly AS Employee_IsReadOnly, \r\n            T.RecCreatedDt AS Employee_RecCreat");
            viewString.Append("edDt, \r\n            T.RecCreatedBy AS Employee_RecCreatedBy, \r\n            T.Rec");
            viewString.Append("LastUpdatedDt AS Employee_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS ");
            viewString.Append("Employee_RecLastUpdatedBy, \r\n            T.UserDomainKey AS Employee_UserDomainK");
            viewString.Append("ey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Employees AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Employee", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.EmpStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.EmpStatus", @"
    SELECT VALUE -- Constructing EmpStatus
        [CaresModel.Store.EmpStatus](T1.EmpStatus_EmpStatusID, T1.EmpStatus_EmpStatusCode, T1.EmpStatus_EmpStatusName, T1.EmpStatus_EmpStatusDescription, T1.EmpStatus_EmpStatusFlg, T1.EmpStatus_RowVersion, T1.EmpStatus_IsActive, T1.EmpStatus_IsPrivate, T1.EmpStatus_IsDeleted, T1.EmpStatus_IsReadOnly, T1.EmpStatus_RecCreatedDt, T1.EmpStatus_RecCreatedBy, T1.EmpStatus_RecLastUpdatedDt, T1.EmpStatus_RecLastUpdatedBy, T1.EmpStatus_UserDomainKey)
    FROM (
        SELECT 
            T.EmpStatusId AS EmpStatus_EmpStatusID, 
            T.EmpStatusCode AS EmpStatus_EmpStatusCode, 
            T.EmpStatusName AS EmpStatus_EmpStatusName, 
            T.EmpStatusDescription AS EmpStatus_EmpStatusDescription, 
            T.EmpStatusFlag AS EmpStatus_EmpStatusFlg, 
            T.RowVersion AS EmpStatus_RowVersion, 
            T.IsActive AS EmpStatus_IsActive, 
            T.IsPrivate AS EmpStatus_IsPrivate, 
            T.IsDeleted AS EmpStatus_IsDeleted, 
            T.IsReadOnly AS EmpStatus_IsReadOnly, 
            T.RecCreatedDt AS EmpStatus_RecCreatedDt, 
            T.RecCreatedBy AS EmpStatus_RecCreatedBy, 
            T.RecLastUpdatedDt AS EmpStatus_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS EmpStatus_RecLastUpdatedBy, 
            T.UserDomainKey AS EmpStatus_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.EmpStatus1 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.FleetPool
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.FleetPool", "\r\n    SELECT VALUE -- Constructing FleetPool\r\n        [CaresModel.Store.FleetPool" +
                    "](T1.FleetPool_FleetPoolID, T1.FleetPool_ApproximateVehiclesAsgnd, T1.FleetPool_" +
                    "FleetPoolCode, T1.FleetPool_FleetPoolName, T1.FleetPool_FleetPoolDescription, T1" +
                    ".FleetPool_IsActive, T1.FleetPool_IsPrivate, T1.FleetPool_IsReadOnly, T1.FleetPo" +
                    "ol_IsDeleted, T1.FleetPool_OperationID, T1.FleetPool_RegionID, T1.FleetPool_RecC" +
                    "reatedDt, T1.FleetPool_RecCreatedBy, T1.FleetPool_RecLastUpdatedDt, T1.FleetPool" +
                    "_RecLastUpdatedBy, T1.FleetPool_RowVersion, T1.FleetPool_UserDomainKey)\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.FleetPoolId AS FleetPool_FleetPoolID, \r\n    " +
                    "        T.ApproximateVehiclesAsgnd AS FleetPool_ApproximateVehiclesAsgnd, \r\n    " +
                    "        T.FleetPoolCode AS FleetPool_FleetPoolCode, \r\n            T.FleetPoolNam" +
                    "e AS FleetPool_FleetPoolName, \r\n            T.FleetPoolDescription AS FleetPool_" +
                    "FleetPoolDescription, \r\n            T.IsActive AS FleetPool_IsActive, \r\n        " +
                    "    T.IsPrivate AS FleetPool_IsPrivate, \r\n            T.IsReadOnly AS FleetPool_" +
                    "IsReadOnly, \r\n            T.IsDeleted AS FleetPool_IsDeleted, \r\n            T.Op" +
                    "erationId AS FleetPool_OperationID, \r\n            T.RegionId AS FleetPool_Region" +
                    "ID, \r\n            T.RecCreatedDt AS FleetPool_RecCreatedDt, \r\n            T.RecC" +
                    "reatedBy AS FleetPool_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS FleetPoo" +
                    "l_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS FleetPool_RecLastUpdated" +
                    "By, \r\n            T.RowVersion AS FleetPool_RowVersion, \r\n            T.UserDoma" +
                    "inKey AS FleetPool_UserDomainKey, \r\n            True AS _from0\r\n        FROM Bas" +
                    "eDbContext.FleetPools AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.FuelType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.FuelType", @"
    SELECT VALUE -- Constructing FuelType
        [CaresModel.Store.FuelType](T1.FuelType_FuelTypeID, T1.FuelType_FuelTypeCode, T1.FuelType_FuelTypeName, T1.FuelType_UserDomainKey)
    FROM (
        SELECT 
            T.FuelTypeId AS FuelType_FuelTypeID, 
            T.FuelTypeCode AS FuelType_FuelTypeCode, 
            T.FuelTypeName AS FuelType_FuelTypeName, 
            T.UserDomainKey AS FuelType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.FuelTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.HireGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.HireGroup", "\r\n    SELECT VALUE -- Constructing HireGroup\r\n        [CaresModel.Store.HireGroup" +
                    "](T1.HireGroup_HireGroupID, T1.HireGroup_ParentHireGroupID, T1.HireGroup_HireGro" +
                    "upName, T1.HireGroup_HireGroupDescription, T1.HireGroup_HireGroupCode, T1.HireGr" +
                    "oup_IsParent, T1.HireGroup_IsActive, T1.HireGroup_IsDeleted, T1.HireGroup_IsRead" +
                    "Only, T1.HireGroup_IsPrivate, T1.HireGroup_RecCreatedDt, T1.HireGroup_RecCreated" +
                    "By, T1.HireGroup_RecLastUpdatedBy, T1.HireGroup_RecLastUpdatedDt, T1.HireGroup_C" +
                    "ompanyID, T1.HireGroup_RowVersion, T1.HireGroup_UserDomainKey)\r\n    FROM (\r\n    " +
                    "    SELECT \r\n            T.HireGroupId AS HireGroup_HireGroupID, \r\n            T" +
                    ".ParentHireGroupId AS HireGroup_ParentHireGroupID, \r\n            T.HireGroupName" +
                    " AS HireGroup_HireGroupName, \r\n            T.HireGroupDescription AS HireGroup_H" +
                    "ireGroupDescription, \r\n            T.HireGroupCode AS HireGroup_HireGroupCode, \r" +
                    "\n            T.IsParent AS HireGroup_IsParent, \r\n            T.IsActive AS HireG" +
                    "roup_IsActive, \r\n            T.IsDeleted AS HireGroup_IsDeleted, \r\n            T" +
                    ".IsReadOnly AS HireGroup_IsReadOnly, \r\n            T.IsPrivate AS HireGroup_IsPr" +
                    "ivate, \r\n            T.RecCreatedDt AS HireGroup_RecCreatedDt, \r\n            T.R" +
                    "ecCreatedBy AS HireGroup_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS HireG" +
                    "roup_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS HireGroup_RecLastUpda" +
                    "tedDt, \r\n            T.CompanyId AS HireGroup_CompanyID, \r\n            T.RowVers" +
                    "ion AS HireGroup_RowVersion, \r\n            T.UserDomainKey AS HireGroup_UserDoma" +
                    "inKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.HireGroups AS T\r" +
                    "\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.HireGroupDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.HireGroupDetail", "\r\n    SELECT VALUE -- Constructing HireGroupDetail\r\n        [CaresModel.Store.Hir" +
                    "eGroupDetail](T1.HireGroupDetail_HireGroupDetailID, T1.HireGroupDetail_HireGroup" +
                    "ID, T1.HireGroupDetail_VehicleCategoryID, T1.HireGroupDetail_ModelYear, T1.HireG" +
                    "roupDetail_VehicleModelID, T1.HireGroupDetail_VehicleMakeID, T1.HireGroupDetail_" +
                    "RowVersion, T1.HireGroupDetail_IsActive, T1.HireGroupDetail_IsDeleted, T1.HireGr" +
                    "oupDetail_IsReadOnly, T1.HireGroupDetail_IsPrivate, T1.HireGroupDetail_RecCreate" +
                    "dDt, T1.HireGroupDetail_RecCreatedBy, T1.HireGroupDetail_RecLastUpdatedBy, T1.Hi" +
                    "reGroupDetail_RecLastUpdatedDt, T1.HireGroupDetail_UserDomainKey)\r\n    FROM (\r\n " +
                    "       SELECT \r\n            T.HireGroupDetailId AS HireGroupDetail_HireGroupDeta" +
                    "ilID, \r\n            T.HireGroupId AS HireGroupDetail_HireGroupID, \r\n            " +
                    "T.VehicleCategoryId AS HireGroupDetail_VehicleCategoryID, \r\n            T.ModelY" +
                    "ear AS HireGroupDetail_ModelYear, \r\n            T.VehicleModelId AS HireGroupDet" +
                    "ail_VehicleModelID, \r\n            T.VehicleMakeId AS HireGroupDetail_VehicleMake" +
                    "ID, \r\n            T.RowVersion AS HireGroupDetail_RowVersion, \r\n            T.Is" +
                    "Active AS HireGroupDetail_IsActive, \r\n            T.IsDeleted AS HireGroupDetail" +
                    "_IsDeleted, \r\n            T.IsReadOnly AS HireGroupDetail_IsReadOnly, \r\n        " +
                    "    T.IsPrivate AS HireGroupDetail_IsPrivate, \r\n            T.RecCreatedDt AS Hi" +
                    "reGroupDetail_RecCreatedDt, \r\n            T.RecCreatedBy AS HireGroupDetail_RecC" +
                    "reatedBy, \r\n            T.RecLastUpdatedBy AS HireGroupDetail_RecLastUpdatedBy, " +
                    "\r\n            T.RecLastUpdatedDt AS HireGroupDetail_RecLastUpdatedDt, \r\n        " +
                    "    T.UserDomainKey AS HireGroupDetail_UserDomainKey, \r\n            True AS _fro" +
                    "m0\r\n        FROM BaseDbContext.HireGroupDetails AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Operation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Operation", @"
    SELECT VALUE -- Constructing Operation
        [CaresModel.Store.Operation](T1.Operation_OperationID, T1.Operation_OperationCode, T1.Operation_OperationName, T1.Operation_OperationDescription, T1.Operation_DepartmentID, T1.Operation_RowVersion, T1.Operation_IsActive, T1.Operation_IsDeleted, T1.Operation_IsPrivate, T1.Operation_IsReadOnly, T1.Operation_RecCreatedDt, T1.Operation_RecCreatedBy, T1.Operation_RecLastUpdatedDt, T1.Operation_RecLastUpdatedBy, T1.Operation_UserDomainKey)
    FROM (
        SELECT 
            T.OperationId AS Operation_OperationID, 
            T.OperationCode AS Operation_OperationCode, 
            T.OperationName AS Operation_OperationName, 
            T.OperationDescription AS Operation_OperationDescription, 
            T.DepartmentId AS Operation_DepartmentID, 
            T.RowVersion AS Operation_RowVersion, 
            T.IsActive AS Operation_IsActive, 
            T.IsDeleted AS Operation_IsDeleted, 
            T.IsPrivate AS Operation_IsPrivate, 
            T.IsReadOnly AS Operation_IsReadOnly, 
            T.RecCreatedDt AS Operation_RecCreatedDt, 
            T.RecCreatedBy AS Operation_RecCreatedBy, 
            T.RecLastUpdatedDt AS Operation_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Operation_RecLastUpdatedBy, 
            T.UserDomainKey AS Operation_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Operations AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.OperationsWorkplace
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.OperationsWorkplace", "\r\n    SELECT VALUE -- Constructing OperationsWorkplace\r\n        [CaresModel.Store" +
                    ".OperationsWorkplace](T1.OperationsWorkplace_OperationsWorkplaceID, T1.Operation" +
                    "sWorkplace_LocationCode, T1.OperationsWorkplace_WorkplaceID, T1.OperationsWorkpl" +
                    "ace_OperationID, T1.OperationsWorkplace_FleetPoolID, T1.OperationsWorkplace_Cost" +
                    "Center, T1.OperationsWorkplace_RowVersion, T1.OperationsWorkplace_IsActive, T1.O" +
                    "perationsWorkplace_IsDeleted, T1.OperationsWorkplace_IsPrivate, T1.OperationsWor" +
                    "kplace_IsReadOnly, T1.OperationsWorkplace_RecCreatedDt, T1.OperationsWorkplace_R" +
                    "ecCreatedBy, T1.OperationsWorkplace_RecLastUpdatedDt, T1.OperationsWorkplace_Rec" +
                    "LastUpdatedBy, T1.OperationsWorkplace_UserDomainKey)\r\n    FROM (\r\n        SELECT" +
                    " \r\n            T.OperationsWorkPlaceId AS OperationsWorkplace_OperationsWorkplac" +
                    "eID, \r\n            T.LocationCode AS OperationsWorkplace_LocationCode, \r\n       " +
                    "     T.WorkPlaceId AS OperationsWorkplace_WorkplaceID, \r\n            T.Operation" +
                    "Id AS OperationsWorkplace_OperationID, \r\n            T.FleetPoolId AS Operations" +
                    "Workplace_FleetPoolID, \r\n            T.CostCenter AS OperationsWorkplace_CostCen" +
                    "ter, \r\n            T.RowVersion AS OperationsWorkplace_RowVersion, \r\n           " +
                    " T.IsActive AS OperationsWorkplace_IsActive, \r\n            T.IsDeleted AS Operat" +
                    "ionsWorkplace_IsDeleted, \r\n            T.IsPrivate AS OperationsWorkplace_IsPriv" +
                    "ate, \r\n            T.IsReadOnly AS OperationsWorkplace_IsReadOnly, \r\n           " +
                    " T.RecCreatedDt AS OperationsWorkplace_RecCreatedDt, \r\n            T.RecCreatedB" +
                    "y AS OperationsWorkplace_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Opera" +
                    "tionsWorkplace_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS OperationsW" +
                    "orkplace_RecLastUpdatedBy, \r\n            T.UserDomainKey AS OperationsWorkplace_" +
                    "UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Operatio" +
                    "nsWorkPlaces1 AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.PaymentTerm
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.PaymentTerm", "\r\n    SELECT VALUE -- Constructing PaymentTerm\r\n        [CaresModel.Store.Payment" +
                    "Term](T1.PaymentTerm_PaymentTermID, T1.PaymentTerm_PaymentTermCode, T1.PaymentTe" +
                    "rm_PaymentTermName, T1.PaymentTerm_PaymentTermDescription, T1.PaymentTerm_Paymen" +
                    "tTermKey, T1.PaymentTerm_RowVersion, T1.PaymentTerm_IsActive, T1.PaymentTerm_IsD" +
                    "eleted, T1.PaymentTerm_IsPrivate, T1.PaymentTerm_IsReadOnly, T1.PaymentTerm_RecC" +
                    "reatedDt, T1.PaymentTerm_RecCreatedBy, T1.PaymentTerm_RecLastUpdatedDt, T1.Payme" +
                    "ntTerm_RecLastUpdatedBy, T1.PaymentTerm_UserDomainKey)\r\n    FROM (\r\n        SELE" +
                    "CT \r\n            T.PaymentTermId AS PaymentTerm_PaymentTermID, \r\n            T.P" +
                    "aymentTermCode AS PaymentTerm_PaymentTermCode, \r\n            T.PaymentTermName A" +
                    "S PaymentTerm_PaymentTermName, \r\n            T.PaymentTermDescription AS Payment" +
                    "Term_PaymentTermDescription, \r\n            T.PaymentTermKey AS PaymentTerm_Payme" +
                    "ntTermKey, \r\n            T.RowVersion AS PaymentTerm_RowVersion, \r\n            T" +
                    ".IsActive AS PaymentTerm_IsActive, \r\n            T.IsDeleted AS PaymentTerm_IsDe" +
                    "leted, \r\n            T.IsPrivate AS PaymentTerm_IsPrivate, \r\n            T.IsRea" +
                    "dOnly AS PaymentTerm_IsReadOnly, \r\n            T.RecCreatedDt AS PaymentTerm_Rec" +
                    "CreatedDt, \r\n            T.RecCreatedBy AS PaymentTerm_RecCreatedBy, \r\n         " +
                    "   T.RecLastUpdatedDt AS PaymentTerm_RecLastUpdatedDt, \r\n            T.RecLastUp" +
                    "datedBy AS PaymentTerm_RecLastUpdatedBy, \r\n            T.UserDomainKey AS Paymen" +
                    "tTerm_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Pa" +
                    "ymentTerms AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Phone
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Phone", @"
    SELECT VALUE -- Constructing Phone
        [CaresModel.Store.Phone](T1.Phone_PhoneID, T1.Phone_IsDefault, T1.Phone_PhoneNumber, T1.Phone_BPMainID, T1.Phone_PhoneTypeID, T1.Phone_WorkLocationID, T1.Phone_EmployeeID, T1.Phone_RowVersion, T1.Phone_IsActive, T1.Phone_IsDeleted, T1.Phone_IsPrivate, T1.Phone_IsReadOnly, T1.Phone_RecCreatedDt, T1.Phone_RecCreatedBy, T1.Phone_RecLastUpdatedDt, T1.Phone_RecLastUpdatedBy, T1.Phone_UserDomainKey)
    FROM (
        SELECT 
            T.PhoneId AS Phone_PhoneID, 
            T.IsDefault AS Phone_IsDefault, 
            T.PhoneNumber AS Phone_PhoneNumber, 
            T.BusinessPartnerId AS Phone_BPMainID, 
            T.PhoneTypeId AS Phone_PhoneTypeID, 
            T.WorkLocationId AS Phone_WorkLocationID, 
            T.EmployeeId AS Phone_EmployeeID, 
            T.RowVersion AS Phone_RowVersion, 
            T.IsActive AS Phone_IsActive, 
            T.IsDeleted AS Phone_IsDeleted, 
            T.IsPrivate AS Phone_IsPrivate, 
            T.IsReadOnly AS Phone_IsReadOnly, 
            T.RecCreatedDt AS Phone_RecCreatedDt, 
            T.RecCreatedBy AS Phone_RecCreatedBy, 
            T.RecLastUpdatedDt AS Phone_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Phone_RecLastUpdatedBy, 
            T.UserDomainKey AS Phone_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Phones AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.PhoneType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.PhoneType", @"
    SELECT VALUE -- Constructing PhoneType
        [CaresModel.Store.PhoneType](T1.PhoneType_PhoneTypeID, T1.PhoneType_PhoneTypeCode, T1.PhoneType_PhoneTypeName, T1.PhoneType_PhoneTypeKey, T1.PhoneType_PhoneTypeDescription, T1.PhoneType_IsActive, T1.PhoneType_IsDeleted, T1.PhoneType_IsPrivate, T1.PhoneType_IsReadOnly, T1.PhoneType_RecCreatedDt, T1.PhoneType_RecCreatedBy, T1.PhoneType_RecLastUpdateDt, T1.PhoneType_RecLastUpdatedBy, T1.PhoneType_UserDomainKey)
    FROM (
        SELECT 
            T.PhoneTypeId AS PhoneType_PhoneTypeID, 
            T.PhoneTypeCode AS PhoneType_PhoneTypeCode, 
            T.PhoneTypeName AS PhoneType_PhoneTypeName, 
            T.PhoneTypeKey AS PhoneType_PhoneTypeKey, 
            T.PhoneTypeDescription AS PhoneType_PhoneTypeDescription, 
            T.IsActive AS PhoneType_IsActive, 
            T.IsDeleted AS PhoneType_IsDeleted, 
            T.IsPrivate AS PhoneType_IsPrivate, 
            T.IsReadOnly AS PhoneType_IsReadOnly, 
            T.RecCreatedDt AS PhoneType_RecCreatedDt, 
            T.RecCreatedBy AS PhoneType_RecCreatedBy, 
            T.RecLastUpdatedDt AS PhoneType_RecLastUpdateDt, 
            T.RecLastUpdatedBy AS PhoneType_RecLastUpdatedBy, 
            T.UserDomainKey AS PhoneType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.PhoneTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Region
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Region", @"
    SELECT VALUE -- Constructing Region
        [CaresModel.Store.Region](T1.Region_RegionID, T1.Region_CountryID, T1.Region_RegionCode, T1.Region_RegionName, T1.Region_RegionDescription, T1.Region_RowVersion, T1.Region_IsActive, T1.Region_IsDeleted, T1.Region_IsPrivate, T1.Region_IsReadOnly, T1.Region_RecCreatedDt, T1.Region_RecLastUpdatedBy, T1.Region_RecCreatedBy, T1.Region_RecLastUpdatedDt, T1.Region_UserDomainKey)
    FROM (
        SELECT 
            T.RegionId AS Region_RegionID, 
            T.CountryId AS Region_CountryID, 
            T.RegionCode AS Region_RegionCode, 
            T.RegionName AS Region_RegionName, 
            T.RegionDescription AS Region_RegionDescription, 
            T.RowVersion AS Region_RowVersion, 
            T.IsActive AS Region_IsActive, 
            T.IsDeleted AS Region_IsDeleted, 
            T.IsPrivate AS Region_IsPrivate, 
            T.IsReadOnly AS Region_IsReadOnly, 
            T.RecCreatedDt AS Region_RecCreatedDt, 
            T.RecLastUpdatedBy AS Region_RecLastUpdatedBy, 
            T.RecCreatedBy AS Region_RecCreatedBy, 
            T.RecLastUpdatedDt AS Region_RecLastUpdatedDt, 
            T.UserDomainKey AS Region_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Regions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.SubRegion
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.SubRegion", @"
    SELECT VALUE -- Constructing SubRegion
        [CaresModel.Store.SubRegion](T1.SubRegion_SubRegionID, T1.SubRegion_SubRegionCode, T1.SubRegion_SubRegionName, T1.SubRegion_SubRegionDescription, T1.SubRegion_RegionID, T1.SubRegion_RowVersion, T1.SubRegion_IsActive, T1.SubRegion_IsPrivate, T1.SubRegion_IsReadOnly, T1.SubRegion_IsDeleted, T1.SubRegion_RecCreatedDt, T1.SubRegion_RecCreatedBy, T1.SubRegion_RecLastUpdatedDt, T1.SubRegion_RecLastUpdatedBy, T1.SubRegion_UserDomainKey)
    FROM (
        SELECT 
            T.SubRegionId AS SubRegion_SubRegionID, 
            T.SubRegionCode AS SubRegion_SubRegionCode, 
            T.SubRegionName AS SubRegion_SubRegionName, 
            T.SubRegionDescription AS SubRegion_SubRegionDescription, 
            T.RegionId AS SubRegion_RegionID, 
            T.RowVersion AS SubRegion_RowVersion, 
            T.IsActive AS SubRegion_IsActive, 
            T.IsPrivate AS SubRegion_IsPrivate, 
            T.IsReadOnly AS SubRegion_IsReadOnly, 
            T.IsDeleted AS SubRegion_IsDeleted, 
            T.RecCreatedDt AS SubRegion_RecCreatedDt, 
            T.RecCreatedBy AS SubRegion_RecCreatedBy, 
            T.RecLastUpdatedDt AS SubRegion_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS SubRegion_RecLastUpdatedBy, 
            T.UserDomainKey AS SubRegion_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.SubRegions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.TariffType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2220);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TariffType\r\n        [CaresModel.Store.TariffT");
            viewString.Append("ype](T1.TariffType_TariffTypeID, T1.TariffType_OperationID, T1.TariffType_Measur");
            viewString.Append("ementUnitID, T1.TariffType_TariffTypeCode, T1.TariffType_TariffTypeName, T1.Tari");
            viewString.Append("ffType_TariffTypeDescription, T1.TariffType_PricingStrategyID, T1.TariffType_Dur");
            viewString.Append("ationFrom, T1.TariffType_DurationTo, T1.TariffType_GracePeriod, T1.TariffType_Ef");
            viewString.Append("fectiveDate, T1.TariffType_RowVersion, T1.TariffType_RevisionNumber, T1.TariffTy");
            viewString.Append("pe_ChildTariffTypeID, T1.TariffType_RecCreatedDt, T1.TariffType_RecLastUpdatedDt");
            viewString.Append(", T1.TariffType_RecLastUpdatedBy, T1.TariffType_RecCreatedBy, T1.TariffType_IsAc");
            viewString.Append("tive, T1.TariffType_IsDeleted, T1.TariffType_IsPrivate, T1.TariffType_IsReadOnly");
            viewString.Append(", T1.TariffType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Tarif");
            viewString.Append("fTypeId AS TariffType_TariffTypeID, \r\n            T.OperationId AS TariffType_Op");
            viewString.Append("erationID, \r\n            T.MeasurementUnitId AS TariffType_MeasurementUnitID, \r\n");
            viewString.Append("            T.TariffTypeCode AS TariffType_TariffTypeCode, \r\n            T.Tarif");
            viewString.Append("fTypeName AS TariffType_TariffTypeName, \r\n            T.TariffTypeDescription AS");
            viewString.Append(" TariffType_TariffTypeDescription, \r\n            T.PricingStrategyId AS TariffTy");
            viewString.Append("pe_PricingStrategyID, \r\n            T.DurationFrom AS TariffType_DurationFrom, \r");
            viewString.Append("\n            T.DurationTo AS TariffType_DurationTo, \r\n            T.GracePeriod ");
            viewString.Append("AS TariffType_GracePeriod, \r\n            T.EffectiveDate AS TariffType_Effective");
            viewString.Append("Date, \r\n            T.RowVersion AS TariffType_RowVersion, \r\n            T.Revis");
            viewString.Append("ionNumber AS TariffType_RevisionNumber, \r\n            T.ChildTariffTypeId AS Tar");
            viewString.Append("iffType_ChildTariffTypeID, \r\n            T.RecCreatedDt AS TariffType_RecCreated");
            viewString.Append("Dt, \r\n            T.RecLastUpdatedDt AS TariffType_RecLastUpdatedDt, \r\n         ");
            viewString.Append("   T.RecLastUpdatedBy AS TariffType_RecLastUpdatedBy, \r\n            T.RecCreated");
            viewString.Append("By AS TariffType_RecCreatedBy, \r\n            T.IsActive AS TariffType_IsActive, ");
            viewString.Append("\r\n            T.IsDeleted AS TariffType_IsDeleted, \r\n            T.IsPrivate AS ");
            viewString.Append("TariffType_IsPrivate, \r\n            T.IsReadOnly AS TariffType_IsReadOnly, \r\n   ");
            viewString.Append("         T.UserDomainKey AS TariffType_UserDomainKey, \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM BaseDbContext.TariffTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.TariffType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.TransmissionType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.TransmissionType", @"
    SELECT VALUE -- Constructing TransmissionType
        [CaresModel.Store.TransmissionType](T1.TransmissionType_TransmissionTypeID, T1.TransmissionType_TransmissionTypeName, T1.TransmissionType_TransmissionTypeCode, T1.TransmissionType_UserDomainKey)
    FROM (
        SELECT 
            T.TransmissionTypeId AS TransmissionType_TransmissionTypeID, 
            T.TransmissionTypeName AS TransmissionType_TransmissionTypeName, 
            T.TransmissionTypeCode AS TransmissionType_TransmissionTypeCode, 
            T.UserDomainKey AS TransmissionType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.TransmissionTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Vehicle
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2982);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Vehicle\r\n        [CaresModel.Store.Vehicle](T");
            viewString.Append("1.Vehicle_VehicleID, T1.Vehicle_IsBranchOwner, T1.Vehicle_PlateNumber, T1.Vehicl");
            viewString.Append("e_VehicleCode, T1.Vehicle_VehicleName, T1.Vehicle_ModelYear, T1.Vehicle_HireGrou");
            viewString.Append("pID, T1.Vehicle_FleetPoolID, T1.Vehicle_Color, T1.Vehicle_OperationsWorkPlaceID,");
            viewString.Append(" T1.Vehicle_FuelLevel, T1.Vehicle_TankSize, T1.Vehicle_InitialOdometer, T1.Vehic");
            viewString.Append("le_CurrentOdometer, T1.Vehicle_RegisterationDate, T1.Vehicle_VehicleMakeID, T1.V");
            viewString.Append("ehicle_VehicleCategoryID, T1.Vehicle_VehicleModelID, T1.Vehicle_VehicleStatusID,");
            viewString.Append(" T1.Vehicle_RecCreatedDt, T1.Vehicle_RecCreatedBy, T1.Vehicle_RecLastUpdatedDt, ");
            viewString.Append("T1.Vehicle_RecLastUpdatedBy, T1.Vehicle_RowVersion, T1.Vehicle_FuelTypeID, T1.Ve");
            viewString.Append("hicle_TransmissionTypeID, T1.Vehicle_IsActive, T1.Vehicle_IsDeleted, T1.Vehicle_");
            viewString.Append("IsReadOnly, T1.Vehicle_IsPrivate, T1.Vehicle_VehicleCondition, T1.Vehicle_Vehicl");
            viewString.Append("eConditionDescription, T1.Vehicle_RegisterationExpiryDate, T1.Vehicle_UserDomain");
            viewString.Append("Key)\r\n    FROM (\r\n        SELECT \r\n            T.VehicleId AS Vehicle_VehicleID,");
            viewString.Append(" \r\n            T.IsBranchOwner AS Vehicle_IsBranchOwner, \r\n            T.PlateNu");
            viewString.Append("mber AS Vehicle_PlateNumber, \r\n            T.VehicleCode AS Vehicle_VehicleCode,");
            viewString.Append(" \r\n            T.VehicleName AS Vehicle_VehicleName, \r\n            T.ModelYear A");
            viewString.Append("S Vehicle_ModelYear, \r\n            T.HireGroupId AS Vehicle_HireGroupID, \r\n     ");
            viewString.Append("       T.FleetPoolId AS Vehicle_FleetPoolID, \r\n            T.Color AS Vehicle_Co");
            viewString.Append("lor, \r\n            T.OperationsWorkPlaceId AS Vehicle_OperationsWorkPlaceID, \r\n ");
            viewString.Append("           T.FuelLevel AS Vehicle_FuelLevel, \r\n            T.TankSize AS Vehicle");
            viewString.Append("_TankSize, \r\n            T.InitialOdometer AS Vehicle_InitialOdometer, \r\n       ");
            viewString.Append("     T.CurrentOdometer AS Vehicle_CurrentOdometer, \r\n            T.RegistrationD");
            viewString.Append("ate AS Vehicle_RegisterationDate, \r\n            T.VehicleMakeId AS Vehicle_Vehic");
            viewString.Append("leMakeID, \r\n            T.VehicleCategoryId AS Vehicle_VehicleCategoryID, \r\n    ");
            viewString.Append("        T.VehicleModelId AS Vehicle_VehicleModelID, \r\n            T.VehicleStatu");
            viewString.Append("sId AS Vehicle_VehicleStatusID, \r\n            T.RecCreatedDt AS Vehicle_RecCreat");
            viewString.Append("edDt, \r\n            T.RecCreatedBy AS Vehicle_RecCreatedBy, \r\n            T.RecL");
            viewString.Append("astUpdatedDt AS Vehicle_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Ve");
            viewString.Append("hicle_RecLastUpdatedBy, \r\n            T.RowVersion AS Vehicle_RowVersion, \r\n    ");
            viewString.Append("        T.FuelTypeId AS Vehicle_FuelTypeID, \r\n            T.TransmissionTypeId A");
            viewString.Append("S Vehicle_TransmissionTypeID, \r\n            T.IsActive AS Vehicle_IsActive, \r\n  ");
            viewString.Append("          T.IsDeleted AS Vehicle_IsDeleted, \r\n            T.IsReadOnly AS Vehicl");
            viewString.Append("e_IsReadOnly, \r\n            T.IsPrivate AS Vehicle_IsPrivate, \r\n            T.Ve");
            viewString.Append("hicleCondition AS Vehicle_VehicleCondition, \r\n            T.VehicleConditionDesc");
            viewString.Append("ription AS Vehicle_VehicleConditionDescription, \r\n            T.RegistrationExpi");
            viewString.Append("ryDate AS Vehicle_RegisterationExpiryDate, \r\n            T.UserDomainKey AS Vehi");
            viewString.Append("cle_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Vehi");
            viewString.Append("cles AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Vehicle", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleCategory", "\r\n    SELECT VALUE -- Constructing VehicleCategory\r\n        [CaresModel.Store.Veh" +
                    "icleCategory](T1.VehicleCategory_VehicleCategoryID, T1.VehicleCategory_VehicleCa" +
                    "tegoryCode, T1.VehicleCategory_VehicleCategoryName, T1.VehicleCategory_VehicleCa" +
                    "tegoryDescription, T1.VehicleCategory_IsActive, T1.VehicleCategory_IsDeleted, T1" +
                    ".VehicleCategory_IsReadOnly, T1.VehicleCategory_IsPrivate, T1.VehicleCategory_Re" +
                    "cCreatedDt, T1.VehicleCategory_RecCreatedBy, T1.VehicleCategory_RecLastUpdatedBy" +
                    ", T1.VehicleCategory_RecLastUpdatedDt, T1.VehicleCategory_RowVersion, T1.Vehicle" +
                    "Category_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.VehicleCateg" +
                    "oryId AS VehicleCategory_VehicleCategoryID, \r\n            T.VehicleCategoryCode " +
                    "AS VehicleCategory_VehicleCategoryCode, \r\n            T.VehicleCategoryName AS V" +
                    "ehicleCategory_VehicleCategoryName, \r\n            T.VehicleCategoryDescription A" +
                    "S VehicleCategory_VehicleCategoryDescription, \r\n            T.IsActive AS Vehicl" +
                    "eCategory_IsActive, \r\n            T.IsDeleted AS VehicleCategory_IsDeleted, \r\n  " +
                    "          T.IsReadOnly AS VehicleCategory_IsReadOnly, \r\n            T.IsPrivate " +
                    "AS VehicleCategory_IsPrivate, \r\n            T.RecCreatedDt AS VehicleCategory_Re" +
                    "cCreatedDt, \r\n            T.RecCreatedBy AS VehicleCategory_RecCreatedBy, \r\n    " +
                    "        T.RecLastUpdatedBy AS VehicleCategory_RecLastUpdatedBy, \r\n            T." +
                    "RecLastUpdatedDt AS VehicleCategory_RecLastUpdatedDt, \r\n            T.RowVersion" +
                    " AS VehicleCategory_RowVersion, \r\n            T.UserDomainKey AS VehicleCategory" +
                    "_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Vehicle" +
                    "Categories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleCheckList
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleCheckList", "\r\n    SELECT VALUE -- Constructing VehicleCheckList\r\n        [CaresModel.Store.Ve" +
                    "hicleCheckList](T1.VehicleCheckList_VehicleCheckListID, T1.VehicleCheckList_Vehi" +
                    "cleCheckListCode, T1.VehicleCheckList_VehicleCheckListName, T1.VehicleCheckList_" +
                    "VehicleCheckListDescription, T1.VehicleCheckList_IsInterior, T1.VehicleCheckList" +
                    "_VehicleCheckListKey, T1.VehicleCheckList_RowVersion, T1.VehicleCheckList_IsActi" +
                    "ve, T1.VehicleCheckList_IsDeleted, T1.VehicleCheckList_IsPrivate, T1.VehicleChec" +
                    "kList_IsReadOnly, T1.VehicleCheckList_RecCreatedDt, T1.VehicleCheckList_RecCreat" +
                    "edBy, T1.VehicleCheckList_RecLastUpdatedDt, T1.VehicleCheckList_RecLastUpdatedBy" +
                    ", T1.VehicleCheckList_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T" +
                    ".VehicleCheckListId AS VehicleCheckList_VehicleCheckListID, \r\n            T.Vehi" +
                    "cleCheckListCode AS VehicleCheckList_VehicleCheckListCode, \r\n            T.Vehic" +
                    "leCheckListName AS VehicleCheckList_VehicleCheckListName, \r\n            T.Vehicl" +
                    "eCheckListDescription AS VehicleCheckList_VehicleCheckListDescription, \r\n       " +
                    "     T.IsInterior AS VehicleCheckList_IsInterior, \r\n            T.VehicleCheckLi" +
                    "stKey AS VehicleCheckList_VehicleCheckListKey, \r\n            T.RowVersion AS Veh" +
                    "icleCheckList_RowVersion, \r\n            T.IsActive AS VehicleCheckList_IsActive," +
                    " \r\n            T.IsDeleted AS VehicleCheckList_IsDeleted, \r\n            T.IsPriv" +
                    "ate AS VehicleCheckList_IsPrivate, \r\n            T.IsReadOnly AS VehicleCheckLis" +
                    "t_IsReadOnly, \r\n            T.RecCreatedDt AS VehicleCheckList_RecCreatedDt, \r\n " +
                    "           T.RecCreatedBy AS VehicleCheckList_RecCreatedBy, \r\n            T.RecL" +
                    "astUpdatedDt AS VehicleCheckList_RecLastUpdatedDt, \r\n            T.RecLastUpdate" +
                    "dBy AS VehicleCheckList_RecLastUpdatedBy, \r\n            T.UserDomainKey AS Vehic" +
                    "leCheckList_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbCont" +
                    "ext.VehicleCheckLists AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleCheckListItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleCheckListItem", "\r\n    SELECT VALUE -- Constructing VehicleCheckListItem\r\n        [CaresModel.Stor" +
                    "e.VehicleCheckListItem](T1.VehicleCheckListItem_VehicleCheckListItemID, T1.Vehic" +
                    "leCheckListItem_VehicleCheckListID, T1.VehicleCheckListItem_VehicleID, T1.Vehicl" +
                    "eCheckListItem_RowVersion, T1.VehicleCheckListItem_IsActive, T1.VehicleCheckList" +
                    "Item_IsDeleted, T1.VehicleCheckListItem_IsReadOnly, T1.VehicleCheckListItem_IsPr" +
                    "ivate, T1.VehicleCheckListItem_RecCreatedDt, T1.VehicleCheckListItem_RecCreatedB" +
                    "y, T1.VehicleCheckListItem_RecLastUpdatedBy, T1.VehicleCheckListItem_RecLastUpda" +
                    "tedDt, T1.VehicleCheckListItem_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n    " +
                    "        T.VehicleCheckListItemId AS VehicleCheckListItem_VehicleCheckListItemID," +
                    " \r\n            T.VehicleCheckListId AS VehicleCheckListItem_VehicleCheckListID, " +
                    "\r\n            T.VehicleId AS VehicleCheckListItem_VehicleID, \r\n            T.Row" +
                    "Version AS VehicleCheckListItem_RowVersion, \r\n            T.IsActive AS VehicleC" +
                    "heckListItem_IsActive, \r\n            T.IsDeleted AS VehicleCheckListItem_IsDelet" +
                    "ed, \r\n            T.IsReadOnly AS VehicleCheckListItem_IsReadOnly, \r\n           " +
                    " T.IsPrivate AS VehicleCheckListItem_IsPrivate, \r\n            T.RecCreatedDt AS " +
                    "VehicleCheckListItem_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleCheckL" +
                    "istItem_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS VehicleCheckListItem_R" +
                    "ecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleCheckListItem_RecLas" +
                    "tUpdatedDt, \r\n            T.UserDomainKey AS VehicleCheckListItem_UserDomainKey," +
                    " \r\n            True AS _from0\r\n        FROM BaseDbContext.VehicleCheckListItems " +
                    "AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleImage", "\r\n    SELECT VALUE -- Constructing VehicleImage\r\n        [CaresModel.Store.Vehicl" +
                    "eImage](T1.VehicleImage_VehicleImageID, T1.VehicleImage_Image, T1.VehicleImage_V" +
                    "ehicleImageCode, T1.VehicleImage_VehicleImageName, T1.VehicleImage_VehicleImageD" +
                    "escription, T1.VehicleImage_RowVersion, T1.VehicleImage_IsActive, T1.VehicleImag" +
                    "e_IsDeleted, T1.VehicleImage_IsPrivate, T1.VehicleImage_IsReadOnly, T1.VehicleIm" +
                    "age_RecCreatedDt, T1.VehicleImage_RecCreatedBy, T1.VehicleImage_RecLastUpdatedDt" +
                    ", T1.VehicleImage_RecLastUpdatedBy, T1.VehicleImage_UserDomainKey)\r\n    FROM (\r\n" +
                    "        SELECT \r\n            T.VehicleImageId AS VehicleImage_VehicleImageID, \r\n" +
                    "            T.Image AS VehicleImage_Image, \r\n            T.VehicleImageCode AS V" +
                    "ehicleImage_VehicleImageCode, \r\n            T.VehicleImageName AS VehicleImage_V" +
                    "ehicleImageName, \r\n            T.VehicleImageDescription AS VehicleImage_Vehicle" +
                    "ImageDescription, \r\n            T.RowVersion AS VehicleImage_RowVersion, \r\n     " +
                    "       T.IsActive AS VehicleImage_IsActive, \r\n            T.IsDeleted AS Vehicle" +
                    "Image_IsDeleted, \r\n            T.IsPrivate AS VehicleImage_IsPrivate, \r\n        " +
                    "    T.IsReadOnly AS VehicleImage_IsReadOnly, \r\n            T.RecCreatedDt AS Veh" +
                    "icleImage_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleImage_RecCreatedB" +
                    "y, \r\n            T.RecLastUpdatedDt AS VehicleImage_RecLastUpdatedDt, \r\n        " +
                    "    T.RecLastUpdatedBy AS VehicleImage_RecLastUpdatedBy, \r\n            T.UserDom" +
                    "ainKey AS VehicleImage_UserDomainKey, \r\n            True AS _from0\r\n        FROM" +
                    " BaseDbContext.VehicleImages AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleMake
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleMake", @"
    SELECT VALUE -- Constructing VehicleMake
        [CaresModel.Store.VehicleMake](T1.VehicleMake_VehicleMakeID, T1.VehicleMake_VehicleMakeCode, T1.VehicleMake_VehicleMakeName, T1.VehicleMake_VehicleMakeDescription, T1.VehicleMake_IsActive, T1.VehicleMake_IsDeleted, T1.VehicleMake_IsReadOnly, T1.VehicleMake_IsPrivate, T1.VehicleMake_RecCreatedDt, T1.VehicleMake_RecCreatedBy, T1.VehicleMake_RecLastUpdatedBy, T1.VehicleMake_RecLastUpdatedDt, T1.VehicleMake_RowVersion, T1.VehicleMake_UserDomainKey)
    FROM (
        SELECT 
            T.VehicleMakeId AS VehicleMake_VehicleMakeID, 
            T.VehicleMakeCode AS VehicleMake_VehicleMakeCode, 
            T.VehicleMakeName AS VehicleMake_VehicleMakeName, 
            T.VehicleMakeDescription AS VehicleMake_VehicleMakeDescription, 
            T.IsActive AS VehicleMake_IsActive, 
            T.IsDeleted AS VehicleMake_IsDeleted, 
            T.IsReadOnly AS VehicleMake_IsReadOnly, 
            T.IsPrivate AS VehicleMake_IsPrivate, 
            T.RecCreatedDt AS VehicleMake_RecCreatedDt, 
            T.RecCreatedBy AS VehicleMake_RecCreatedBy, 
            T.RecLastUpdatedBy AS VehicleMake_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS VehicleMake_RecLastUpdatedDt, 
            T.RowVersion AS VehicleMake_RowVersion, 
            T.UserDomainKey AS VehicleMake_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.VehicleMakes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleModel", @"
    SELECT VALUE -- Constructing VehicleModel
        [CaresModel.Store.VehicleModel](T1.VehicleModel_VehicleModelID, T1.VehicleModel_VehicleModelCode, T1.VehicleModel_VehicleModelName, T1.VehicleModel_VehicleModelDescription, T1.VehicleModel_IsActive, T1.VehicleModel_IsDeleted, T1.VehicleModel_IsReadOnly, T1.VehicleModel_IsPrivate, T1.VehicleModel_RecCreatedDt, T1.VehicleModel_RecCreatedBy, T1.VehicleModel_RecLastUpdatedBy, T1.VehicleModel_RecLastUpdatedDt, T1.VehicleModel_RowVersion, T1.VehicleModel_UserDomainKey)
    FROM (
        SELECT 
            T.VehicleModelId AS VehicleModel_VehicleModelID, 
            T.VehicleModelCode AS VehicleModel_VehicleModelCode, 
            T.VehicleModelName AS VehicleModel_VehicleModelName, 
            T.VehicleModelDescription AS VehicleModel_VehicleModelDescription, 
            T.IsActive AS VehicleModel_IsActive, 
            T.IsDeleted AS VehicleModel_IsDeleted, 
            T.IsReadOnly AS VehicleModel_IsReadOnly, 
            T.IsPrivate AS VehicleModel_IsPrivate, 
            T.RecCreatedDt AS VehicleModel_RecCreatedDt, 
            T.RecCreatedBy AS VehicleModel_RecCreatedBy, 
            T.RecLastUpdatedBy AS VehicleModel_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS VehicleModel_RecLastUpdatedDt, 
            T.RowVersion AS VehicleModel_RowVersion, 
            T.UserDomainKey AS VehicleModel_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.VehicleModels AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleReservation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2062);
            viewString.Append("\r\n    SELECT VALUE -- Constructing VehicleReservation\r\n        [CaresModel.Store");
            viewString.Append(".VehicleReservation](T1.VehicleReservation_VehicleReservationID, T1.VehicleReser");
            viewString.Append("vation_StartDtTime, T1.VehicleReservation_EndDtTime, T1.VehicleReservation_Booki");
            viewString.Append("ngMainID, T1.VehicleReservation_VehicleID, T1.VehicleReservation_RAMainID, T1.Ve");
            viewString.Append("hicleReservation_VehicleReservationDescription, T1.VehicleReservation_RowVersion");
            viewString.Append(", T1.VehicleReservation_IsActive, T1.VehicleReservation_IsDeleted, T1.VehicleRes");
            viewString.Append("ervation_IsPrivate, T1.VehicleReservation_IsReadOnly, T1.VehicleReservation_RecC");
            viewString.Append("reatedDt, T1.VehicleReservation_RecCreatedBy, T1.VehicleReservation_RecLastUpdat");
            viewString.Append("edDt, T1.VehicleReservation_RecLastUpdatedBy, T1.VehicleReservation_NRTMainID, T");
            viewString.Append("1.VehicleReservation_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("VehicleReservationId AS VehicleReservation_VehicleReservationID, \r\n            T");
            viewString.Append(".StartDtTime AS VehicleReservation_StartDtTime, \r\n            T.EndDtTime AS Veh");
            viewString.Append("icleReservation_EndDtTime, \r\n            T.BookingMainId AS VehicleReservation_B");
            viewString.Append("ookingMainID, \r\n            T.VehicleId AS VehicleReservation_VehicleID, \r\n     ");
            viewString.Append("       T.RAMainId AS VehicleReservation_RAMainID, \r\n            T.VehicleReserva");
            viewString.Append("tionDescription AS VehicleReservation_VehicleReservationDescription, \r\n         ");
            viewString.Append("   T.RowVersion AS VehicleReservation_RowVersion, \r\n            T.IsActive AS Ve");
            viewString.Append("hicleReservation_IsActive, \r\n            T.IsDeleted AS VehicleReservation_IsDel");
            viewString.Append("eted, \r\n            T.IsPrivate AS VehicleReservation_IsPrivate, \r\n            T");
            viewString.Append(".IsReadOnly AS VehicleReservation_IsReadOnly, \r\n            T.RecCreatedDt AS Ve");
            viewString.Append("hicleReservation_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleReservatio");
            viewString.Append("n_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS VehicleReservation_RecLastUp");
            viewString.Append("datedDt, \r\n            T.RecLastUpdatedBy AS VehicleReservation_RecLastUpdatedBy");
            viewString.Append(", \r\n            T.NRTMainId AS VehicleReservation_NRTMainID, \r\n            T.Use");
            viewString.Append("rDomainKey AS VehicleReservation_UserDomainKey, \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM BaseDbContext.VehicleReservations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleReservation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleStatus", "\r\n    SELECT VALUE -- Constructing VehicleStatus\r\n        [CaresModel.Store.Vehic" +
                    "leStatus](T1.VehicleStatus_VehicleStatusID, T1.VehicleStatus_VehicleStatusCode, " +
                    "T1.VehicleStatus_VehicleStatusName, T1.VehicleStatus_VehicleStatusDescription, T" +
                    "1.VehicleStatus_VehicleStatusKey, T1.VehicleStatus_AvailabilityCheck, T1.Vehicle" +
                    "Status_IsActive, T1.VehicleStatus_IsDeleted, T1.VehicleStatus_IsReadOnly, T1.Veh" +
                    "icleStatus_IsPrivate, T1.VehicleStatus_RecCreatedDt, T1.VehicleStatus_RecCreated" +
                    "By, T1.VehicleStatus_RecLastUpdatedBy, T1.VehicleStatus_RecLastUpdatedDt, T1.Veh" +
                    "icleStatus_RowVersion, T1.VehicleStatus_UserDomainKey)\r\n    FROM (\r\n        SELE" +
                    "CT \r\n            T.VehicleStatusId AS VehicleStatus_VehicleStatusID, \r\n         " +
                    "   T.VehicleStatusCode AS VehicleStatus_VehicleStatusCode, \r\n            T.Vehic" +
                    "leStatusName AS VehicleStatus_VehicleStatusName, \r\n            T.VehicleStatusDe" +
                    "scription AS VehicleStatus_VehicleStatusDescription, \r\n            T.VehicleStat" +
                    "usKey AS VehicleStatus_VehicleStatusKey, \r\n            T.AvailabilityCheck AS Ve" +
                    "hicleStatus_AvailabilityCheck, \r\n            T.IsActive AS VehicleStatus_IsActiv" +
                    "e, \r\n            T.IsDeleted AS VehicleStatus_IsDeleted, \r\n            T.IsReadO" +
                    "nly AS VehicleStatus_IsReadOnly, \r\n            T.IsPrivate AS VehicleStatus_IsPr" +
                    "ivate, \r\n            T.RecCreatedDt AS VehicleStatus_RecCreatedDt, \r\n           " +
                    " T.RecCreatedBy AS VehicleStatus_RecCreatedBy, \r\n            T.RecLastUpdatedBy " +
                    "AS VehicleStatus_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleSt" +
                    "atus_RecLastUpdatedDt, \r\n            T.RowVersion AS VehicleStatus_RowVersion, \r" +
                    "\n            T.UserDomainKey AS VehicleStatus_UserDomainKey, \r\n            True " +
                    "AS _from0\r\n        FROM BaseDbContext.VehicleStatus1 AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleSubStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleSubStatus", "\r\n    SELECT VALUE -- Constructing VehicleSubStatus\r\n        [CaresModel.Store.Ve" +
                    "hicleSubStatus](T1.VehicleSubStatus_VehicleSubStatusID, T1.VehicleSubStatus_Vehi" +
                    "cleStatusID, T1.VehicleSubStatus_VehicleSubStatusCode, T1.VehicleSubStatus_Vehic" +
                    "leSubStatusName, T1.VehicleSubStatus_VehicleSubStatusDescription, T1.VehicleSubS" +
                    "tatus_IsActive, T1.VehicleSubStatus_IsDeleted, T1.VehicleSubStatus_IsReadOnly, T" +
                    "1.VehicleSubStatus_IsPrivate, T1.VehicleSubStatus_RecCreatedDt, T1.VehicleSubSta" +
                    "tus_RecCreatedBy, T1.VehicleSubStatus_RecLastUpdatedBy, T1.VehicleSubStatus_RecL" +
                    "astUpdatedDt, T1.VehicleSubStatus_RowVersion, T1.VehicleSubStatus_UserDomainKey)" +
                    "\r\n    FROM (\r\n        SELECT \r\n            T.VehicleSubStatusId AS VehicleSubSta" +
                    "tus_VehicleSubStatusID, \r\n            T.VehicleStatusId AS VehicleSubStatus_Vehi" +
                    "cleStatusID, \r\n            T.VehicleSubStatusCode AS VehicleSubStatus_VehicleSub" +
                    "StatusCode, \r\n            T.VehicleSubStatusName AS VehicleSubStatus_VehicleSubS" +
                    "tatusName, \r\n            T.VehicleSubStatusDescription AS VehicleSubStatus_Vehic" +
                    "leSubStatusDescription, \r\n            T.IsActive AS VehicleSubStatus_IsActive, \r" +
                    "\n            T.IsDeleted AS VehicleSubStatus_IsDeleted, \r\n            T.IsReadOn" +
                    "ly AS VehicleSubStatus_IsReadOnly, \r\n            T.IsPrivate AS VehicleSubStatus" +
                    "_IsPrivate, \r\n            T.RecCreatedDt AS VehicleSubStatus_RecCreatedDt, \r\n   " +
                    "         T.RecCreatedBy AS VehicleSubStatus_RecCreatedBy, \r\n            T.RecLas" +
                    "tUpdatedBy AS VehicleSubStatus_RecLastUpdatedBy, \r\n            T.RecLastUpdatedD" +
                    "t AS VehicleSubStatus_RecLastUpdatedDt, \r\n            T.RowVersion AS VehicleSub" +
                    "Status_RowVersion, \r\n            T.UserDomainKey AS VehicleSubStatus_UserDomainK" +
                    "ey, \r\n            True AS _from0\r\n        FROM BaseDbContext.VehicleSubStatus1 A" +
                    "S T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.WorkLocation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.WorkLocation", "\r\n    SELECT VALUE -- Constructing WorkLocation\r\n        [CaresModel.Store.WorkLo" +
                    "cation](T1.WorkLocation_WorkLocationID, T1.WorkLocation_WorkLocationCode, T1.Wor" +
                    "kLocation_WorkLocationName, T1.WorkLocation_WorkLocationDescription, T1.WorkLoca" +
                    "tion_CompanyID, T1.WorkLocation_RowVersion, T1.WorkLocation_IsActive, T1.WorkLoc" +
                    "ation_IsDeleted, T1.WorkLocation_IsPrivate, T1.WorkLocation_IsReadOnly, T1.WorkL" +
                    "ocation_RecCreatedDt, T1.WorkLocation_RecCreatedBy, T1.WorkLocation_RecLastUpdat" +
                    "edDt, T1.WorkLocation_RecLastUpdatedBy, T1.WorkLocation_UserDomainKey, T1.WorkLo" +
                    "cation_AddressID)\r\n    FROM (\r\n        SELECT \r\n            T.WorkLocationId AS " +
                    "WorkLocation_WorkLocationID, \r\n            T.WorkLocationCode AS WorkLocation_Wo" +
                    "rkLocationCode, \r\n            T.WorkLocationName AS WorkLocation_WorkLocationNam" +
                    "e, \r\n            T.WorkLocationDescription AS WorkLocation_WorkLocationDescripti" +
                    "on, \r\n            T.CompanyId AS WorkLocation_CompanyID, \r\n            T.RowVers" +
                    "ion AS WorkLocation_RowVersion, \r\n            T.IsActive AS WorkLocation_IsActiv" +
                    "e, \r\n            T.IsDeleted AS WorkLocation_IsDeleted, \r\n            T.IsPrivat" +
                    "e AS WorkLocation_IsPrivate, \r\n            T.IsReadOnly AS WorkLocation_IsReadOn" +
                    "ly, \r\n            T.RecCreatedDt AS WorkLocation_RecCreatedDt, \r\n            T.R" +
                    "ecCreatedBy AS WorkLocation_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Wo" +
                    "rkLocation_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS WorkLocation_Re" +
                    "cLastUpdatedBy, \r\n            T.UserDomainKey AS WorkLocation_UserDomainKey, \r\n " +
                    "           T.AddressId AS WorkLocation_AddressID, \r\n            True AS _from0\r\n" +
                    "        FROM BaseDbContext.WorkLocations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Workplace
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Workplace", "\r\n    SELECT VALUE -- Constructing Workplace\r\n        [CaresModel.Store.Workplace" +
                    "](T1.Workplace_WorkplaceID, T1.Workplace_WorkplaceCode, T1.Workplace_WorkplaceNa" +
                    "me, T1.Workplace_WorkplaceDescription, T1.Workplace_ParentWorkplaceID, T1.Workpl" +
                    "ace_WorkplaceTypeID, T1.Workplace_WorkLocationID, T1.Workplace_RowVersion, T1.Wo" +
                    "rkplace_IsActive, T1.Workplace_IsDeleted, T1.Workplace_IsPrivate, T1.Workplace_I" +
                    "sReadOnly, T1.Workplace_RecCreatedDt, T1.Workplace_RecCreatedBy, T1.Workplace_Re" +
                    "cLastUpdatedDt, T1.Workplace_RecLastUpdatedBy, T1.Workplace_UserDomainKey)\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.WorkPlaceId AS Workplace_WorkplaceID, \r\n " +
                    "           T.WorkPlaceCode AS Workplace_WorkplaceCode, \r\n            T.WorkPlace" +
                    "Name AS Workplace_WorkplaceName, \r\n            T.WorkPlaceDescription AS Workpla" +
                    "ce_WorkplaceDescription, \r\n            T.ParentWorkPlaceId AS Workplace_ParentWo" +
                    "rkplaceID, \r\n            T.WorkPlaceTypeId AS Workplace_WorkplaceTypeID, \r\n     " +
                    "       T.WorkLocationId AS Workplace_WorkLocationID, \r\n            T.RowVersion " +
                    "AS Workplace_RowVersion, \r\n            T.IsActive AS Workplace_IsActive, \r\n     " +
                    "       T.IsDeleted AS Workplace_IsDeleted, \r\n            T.IsPrivate AS Workplac" +
                    "e_IsPrivate, \r\n            T.IsReadOnly AS Workplace_IsReadOnly, \r\n            T" +
                    ".RecCreatedDt AS Workplace_RecCreatedDt, \r\n            T.RecCreatedBy AS Workpla" +
                    "ce_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Workplace_RecLastUpdatedDt," +
                    " \r\n            T.RecLastUpdatedBy AS Workplace_RecLastUpdatedBy, \r\n            T" +
                    ".UserDomainKey AS Workplace_UserDomainKey, \r\n            True AS _from0\r\n       " +
                    " FROM BaseDbContext.WorkPlaces1 AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.WorkplaceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.WorkplaceType", "\r\n    SELECT VALUE -- Constructing WorkplaceType\r\n        [CaresModel.Store.Workp" +
                    "laceType](T1.WorkplaceType_WorkplaceTypeID, T1.WorkplaceType_WorkplaceTypeCode, " +
                    "T1.WorkplaceType_WorkplaceTypeName, T1.WorkplaceType_WorkplaceTypeDescription, T" +
                    "1.WorkplaceType_WorkplaceTypeCat, T1.WorkplaceType_WorkplaceTypeNature, T1.Workp" +
                    "laceType_RowVersion, T1.WorkplaceType_IsActive, T1.WorkplaceType_IsDeleted, T1.W" +
                    "orkplaceType_IsPrivate, T1.WorkplaceType_IsReadOnly, T1.WorkplaceType_RecCreated" +
                    "Dt, T1.WorkplaceType_RecCreatedBy, T1.WorkplaceType_RecLastUpdatedDt, T1.Workpla" +
                    "ceType_RecLastUpdatedBy, T1.WorkplaceType_UserDomainKey)\r\n    FROM (\r\n        SE" +
                    "LECT \r\n            T.WorkPlaceTypeId AS WorkplaceType_WorkplaceTypeID, \r\n       " +
                    "     T.WorkPlaceTypeCode AS WorkplaceType_WorkplaceTypeCode, \r\n            T.Wor" +
                    "kPlaceTypeName AS WorkplaceType_WorkplaceTypeName, \r\n            T.WorkPlaceType" +
                    "Description AS WorkplaceType_WorkplaceTypeDescription, \r\n            T.WorkPlace" +
                    "TypeCat AS WorkplaceType_WorkplaceTypeCat, \r\n            T.WorkPlaceNature AS Wo" +
                    "rkplaceType_WorkplaceTypeNature, \r\n            T.RowVersion AS WorkplaceType_Row" +
                    "Version, \r\n            T.IsActive AS WorkplaceType_IsActive, \r\n            T.IsD" +
                    "eleted AS WorkplaceType_IsDeleted, \r\n            T.IsPrivate AS WorkplaceType_Is" +
                    "Private, \r\n            T.IsReadOnly AS WorkplaceType_IsReadOnly, \r\n            T" +
                    ".RecCreatedDt AS WorkplaceType_RecCreatedDt, \r\n            T.RecCreatedBy AS Wor" +
                    "kplaceType_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS WorkplaceType_RecLa" +
                    "stUpdatedDt, \r\n            T.RecLastUpdatedBy AS WorkplaceType_RecLastUpdatedBy," +
                    " \r\n            T.UserDomainKey AS WorkplaceType_UserDomainKey, \r\n            Tru" +
                    "e AS _from0\r\n        FROM BaseDbContext.WorkPlaceTypes1 AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.HireGroupUpGrade
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.HireGroupUpGrade", @"
    SELECT VALUE -- Constructing HireGroupUpGrade
        [CaresModel.Store.HireGroupUpGrade](T1.HireGroupUpGrade_HireGroupUpGradeID, T1.HireGroupUpGrade_HireGroupID, T1.HireGroupUpGrade_AllowedHireGroupID, T1.HireGroupUpGrade_RowVersion, T1.HireGroupUpGrade_IsActive, T1.HireGroupUpGrade_IsDeleted, T1.HireGroupUpGrade_IsReadOnly, T1.HireGroupUpGrade_IsPrivate, T1.HireGroupUpGrade_RecCreatedDt, T1.HireGroupUpGrade_RecCreatedBy, T1.HireGroupUpGrade_RecLastUpdatedBy, T1.HireGroupUpGrade_RecLastUpdatedDt, T1.HireGroupUpGrade_UserDomainKey)
    FROM (
        SELECT 
            T.HireGroupUpGradeId AS HireGroupUpGrade_HireGroupUpGradeID, 
            T.HireGroupId AS HireGroupUpGrade_HireGroupID, 
            T.AllowedHireGroupId AS HireGroupUpGrade_AllowedHireGroupID, 
            T.RowVersion AS HireGroupUpGrade_RowVersion, 
            T.IsActive AS HireGroupUpGrade_IsActive, 
            T.IsDeleted AS HireGroupUpGrade_IsDeleted, 
            T.IsReadOnly AS HireGroupUpGrade_IsReadOnly, 
            T.IsPrivate AS HireGroupUpGrade_IsPrivate, 
            T.RecCreatedDt AS HireGroupUpGrade_RecCreatedDt, 
            T.RecCreatedBy AS HireGroupUpGrade_RecCreatedBy, 
            T.RecLastUpdatedBy AS HireGroupUpGrade_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS HireGroupUpGrade_RecLastUpdatedDt, 
            T.UserDomainKey AS HireGroupUpGrade_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.HireGroupUpGrades AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.InsuranceRt
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.InsuranceRt", "\r\n    SELECT VALUE -- Constructing InsuranceRt\r\n        [CaresModel.Store.Insuran" +
                    "ceRt](T1.InsuranceRt_InsuranceRtID, T1.InsuranceRt_ChildInsuranceRtID, T1.Insura" +
                    "nceRt_InsuranceRtMainID, T1.InsuranceRt_InsuranceTypeID, T1.InsuranceRt_HireGrou" +
                    "pDetailID, T1.InsuranceRt_InsuranceRate, T1.InsuranceRt_StartDt, T1.InsuranceRt_" +
                    "IsActive, T1.InsuranceRt_RevisionNumber, T1.InsuranceRt_IsDeleted, T1.InsuranceR" +
                    "t_IsPrivate, T1.InsuranceRt_IsReadOnly, T1.InsuranceRt_RowVersion, T1.InsuranceR" +
                    "t_RecCreatedDt, T1.InsuranceRt_RecLastUpdatedDt, T1.InsuranceRt_RecLastUpdatedBy" +
                    ", T1.InsuranceRt_RecCreatedBy, T1.InsuranceRt_UserDomainKey)\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.InsuranceRtId AS InsuranceRt_InsuranceRtID, \r\n         " +
                    "   T.ChildInsuranceRtId AS InsuranceRt_ChildInsuranceRtID, \r\n            T.Insur" +
                    "anceRtMainId AS InsuranceRt_InsuranceRtMainID, \r\n            T.InsuranceTypeId A" +
                    "S InsuranceRt_InsuranceTypeID, \r\n            T.HireGroupDetailId AS InsuranceRt_" +
                    "HireGroupDetailID, \r\n            T.InsuranceRate AS InsuranceRt_InsuranceRate, \r" +
                    "\n            T.StartDt AS InsuranceRt_StartDt, \r\n            T.IsActive AS Insur" +
                    "anceRt_IsActive, \r\n            T.RevisionNumber AS InsuranceRt_RevisionNumber, \r" +
                    "\n            T.IsDeleted AS InsuranceRt_IsDeleted, \r\n            T.IsPrivate AS " +
                    "InsuranceRt_IsPrivate, \r\n            T.IsReadOnly AS InsuranceRt_IsReadOnly, \r\n " +
                    "           T.RowVersion AS InsuranceRt_RowVersion, \r\n            T.RecCreatedDt " +
                    "AS InsuranceRt_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS InsuranceRt_Rec" +
                    "LastUpdatedDt, \r\n            T.RecLastUpdatedBy AS InsuranceRt_RecLastUpdatedBy," +
                    " \r\n            T.RecCreatedBy AS InsuranceRt_RecCreatedBy, \r\n            T.UserD" +
                    "omainKey AS InsuranceRt_UserDomainKey, \r\n            True AS _from0\r\n        FRO" +
                    "M BaseDbContext.InsuranceRts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.InsuranceRtMain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.InsuranceRtMain", "\r\n    SELECT VALUE -- Constructing InsuranceRtMain\r\n        [CaresModel.Store.Ins" +
                    "uranceRtMain](T1.InsuranceRtMain_InsuranceRtMainID, T1.InsuranceRtMain_TariffTyp" +
                    "eCode, T1.InsuranceRtMain_InsuranceRtMainCode, T1.InsuranceRtMain_InsuranceRtMai" +
                    "nName, T1.InsuranceRtMain_InsuranceRtMainDescription, T1.InsuranceRtMain_StartDt" +
                    ", T1.InsuranceRtMain_RowVersion, T1.InsuranceRtMain_IsActive, T1.InsuranceRtMain" +
                    "_IsDeleted, T1.InsuranceRtMain_IsPrivate, T1.InsuranceRtMain_IsReadOnly, T1.Insu" +
                    "ranceRtMain_RecCreatedDt, T1.InsuranceRtMain_RecLastUpdatedDt, T1.InsuranceRtMai" +
                    "n_RecCreatedBy, T1.InsuranceRtMain_RecLastUpdatedBy, T1.InsuranceRtMain_UserDoma" +
                    "inKey)\r\n    FROM (\r\n        SELECT \r\n            T.InsuranceRtMainId AS Insuranc" +
                    "eRtMain_InsuranceRtMainID, \r\n            T.TariffTypeCode AS InsuranceRtMain_Tar" +
                    "iffTypeCode, \r\n            T.InsuranceRtMainCode AS InsuranceRtMain_InsuranceRtM" +
                    "ainCode, \r\n            T.InsuranceRtMainName AS InsuranceRtMain_InsuranceRtMainN" +
                    "ame, \r\n            T.InsuranceRtMainDescription AS InsuranceRtMain_InsuranceRtMa" +
                    "inDescription, \r\n            T.StartDt AS InsuranceRtMain_StartDt, \r\n           " +
                    " T.RowVersion AS InsuranceRtMain_RowVersion, \r\n            T.IsActive AS Insuran" +
                    "ceRtMain_IsActive, \r\n            T.IsDeleted AS InsuranceRtMain_IsDeleted, \r\n   " +
                    "         T.IsPrivate AS InsuranceRtMain_IsPrivate, \r\n            T.IsReadOnly AS" +
                    " InsuranceRtMain_IsReadOnly, \r\n            T.RecCreatedDt AS InsuranceRtMain_Rec" +
                    "CreatedDt, \r\n            T.RecLastUpdatedDt AS InsuranceRtMain_RecLastUpdatedDt," +
                    " \r\n            T.RecCreatedBy AS InsuranceRtMain_RecCreatedBy, \r\n            T.R" +
                    "ecLastUpdatedBy AS InsuranceRtMain_RecLastUpdatedBy, \r\n            T.UserDomainK" +
                    "ey AS InsuranceRtMain_UserDomainKey, \r\n            True AS _from0\r\n        FROM " +
                    "BaseDbContext.InsuranceRtMains AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.InsuranceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.InsuranceType", "\r\n    SELECT VALUE -- Constructing InsuranceType\r\n        [CaresModel.Store.Insur" +
                    "anceType](T1.InsuranceType_InsuranceTypeID, T1.InsuranceType_InsuranceTypeCode, " +
                    "T1.InsuranceType_InsuranceTypeName, T1.InsuranceType_InsuranceTypeDescription, T" +
                    "1.InsuranceType_IsActive, T1.InsuranceType_IsDeleted, T1.InsuranceType_IsReadOnl" +
                    "y, T1.InsuranceType_IsPrivate, T1.InsuranceType_RecCreatedDt, T1.InsuranceType_R" +
                    "ecCreatedBy, T1.InsuranceType_RecLastUpdatedBy, T1.InsuranceType_RecLastUpdatedD" +
                    "t, T1.InsuranceType_RowVersion, T1.InsuranceType_UserDomainKey)\r\n    FROM (\r\n   " +
                    "     SELECT \r\n            T.InsuranceTypeId AS InsuranceType_InsuranceTypeID, \r\n" +
                    "            T.InsuranceTypeCode AS InsuranceType_InsuranceTypeCode, \r\n          " +
                    "  T.InsuranceTypeName AS InsuranceType_InsuranceTypeName, \r\n            T.Insura" +
                    "nceTypeDescription AS InsuranceType_InsuranceTypeDescription, \r\n            T.Is" +
                    "Active AS InsuranceType_IsActive, \r\n            T.IsDeleted AS InsuranceType_IsD" +
                    "eleted, \r\n            T.IsReadOnly AS InsuranceType_IsReadOnly, \r\n            T." +
                    "IsPrivate AS InsuranceType_IsPrivate, \r\n            T.RecCreatedDt AS InsuranceT" +
                    "ype_RecCreatedDt, \r\n            T.RecCreatedBy AS InsuranceType_RecCreatedBy, \r\n" +
                    "            T.RecLastUpdatedBy AS InsuranceType_RecLastUpdatedBy, \r\n            " +
                    "T.RecLastUpdatedDt AS InsuranceType_RecLastUpdatedDt, \r\n            T.RowVersion" +
                    " AS InsuranceType_RowVersion, \r\n            T.UserDomainKey AS InsuranceType_Use" +
                    "rDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.InsuranceTy" +
                    "pes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.JobType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.JobType", @"
    SELECT VALUE -- Constructing JobType
        [CaresModel.Store.JobType](T1.JobType_JobTypeID, T1.JobType_JobTypeCode, T1.JobType_JobTypeName, T1.JobType_JobTypeDescription, T1.JobType_RowVersion, T1.JobType_IsActive, T1.JobType_IsPrivate, T1.JobType_IsDeleted, T1.JobType_IsReadOnly, T1.JobType_RecCreatedDt, T1.JobType_RecCreatedBy, T1.JobType_RecLastUpdatedDt, T1.JobType_RecLastUpdatedBy, T1.JobType_UserDomainKey)
    FROM (
        SELECT 
            T.JobTypeId AS JobType_JobTypeID, 
            T.JobTypeCode AS JobType_JobTypeCode, 
            T.JobTypeName AS JobType_JobTypeName, 
            T.JobTypeDescription AS JobType_JobTypeDescription, 
            T.RowVersion AS JobType_RowVersion, 
            T.IsActive AS JobType_IsActive, 
            T.IsPrivate AS JobType_IsPrivate, 
            T.IsDeleted AS JobType_IsDeleted, 
            T.IsReadOnly AS JobType_IsReadOnly, 
            T.RecCreatedDt AS JobType_RecCreatedDt, 
            T.RecCreatedBy AS JobType_RecCreatedBy, 
            T.RecLastUpdatedDt AS JobType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS JobType_RecLastUpdatedBy, 
            T.UserDomainKey AS JobType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.JobTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.LicenseType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.LicenseType", @"
    SELECT VALUE -- Constructing LicenseType
        [CaresModel.Store.LicenseType](T1.LicenseType_LicenseTypeID, T1.LicenseType_LicenseTypeCode, T1.LicenseType_LicenseTypeName, T1.LicenseType_LicenseTypeDescription, T1.LicenseType_RowVersion, T1.LicenseType_IsActive, T1.LicenseType_IsPrivate, T1.LicenseType_IsDeleted, T1.LicenseType_IsReadOnly, T1.LicenseType_RecCreatedDt, T1.LicenseType_RecCreatedBy, T1.LicenseType_RecLastUpdatedDt, T1.LicenseType_RecLastUpdatedBy, T1.LicenseType_UserDomainKey)
    FROM (
        SELECT 
            T.LicenseTypeId AS LicenseType_LicenseTypeID, 
            T.LicenseTypeCode AS LicenseType_LicenseTypeCode, 
            T.LicenseTypeName AS LicenseType_LicenseTypeName, 
            T.LicenseTypeDescription AS LicenseType_LicenseTypeDescription, 
            T.RowVersion AS LicenseType_RowVersion, 
            T.IsActive AS LicenseType_IsActive, 
            T.IsPrivate AS LicenseType_IsPrivate, 
            T.IsDeleted AS LicenseType_IsDeleted, 
            T.IsReadOnly AS LicenseType_IsReadOnly, 
            T.RecCreatedDt AS LicenseType_RecCreatedDt, 
            T.RecCreatedBy AS LicenseType_RecCreatedBy, 
            T.RecLastUpdatedDt AS LicenseType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS LicenseType_RecLastUpdatedBy, 
            T.UserDomainKey AS LicenseType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.LicenseTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.MaintenanceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.MaintenanceType", "\r\n    SELECT VALUE -- Constructing MaintenanceType\r\n        [CaresModel.Store.Mai" +
                    "ntenanceType](T1.MaintenanceType_MaintenanceTypeID, T1.MaintenanceType_Maintenan" +
                    "ceTypeGroupID, T1.MaintenanceType_MaintenanceTypeCode, T1.MaintenanceType_Mainte" +
                    "nanceTypeName, T1.MaintenanceType_MaintenanceTypeDescription, T1.MaintenanceType" +
                    "_IsActive, T1.MaintenanceType_IsDeleted, T1.MaintenanceType_IsReadOnly, T1.Maint" +
                    "enanceType_IsPrivate, T1.MaintenanceType_RecCreatedDt, T1.MaintenanceType_RecCre" +
                    "atedBy, T1.MaintenanceType_RecLastUpdatedBy, T1.MaintenanceType_RecLastUpdatedDt" +
                    ", T1.MaintenanceType_RowVersion, T1.MaintenanceType_UserDomainKey)\r\n    FROM (\r\n" +
                    "        SELECT \r\n            T.MaintenanceTypeId AS MaintenanceType_MaintenanceT" +
                    "ypeID, \r\n            T.MaintenanceTypeGroupId AS MaintenanceType_MaintenanceType" +
                    "GroupID, \r\n            T.MaintenanceTypeCode AS MaintenanceType_MaintenanceTypeC" +
                    "ode, \r\n            T.MaintenanceTypeName AS MaintenanceType_MaintenanceTypeName," +
                    " \r\n            T.MaintenanceTypeDescription AS MaintenanceType_MaintenanceTypeDe" +
                    "scription, \r\n            T.IsActive AS MaintenanceType_IsActive, \r\n            T" +
                    ".IsDeleted AS MaintenanceType_IsDeleted, \r\n            T.IsReadOnly AS Maintenan" +
                    "ceType_IsReadOnly, \r\n            T.IsPrivate AS MaintenanceType_IsPrivate, \r\n   " +
                    "         T.RecCreatedDt AS MaintenanceType_RecCreatedDt, \r\n            T.RecCrea" +
                    "tedBy AS MaintenanceType_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS Maint" +
                    "enanceType_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS MaintenanceType" +
                    "_RecLastUpdatedDt, \r\n            T.RowVersion AS MaintenanceType_RowVersion, \r\n " +
                    "           T.UserDomainKey AS MaintenanceType_UserDomainKey, \r\n            True " +
                    "AS _from0\r\n        FROM BaseDbContext.MaintenanceTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.MaintenanceTypeGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView58()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.MaintenanceTypeGroup", "\r\n    SELECT VALUE -- Constructing MaintenanceTypeGroup\r\n        [CaresModel.Stor" +
                    "e.MaintenanceTypeGroup](T1.MaintenanceTypeGroup_MaintenanceTypeGroupID, T1.Maint" +
                    "enanceTypeGroup_MaintenanceTypeGroupCode, T1.MaintenanceTypeGroup_MaintenanceTyp" +
                    "eGroupName, T1.MaintenanceTypeGroup_MaintenanceTypeGroupDescription, T1.Maintena" +
                    "nceTypeGroup_IsActive, T1.MaintenanceTypeGroup_IsDeleted, T1.MaintenanceTypeGrou" +
                    "p_IsReadOnly, T1.MaintenanceTypeGroup_IsPrivate, T1.MaintenanceTypeGroup_RecCrea" +
                    "tedDt, T1.MaintenanceTypeGroup_RecCreatedBy, T1.MaintenanceTypeGroup_RecLastUpda" +
                    "tedBy, T1.MaintenanceTypeGroup_RecLastUpdatedDt, T1.MaintenanceTypeGroup_RowVers" +
                    "ion, T1.MaintenanceTypeGroup_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n      " +
                    "      T.MaintenanceTypeGroupId AS MaintenanceTypeGroup_MaintenanceTypeGroupID, \r" +
                    "\n            T.MaintenanceTypeGroupCode AS MaintenanceTypeGroup_MaintenanceTypeG" +
                    "roupCode, \r\n            T.MaintenanceTypeGroupName AS MaintenanceTypeGroup_Maint" +
                    "enanceTypeGroupName, \r\n            T.MaintenanceTypeGroupDescription AS Maintena" +
                    "nceTypeGroup_MaintenanceTypeGroupDescription, \r\n            T.IsActive AS Mainte" +
                    "nanceTypeGroup_IsActive, \r\n            T.IsDeleted AS MaintenanceTypeGroup_IsDel" +
                    "eted, \r\n            T.IsReadOnly AS MaintenanceTypeGroup_IsReadOnly, \r\n         " +
                    "   T.IsPrivate AS MaintenanceTypeGroup_IsPrivate, \r\n            T.RecCreatedDt A" +
                    "S MaintenanceTypeGroup_RecCreatedDt, \r\n            T.RecCreatedBy AS Maintenance" +
                    "TypeGroup_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS MaintenanceTypeGroup" +
                    "_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS MaintenanceTypeGroup_RecL" +
                    "astUpdatedDt, \r\n            T.RowVersion AS MaintenanceTypeGroup_RowVersion, \r\n " +
                    "           T.UserDomainKey AS MaintenanceTypeGroup_UserDomainKey, \r\n            " +
                    "True AS _from0\r\n        FROM BaseDbContext.MaintenanceTypeGroups AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.MarketingChannel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView59()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.MarketingChannel", "\r\n    SELECT VALUE -- Constructing MarketingChannel\r\n        [CaresModel.Store.Ma" +
                    "rketingChannel](T1.MarketingChannel_MarketingChannelID, T1.MarketingChannel_Mark" +
                    "etingChannelCode, T1.MarketingChannel_MarketingChannelName, T1.MarketingChannel_" +
                    "MarketingChannelDescription, T1.MarketingChannel_RowVersion, T1.MarketingChannel" +
                    "_IsActive, T1.MarketingChannel_IsDeleted, T1.MarketingChannel_IsPrivate, T1.Mark" +
                    "etingChannel_IsReadOnly, T1.MarketingChannel_RecCreatedDt, T1.MarketingChannel_R" +
                    "ecCreatedBy, T1.MarketingChannel_RecLastUpdatedDt, T1.MarketingChannel_RecLastUp" +
                    "datedBy, T1.MarketingChannel_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n      " +
                    "      T.MarketingChannelId AS MarketingChannel_MarketingChannelID, \r\n           " +
                    " T.MarketingChannelCode AS MarketingChannel_MarketingChannelCode, \r\n            " +
                    "T.MarketingChannelName AS MarketingChannel_MarketingChannelName, \r\n            T" +
                    ".MarketingChannelDescription AS MarketingChannel_MarketingChannelDescription, \r\n" +
                    "            T.RowVersion AS MarketingChannel_RowVersion, \r\n            T.IsActiv" +
                    "e AS MarketingChannel_IsActive, \r\n            T.IsDeleted AS MarketingChannel_Is" +
                    "Deleted, \r\n            T.IsPrivate AS MarketingChannel_IsPrivate, \r\n            " +
                    "T.IsReadOnly AS MarketingChannel_IsReadOnly, \r\n            T.RecCreatedDt AS Mar" +
                    "ketingChannel_RecCreatedDt, \r\n            T.RecCreatedBy AS MarketingChannel_Rec" +
                    "CreatedBy, \r\n            T.RecLastUpdatedDt AS MarketingChannel_RecLastUpdatedDt" +
                    ", \r\n            T.RecLastUpdatedBy AS MarketingChannel_RecLastUpdatedBy, \r\n     " +
                    "       T.UserDomainKey AS MarketingChannel_UserDomainKey, \r\n            True AS " +
                    "_from0\r\n        FROM BaseDbContext.MarketingChannels AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.MeasurementUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView60()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.MeasurementUnit", "\r\n    SELECT VALUE -- Constructing MeasurementUnit\r\n        [CaresModel.Store.Mea" +
                    "surementUnit](T1.MeasurementUnit_MeasurementUnitID, T1.MeasurementUnit_Measureme" +
                    "ntUnitCode, T1.MeasurementUnit_MeasurementUnitName, T1.MeasurementUnit_Measureme" +
                    "ntUnitDescription, T1.MeasurementUnit_MeasurementUnitKey, T1.MeasurementUnit_Row" +
                    "Version, T1.MeasurementUnit_RecCreatedDt, T1.MeasurementUnit_RecLastUpdatedDt, T" +
                    "1.MeasurementUnit_RecLastUpdatedBy, T1.MeasurementUnit_RecCreatedBy, T1.Measurem" +
                    "entUnit_IsActive, T1.MeasurementUnit_IsDeleted, T1.MeasurementUnit_IsPrivate, T1" +
                    ".MeasurementUnit_IsReadOnly, T1.MeasurementUnit_UserDomainKey)\r\n    FROM (\r\n    " +
                    "    SELECT \r\n            T.MeasurementUnitId AS MeasurementUnit_MeasurementUnitI" +
                    "D, \r\n            T.MeasurementUnitCode AS MeasurementUnit_MeasurementUnitCode, \r" +
                    "\n            T.MeasurementUnitName AS MeasurementUnit_MeasurementUnitName, \r\n   " +
                    "         T.MeasurementUnitDescription AS MeasurementUnit_MeasurementUnitDescript" +
                    "ion, \r\n            T.MeasurementUnitKey AS MeasurementUnit_MeasurementUnitKey, \r" +
                    "\n            T.RowVersion AS MeasurementUnit_RowVersion, \r\n            T.RecCrea" +
                    "tedDt AS MeasurementUnit_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS Measu" +
                    "rementUnit_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS MeasurementUnit" +
                    "_RecLastUpdatedBy, \r\n            T.RecCreatedBy AS MeasurementUnit_RecCreatedBy," +
                    " \r\n            T.IsActive AS MeasurementUnit_IsActive, \r\n            T.IsDeleted" +
                    " AS MeasurementUnit_IsDeleted, \r\n            T.IsPrivate AS MeasurementUnit_IsPr" +
                    "ivate, \r\n            T.IsReadOnly AS MeasurementUnit_IsReadOnly, \r\n            T" +
                    ".UserDomainKey AS MeasurementUnit_UserDomainKey, \r\n            True AS _from0\r\n " +
                    "       FROM BaseDbContext.MeasurementUnits AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.OccupationType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView61()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.OccupationType", "\r\n    SELECT VALUE -- Constructing OccupationType\r\n        [CaresModel.Store.Occu" +
                    "pationType](T1.OccupationType_OccupationTypeID, T1.OccupationType_OccupationType" +
                    "Code, T1.OccupationType_OccupationTypeName, T1.OccupationType_OccupationTypeDesc" +
                    "ription, T1.OccupationType_RowVersion, T1.OccupationType_IsActive, T1.Occupation" +
                    "Type_IsDeleted, T1.OccupationType_IsPrivate, T1.OccupationType_IsReadOnly, T1.Oc" +
                    "cupationType_RecCreatedDt, T1.OccupationType_RecCreatedBy, T1.OccupationType_Rec" +
                    "LastUpdatedDt, T1.OccupationType_RecLastUpdatedBy, T1.OccupationType_UserDomainK" +
                    "ey)\r\n    FROM (\r\n        SELECT \r\n            T.OccupationTypeId AS OccupationTy" +
                    "pe_OccupationTypeID, \r\n            T.OccupationTypeCode AS OccupationType_Occupa" +
                    "tionTypeCode, \r\n            T.OccupationTypeName AS OccupationType_OccupationTyp" +
                    "eName, \r\n            T.OccupationTypeDescription AS OccupationType_OccupationTyp" +
                    "eDescription, \r\n            T.RowVersion AS OccupationType_RowVersion, \r\n       " +
                    "     T.IsActive AS OccupationType_IsActive, \r\n            T.IsDeleted AS Occupat" +
                    "ionType_IsDeleted, \r\n            T.IsPrivate AS OccupationType_IsPrivate, \r\n    " +
                    "        T.IsReadOnly AS OccupationType_IsReadOnly, \r\n            T.RecCreatedDt " +
                    "AS OccupationType_RecCreatedDt, \r\n            T.RecCreatedBy AS OccupationType_R" +
                    "ecCreatedBy, \r\n            T.RecLastUpdatedDt AS OccupationType_RecLastUpdatedDt" +
                    ", \r\n            T.RecLastUpdatedBy AS OccupationType_RecLastUpdatedBy, \r\n       " +
                    "     T.UserDomainKey AS OccupationType_UserDomainKey, \r\n            True AS _fro" +
                    "m0\r\n        FROM BaseDbContext.OccupationTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.PricingStrategy
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView62()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.PricingStrategy", @"
    SELECT VALUE -- Constructing PricingStrategy
        [CaresModel.Store.PricingStrategy](T1.PricingStrategy_PricingStrategyID, T1.PricingStrategy_PricingStrategyCode, T1.PricingStrategy_PricingStrategyName, T1.PricingStrategy_PricingStrategyDescription, T1.PricingStrategy_IsActive, T1.PricingStrategy_IsDeleted, T1.PricingStrategy_IsPrivate, T1.PricingStrategy_IsReadOnly, T1.PricingStrategy_UserDomainKey)
    FROM (
        SELECT 
            T.PricingStrategyId AS PricingStrategy_PricingStrategyID, 
            T.PricingStrategyCode AS PricingStrategy_PricingStrategyCode, 
            T.PricingStrategyName AS PricingStrategy_PricingStrategyName, 
            T.PricingStrategyDescription AS PricingStrategy_PricingStrategyDescription, 
            T.IsActive AS PricingStrategy_IsActive, 
            T.IsDeleted AS PricingStrategy_IsDeleted, 
            T.IsPrivate AS PricingStrategy_IsPrivate, 
            T.IsReadOnly AS PricingStrategy_IsReadOnly, 
            T.UserDomainKey AS PricingStrategy_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.PricingStrategies AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.StandardRt
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView63()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.StandardRt", "\r\n    SELECT VALUE -- Constructing StandardRt\r\n        [CaresModel.Store.Standard" +
                    "Rt](T1.StandardRt_StandardRtID, T1.StandardRt_ChildStandardRtID, T1.StandardRt_S" +
                    "tandardRtMainID, T1.StandardRt_AllowedMileage, T1.StandardRt_ExcessMileageChrg, " +
                    "T1.StandardRt_StandardRate, T1.StandardRt_RevisionNumber, T1.StandardRt_IsActive" +
                    ", T1.StandardRt_IsDeleted, T1.StandardRt_IsPrivate, T1.StandardRt_IsReadOnly, T1" +
                    ".StandardRt_RowVersion, T1.StandardRt_RecCreatedDt, T1.StandardRt_RecLastUpdated" +
                    "Dt, T1.StandardRt_RecCreatedBy, T1.StandardRt_RecLastUpdatedBy, T1.StandardRt_Hi" +
                    "reGroupDetailID, T1.StandardRt_StandardRtEndDt, T1.StandardRt_StandardRtStartDt," +
                    " T1.StandardRt_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Standa" +
                    "rdRtId AS StandardRt_StandardRtID, \r\n            T.ChildStandardRtId AS Standard" +
                    "Rt_ChildStandardRtID, \r\n            T.StandardRtMainId AS StandardRt_StandardRtM" +
                    "ainID, \r\n            T.AllowedMileage AS StandardRt_AllowedMileage, \r\n          " +
                    "  T.ExcessMileageChrg AS StandardRt_ExcessMileageChrg, \r\n            T.StandardR" +
                    "t AS StandardRt_StandardRate, \r\n            T.RevisionNumber AS StandardRt_Revis" +
                    "ionNumber, \r\n            T.IsActive AS StandardRt_IsActive, \r\n            T.IsDe" +
                    "leted AS StandardRt_IsDeleted, \r\n            T.IsPrivate AS StandardRt_IsPrivate" +
                    ", \r\n            T.IsReadOnly AS StandardRt_IsReadOnly, \r\n            T.RowVersio" +
                    "n AS StandardRt_RowVersion, \r\n            T.RecCreatedDt AS StandardRt_RecCreate" +
                    "dDt, \r\n            T.RecLastUpdatedDt AS StandardRt_RecLastUpdatedDt, \r\n        " +
                    "    T.RecCreatedBy AS StandardRt_RecCreatedBy, \r\n            T.RecLastUpdatedBy " +
                    "AS StandardRt_RecLastUpdatedBy, \r\n            T.HireGroupDetailId AS StandardRt_" +
                    "HireGroupDetailID, \r\n            T.StandardRtEndDt AS StandardRt_StandardRtEndDt" +
                    ", \r\n            T.StandardRtStartDt AS StandardRt_StandardRtStartDt, \r\n         " +
                    "   T.UserDomainKey AS StandardRt_UserDomainKey, \r\n            True AS _from0\r\n  " +
                    "      FROM BaseDbContext.StandardRates AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.StandardRtMain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView64()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.StandardRtMain", "\r\n    SELECT VALUE -- Constructing StandardRtMain\r\n        [CaresModel.Store.Stan" +
                    "dardRtMain](T1.StandardRtMain_StandardRtMainID, T1.StandardRtMain_StandardRtMain" +
                    "Code, T1.StandardRtMain_TariffTypeCode, T1.StandardRtMain_StandardRtMainName, T1" +
                    ".StandardRtMain_StandardRtMainDescription, T1.StandardRtMain_StartDt, T1.Standar" +
                    "dRtMain_EndDt, T1.StandardRtMain_RowVersion, T1.StandardRtMain_IsActive, T1.Stan" +
                    "dardRtMain_IsDeleted, T1.StandardRtMain_IsPrivate, T1.StandardRtMain_IsReadOnly," +
                    " T1.StandardRtMain_RecCreatedDt, T1.StandardRtMain_RecLastUpdatedDt, T1.Standard" +
                    "RtMain_RecCreatedBy, T1.StandardRtMain_RecLastUpdatedBy, T1.StandardRtMain_UserD" +
                    "omainKey)\r\n    FROM (\r\n        SELECT \r\n            T.StandardRtMainId AS Standa" +
                    "rdRtMain_StandardRtMainID, \r\n            T.StandardRtMainCode AS StandardRtMain_" +
                    "StandardRtMainCode, \r\n            T.TariffTypeCode AS StandardRtMain_TariffTypeC" +
                    "ode, \r\n            T.StandardRtMainName AS StandardRtMain_StandardRtMainName, \r\n" +
                    "            T.StandardRtMainDescription AS StandardRtMain_StandardRtMainDescript" +
                    "ion, \r\n            T.StartDt AS StandardRtMain_StartDt, \r\n            T.EndDt AS" +
                    " StandardRtMain_EndDt, \r\n            T.RowVersion AS StandardRtMain_RowVersion, " +
                    "\r\n            T.IsActive AS StandardRtMain_IsActive, \r\n            T.IsDeleted A" +
                    "S StandardRtMain_IsDeleted, \r\n            T.IsPrivate AS StandardRtMain_IsPrivat" +
                    "e, \r\n            T.IsReadOnly AS StandardRtMain_IsReadOnly, \r\n            T.RecC" +
                    "reatedDt AS StandardRtMain_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS Sta" +
                    "ndardRtMain_RecLastUpdatedDt, \r\n            T.RecCreatedBy AS StandardRtMain_Rec" +
                    "CreatedBy, \r\n            T.RecLastUpdatedBy AS StandardRtMain_RecLastUpdatedBy, " +
                    "\r\n            T.UserDomainKey AS StandardRtMain_UserDomainKey, \r\n            Tru" +
                    "e AS _from0\r\n        FROM BaseDbContext.StandardRateMains AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleDisposalInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView65()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleDisposalInfo", @"
    SELECT VALUE -- Constructing VehicleDisposalInfo
        [CaresModel.Store.VehicleDisposalInfo](T1.VehicleDisposalInfo_VehicleID, T1.VehicleDisposalInfo_SaleDate, T1.VehicleDisposalInfo_SalePrice, T1.VehicleDisposalInfo_SoldTo, T1.VehicleDisposalInfo_DisposalDescription, T1.VehicleDisposalInfo_BPMainID, T1.VehicleDisposalInfo_RecCreatedDt, T1.VehicleDisposalInfo_RecCreatedBy, T1.VehicleDisposalInfo_RecLastUpdatedDt, T1.VehicleDisposalInfo_RecLastUpdatedBy, T1.VehicleDisposalInfo_RowVersion, T1.VehicleDisposalInfo_UserDomainKey)
    FROM (
        SELECT 
            T.VehicleId AS VehicleDisposalInfo_VehicleID, 
            T.SaleDate AS VehicleDisposalInfo_SaleDate, 
            T.SalePrice AS VehicleDisposalInfo_SalePrice, 
            T.SoldTo AS VehicleDisposalInfo_SoldTo, 
            T.DisposalDescription AS VehicleDisposalInfo_DisposalDescription, 
            T.BPMainId AS VehicleDisposalInfo_BPMainID, 
            T.RecCreatedDt AS VehicleDisposalInfo_RecCreatedDt, 
            T.RecCreatedBy AS VehicleDisposalInfo_RecCreatedBy, 
            T.RecLastUpdatedDt AS VehicleDisposalInfo_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS VehicleDisposalInfo_RecLastUpdatedBy, 
            T.RowVersion AS VehicleDisposalInfo_RowVersion, 
            T.UserDomainKey AS VehicleDisposalInfo_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.VehicleDisposalInfoes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleImageHireGroupDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView66()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleImageHireGroupDetail", "\r\n    SELECT VALUE -- Constructing VehicleImageHireGroupDetail\r\n        [CaresMod" +
                    "el.Store.VehicleImageHireGroupDetail](T1.VehicleImageHireGroupDetail_VehicleImag" +
                    "eHireGroupDetailID, T1.VehicleImageHireGroupDetail_VehicleImageID, T1.VehicleIma" +
                    "geHireGroupDetail_HireGroupDetailID, T1.VehicleImageHireGroupDetail_RowVersion, " +
                    "T1.VehicleImageHireGroupDetail_IsActive, T1.VehicleImageHireGroupDetail_IsDelete" +
                    "d, T1.VehicleImageHireGroupDetail_IsPrivate, T1.VehicleImageHireGroupDetail_IsRe" +
                    "adOnly, T1.VehicleImageHireGroupDetail_RecCreatedDt, T1.VehicleImageHireGroupDet" +
                    "ail_RecCreatedBy, T1.VehicleImageHireGroupDetail_RecLastUpdatedDt, T1.VehicleIma" +
                    "geHireGroupDetail_RecLastUpdatedBy, T1.VehicleImageHireGroupDetail_UserDomainKey" +
                    ")\r\n    FROM (\r\n        SELECT \r\n            T.VehicleImageHireGroupDetailId AS V" +
                    "ehicleImageHireGroupDetail_VehicleImageHireGroupDetailID, \r\n            T.Vehicl" +
                    "eImageId AS VehicleImageHireGroupDetail_VehicleImageID, \r\n            T.HireGrou" +
                    "pDetailId AS VehicleImageHireGroupDetail_HireGroupDetailID, \r\n            T.RowV" +
                    "ersion AS VehicleImageHireGroupDetail_RowVersion, \r\n            T.IsActive AS Ve" +
                    "hicleImageHireGroupDetail_IsActive, \r\n            T.IsDeleted AS VehicleImageHir" +
                    "eGroupDetail_IsDeleted, \r\n            T.IsPrivate AS VehicleImageHireGroupDetail" +
                    "_IsPrivate, \r\n            T.IsReadOnly AS VehicleImageHireGroupDetail_IsReadOnly" +
                    ", \r\n            T.RecCreatedDt AS VehicleImageHireGroupDetail_RecCreatedDt, \r\n  " +
                    "          T.RecCreatedBy AS VehicleImageHireGroupDetail_RecCreatedBy, \r\n        " +
                    "    T.RecLastUpdatedDt AS VehicleImageHireGroupDetail_RecLastUpdatedDt, \r\n      " +
                    "      T.RecLastUpdatedBy AS VehicleImageHireGroupDetail_RecLastUpdatedBy, \r\n    " +
                    "        T.UserDomainKey AS VehicleImageHireGroupDetail_UserDomainKey, \r\n        " +
                    "    True AS _from0\r\n        FROM BaseDbContext.VehicleImageHireGroupDetails AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleInsuranceInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView67()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleInsuranceInfo", "\r\n    SELECT VALUE -- Constructing VehicleInsuranceInfo\r\n        [CaresModel.Stor" +
                    "e.VehicleInsuranceInfo](T1.VehicleInsuranceInfo_VehicleID, T1.VehicleInsuranceIn" +
                    "fo_InsuranceAgent, T1.VehicleInsuranceInfo_CoverageLimit, T1.VehicleInsuranceInf" +
                    "o_RenewalDate, T1.VehicleInsuranceInfo_Premium, T1.VehicleInsuranceInfo_Insuranc" +
                    "eDate, T1.VehicleInsuranceInfo_InsuredValue, T1.VehicleInsuranceInfo_InsuredFrom" +
                    ", T1.VehicleInsuranceInfo_BPMainID, T1.VehicleInsuranceInfo_InsuranceTypeID, T1." +
                    "VehicleInsuranceInfo_RowVersion, T1.VehicleInsuranceInfo_RecLastUpdatedBy, T1.Ve" +
                    "hicleInsuranceInfo_RecCreatedDt, T1.VehicleInsuranceInfo_RecLastUpdatedDt, T1.Ve" +
                    "hicleInsuranceInfo_RecCreatedBy, T1.VehicleInsuranceInfo_UserDomainKey)\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.VehicleId AS VehicleInsuranceInfo_VehicleID," +
                    " \r\n            T.InsuranceAgent AS VehicleInsuranceInfo_InsuranceAgent, \r\n      " +
                    "      T.CoverageLimit AS VehicleInsuranceInfo_CoverageLimit, \r\n            T.Ren" +
                    "ewalDate AS VehicleInsuranceInfo_RenewalDate, \r\n            T.Premium AS Vehicle" +
                    "InsuranceInfo_Premium, \r\n            T.InsuranceDate AS VehicleInsuranceInfo_Ins" +
                    "uranceDate, \r\n            T.InsuredValue AS VehicleInsuranceInfo_InsuredValue, \r" +
                    "\n            T.InsuredFrom AS VehicleInsuranceInfo_InsuredFrom, \r\n            T." +
                    "BPMainId AS VehicleInsuranceInfo_BPMainID, \r\n            T.InsuranceTypeId AS Ve" +
                    "hicleInsuranceInfo_InsuranceTypeID, \r\n            T.RowVersion AS VehicleInsuran" +
                    "ceInfo_RowVersion, \r\n            T.RecLastUpdatedBy AS VehicleInsuranceInfo_RecL" +
                    "astUpdatedBy, \r\n            T.RecCreatedDt AS VehicleInsuranceInfo_RecCreatedDt," +
                    " \r\n            T.RecLastUpdatedDt AS VehicleInsuranceInfo_RecLastUpdatedDt, \r\n  " +
                    "          T.RecCreatedBy AS VehicleInsuranceInfo_RecCreatedBy, \r\n            T.U" +
                    "serDomainKey AS VehicleInsuranceInfo_UserDomainKey, \r\n            True AS _from0" +
                    "\r\n        FROM BaseDbContext.VehicleInsuranceInfoes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleLeasedInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView68()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2186);
            viewString.Append("\r\n    SELECT VALUE -- Constructing VehicleLeasedInfo\r\n        [CaresModel.Store.");
            viewString.Append("VehicleLeasedInfo](T1.VehicleLeasedInfo_VehicleID, T1.VehicleLeasedInfo_DownPaym");
            viewString.Append("ent, T1.VehicleLeasedInfo_LeasedStartDate, T1.VehicleLeasedInfo_LeasedFinishDate");
            viewString.Append(", T1.VehicleLeasedInfo_MonthlyPayment, T1.VehicleLeasedInfo_InterestRate, T1.Veh");
            viewString.Append("icleLeasedInfo_PrinicipalPayment, T1.VehicleLeasedInfo_FirstPaymentDate, T1.Vehi");
            viewString.Append("cleLeasedInfo_LeasedFrom, T1.VehicleLeasedInfo_LeaseToOwnership, T1.VehicleLease");
            viewString.Append("dInfo_LastMonthPayment, T1.VehicleLeasedInfo_FirstMonthPayment, T1.VehicleLeased");
            viewString.Append("Info_BPMainID, T1.VehicleLeasedInfo_RecCreatedDt, T1.VehicleLeasedInfo_RecLastUp");
            viewString.Append("datedBy, T1.VehicleLeasedInfo_RecCreatedBy, T1.VehicleLeasedInfo_RowVersion, T1.");
            viewString.Append("VehicleLeasedInfo_RecLastUpdatedDt, T1.VehicleLeasedInfo_UserDomainKey)\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.VehicleId AS VehicleLeasedInfo_VehicleID, \r\n");
            viewString.Append("            T.DownPayment AS VehicleLeasedInfo_DownPayment, \r\n            T.Leas");
            viewString.Append("edStartDate AS VehicleLeasedInfo_LeasedStartDate, \r\n            T.LeasedFinishDa");
            viewString.Append("te AS VehicleLeasedInfo_LeasedFinishDate, \r\n            T.MonthlyPayment AS Vehi");
            viewString.Append("cleLeasedInfo_MonthlyPayment, \r\n            T.InterestRate AS VehicleLeasedInfo_");
            viewString.Append("InterestRate, \r\n            T.PrinicipalPayment AS VehicleLeasedInfo_PrinicipalP");
            viewString.Append("ayment, \r\n            T.FirstPaymentDate AS VehicleLeasedInfo_FirstPaymentDate, ");
            viewString.Append("\r\n            T.LeasedFrom AS VehicleLeasedInfo_LeasedFrom, \r\n            T.Leas");
            viewString.Append("eToOwnership AS VehicleLeasedInfo_LeaseToOwnership, \r\n            T.LastMonthPay");
            viewString.Append("ment AS VehicleLeasedInfo_LastMonthPayment, \r\n            T.FirstMonthPayment AS");
            viewString.Append(" VehicleLeasedInfo_FirstMonthPayment, \r\n            T.BPMainId AS VehicleLeasedI");
            viewString.Append("nfo_BPMainID, \r\n            T.RecCreatedDt AS VehicleLeasedInfo_RecCreatedDt, \r\n");
            viewString.Append("            T.RecLastUpdatedBy AS VehicleLeasedInfo_RecLastUpdatedBy, \r\n        ");
            viewString.Append("    T.RecCreatedBy AS VehicleLeasedInfo_RecCreatedBy, \r\n            T.RowVersion");
            viewString.Append(" AS VehicleLeasedInfo_RowVersion, \r\n            T.RecLastUpdatedDt AS VehicleLea");
            viewString.Append("sedInfo_RecLastUpdatedDt, \r\n            T.UserDomainKey AS VehicleLeasedInfo_Use");
            viewString.Append("rDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.VehicleLeas");
            viewString.Append("edInfoes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleLeasedInfo", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleMaintenanceTypeFrequency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView69()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleMaintenanceTypeFrequency", "\r\n    SELECT VALUE -- Constructing VehicleMaintenanceTypeFrequency\r\n        [Care" +
                    "sModel.Store.VehicleMaintenanceTypeFrequency](T1.VehicleMaintenanceTypeFrequency" +
                    "_MaintenanceTypeFrequencyID, T1.VehicleMaintenanceTypeFrequency_VehicleID, T1.Ve" +
                    "hicleMaintenanceTypeFrequency_MaintenanceStartDate, T1.VehicleMaintenanceTypeFre" +
                    "quency_Frequency, T1.VehicleMaintenanceTypeFrequency_FrequencyKiloMeter, T1.Vehi" +
                    "cleMaintenanceTypeFrequency_MaintenanceTypeID, T1.VehicleMaintenanceTypeFrequenc" +
                    "y_RowVersion, T1.VehicleMaintenanceTypeFrequency_RecCreatedDt, T1.VehicleMainten" +
                    "anceTypeFrequency_RecCreatedBy, T1.VehicleMaintenanceTypeFrequency_RecLastUpdate" +
                    "dBy, T1.VehicleMaintenanceTypeFrequency_RecLastUpdatedDt, T1.VehicleMaintenanceT" +
                    "ypeFrequency_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Maintena" +
                    "nceTypeFrequencyId AS VehicleMaintenanceTypeFrequency_MaintenanceTypeFrequencyID" +
                    ", \r\n            T.VehicleId AS VehicleMaintenanceTypeFrequency_VehicleID, \r\n    " +
                    "        T.MaintenanceStartDate AS VehicleMaintenanceTypeFrequency_MaintenanceSta" +
                    "rtDate, \r\n            T.Frequency AS VehicleMaintenanceTypeFrequency_Frequency, " +
                    "\r\n            T.FrequencyKiloMeter AS VehicleMaintenanceTypeFrequency_FrequencyK" +
                    "iloMeter, \r\n            T.MaintenanceTypeId AS VehicleMaintenanceTypeFrequency_M" +
                    "aintenanceTypeID, \r\n            T.RowVersion AS VehicleMaintenanceTypeFrequency_" +
                    "RowVersion, \r\n            T.RecCreatedDt AS VehicleMaintenanceTypeFrequency_RecC" +
                    "reatedDt, \r\n            T.RecCreatedBy AS VehicleMaintenanceTypeFrequency_RecCre" +
                    "atedBy, \r\n            T.RecLastUpdatedBy AS VehicleMaintenanceTypeFrequency_RecL" +
                    "astUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleMaintenanceTypeFrequenc" +
                    "y_RecLastUpdatedDt, \r\n            T.UserDomainKey AS VehicleMaintenanceTypeFrequ" +
                    "ency_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Veh" +
                    "icleMaintenanceTypeFrequencies AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleOtherDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView70()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2633);
            viewString.Append("\r\n    SELECT VALUE -- Constructing VehicleOtherDetail\r\n        [CaresModel.Store");
            viewString.Append(".VehicleOtherDetail](T1.VehicleOtherDetail_VehicleID, T1.VehicleOtherDetail_Numb");
            viewString.Append("erOfDoors, T1.[VehicleOtherDetail.HorsePower_CC], T1.VehicleOtherDetail_NumberOf");
            viewString.Append("Cylinders, T1.VehicleOtherDetail_isAlloyRim, T1.VehicleOtherDetail_ChasisNumber,");
            viewString.Append(" T1.VehicleOtherDetail_EngineNumber, T1.VehicleOtherDetail_KeyCode, T1.VehicleOt");
            viewString.Append("herDetail_RadioCode, T1.VehicleOtherDetail_Accessories, T1.VehicleOtherDetail_To");
            viewString.Append("pSpeed, T1.VehicleOtherDetail_InteriorDescription, T1.VehicleOtherDetail_FrontWh");
            viewString.Append("eelSize, T1.VehicleOtherDetail_BackWheelSize, T1.VehicleOtherDetail_RecCreatedDt");
            viewString.Append(", T1.VehicleOtherDetail_RecCreatedBy, T1.VehicleOtherDetail_RecLastUpdatedDt, T1");
            viewString.Append(".VehicleOtherDetail_RecLastUpdatedBy, T1.VehicleOtherDetail_RowVersion, T1.Vehic");
            viewString.Append("leOtherDetail_IsActive, T1.VehicleOtherDetail_IsDeleted, T1.VehicleOtherDetail_I");
            viewString.Append("sReadOnly, T1.VehicleOtherDetail_IsPrivate, T1.VehicleOtherDetail_UserDomainKey)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.VehicleId AS VehicleOtherDetail_Veh");
            viewString.Append("icleID, \r\n            T.NumberOfDoors AS VehicleOtherDetail_NumberOfDoors, \r\n   ");
            viewString.Append("         T.HorsePower_CC AS [VehicleOtherDetail.HorsePower_CC], \r\n            T.");
            viewString.Append("NumberOfCylinders AS VehicleOtherDetail_NumberOfCylinders, \r\n            T.IsAll");
            viewString.Append("oyRim AS VehicleOtherDetail_isAlloyRim, \r\n            T.ChasisNumber AS VehicleO");
            viewString.Append("therDetail_ChasisNumber, \r\n            T.EngineNumber AS VehicleOtherDetail_Engi");
            viewString.Append("neNumber, \r\n            T.KeyCode AS VehicleOtherDetail_KeyCode, \r\n            T");
            viewString.Append(".RadioCode AS VehicleOtherDetail_RadioCode, \r\n            T.Accessories AS Vehic");
            viewString.Append("leOtherDetail_Accessories, \r\n            T.TopSpeed AS VehicleOtherDetail_TopSpe");
            viewString.Append("ed, \r\n            T.InteriorDescription AS VehicleOtherDetail_InteriorDescriptio");
            viewString.Append("n, \r\n            T.FrontWheelSize AS VehicleOtherDetail_FrontWheelSize, \r\n      ");
            viewString.Append("      T.BackWheelSize AS VehicleOtherDetail_BackWheelSize, \r\n            T.RecCr");
            viewString.Append("eatedDt AS VehicleOtherDetail_RecCreatedDt, \r\n            T.RecCreatedBy AS Vehi");
            viewString.Append("cleOtherDetail_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS VehicleOtherDet");
            viewString.Append("ail_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS VehicleOtherDetail_Rec");
            viewString.Append("LastUpdatedBy, \r\n            T.RowVersion AS VehicleOtherDetail_RowVersion, \r\n  ");
            viewString.Append("          T.IsActive AS VehicleOtherDetail_IsActive, \r\n            T.IsDeleted A");
            viewString.Append("S VehicleOtherDetail_IsDeleted, \r\n            T.IsReadOnly AS VehicleOtherDetail");
            viewString.Append("_IsReadOnly, \r\n            T.IsPrivate AS VehicleOtherDetail_IsPrivate, \r\n      ");
            viewString.Append("      T.UserDomainKey AS VehicleOtherDetail_UserDomainKey, \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM BaseDbContext.VehicleOtherDetails AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleOtherDetail", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehiclePurchaseInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView71()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehiclePurchaseInfo", "\r\n    SELECT VALUE -- Constructing VehiclePurchaseInfo\r\n        [CaresModel.Store" +
                    ".VehiclePurchaseInfo](T1.VehiclePurchaseInfo_VehicleID, T1.VehiclePurchaseInfo_P" +
                    "urchaseDate, T1.VehiclePurchaseInfo_PurchasedFrom, T1.VehiclePurchaseInfo_Purcha" +
                    "seOrderNumber, T1.VehiclePurchaseInfo_PurchaseCost, T1.VehiclePurchaseInfo_IsUse" +
                    "dVehicle, T1.VehiclePurchaseInfo_PurchaseDescription, T1.VehiclePurchaseInfo_BPM" +
                    "ainID, T1.VehiclePurchaseInfo_RecCreatedDt, T1.VehiclePurchaseInfo_RecCreatedBy," +
                    " T1.VehiclePurchaseInfo_RecLastUpdatedBy, T1.VehiclePurchaseInfo_RecLastUpdatedD" +
                    "t, T1.VehiclePurchaseInfo_RowVersion, T1.VehiclePurchaseInfo_UserDomainKey)\r\n   " +
                    " FROM (\r\n        SELECT \r\n            T.VehicleId AS VehiclePurchaseInfo_Vehicle" +
                    "ID, \r\n            T.PurchaseDate AS VehiclePurchaseInfo_PurchaseDate, \r\n        " +
                    "    T.PurchasedFrom AS VehiclePurchaseInfo_PurchasedFrom, \r\n            T.Purcha" +
                    "seOrderNumber AS VehiclePurchaseInfo_PurchaseOrderNumber, \r\n            T.Purcha" +
                    "seCost AS VehiclePurchaseInfo_PurchaseCost, \r\n            T.IsUsedVehicle AS Veh" +
                    "iclePurchaseInfo_IsUsedVehicle, \r\n            T.PurchaseDescription AS VehiclePu" +
                    "rchaseInfo_PurchaseDescription, \r\n            T.BusinessPartnerId AS VehiclePurc" +
                    "haseInfo_BPMainID, \r\n            T.RecCreatedDt AS VehiclePurchaseInfo_RecCreate" +
                    "dDt, \r\n            T.RecCreatedBy AS VehiclePurchaseInfo_RecCreatedBy, \r\n       " +
                    "     T.RecLastUpdatedBy AS VehiclePurchaseInfo_RecLastUpdatedBy, \r\n            T" +
                    ".RecLastUpdatedDt AS VehiclePurchaseInfo_RecLastUpdatedDt, \r\n            T.RowVe" +
                    "rsion AS VehiclePurchaseInfo_RowVersion, \r\n            T.UserDomainKey AS Vehicl" +
                    "ePurchaseInfo_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbCo" +
                    "ntext.VehiclePurchaseInfoes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPRatingType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView72()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPRatingType", @"
    SELECT VALUE -- Constructing BPRatingType
        [CaresModel.Store.BPRatingType](T1.BPRatingType_BPRatingTypeID, T1.BPRatingType_BPRatingTypeCode, T1.BPRatingType_BPRatingTypeName, T1.BPRatingType_BPRatingTypeDescription, T1.BPRatingType_RowVersion, T1.BPRatingType_IsActive, T1.BPRatingType_IsDeleted, T1.BPRatingType_IsPrivate, T1.BPRatingType_IsReadOnly, T1.BPRatingType_RecCreatedDt, T1.BPRatingType_RecCreatedBy, T1.BPRatingType_RecLastUpdatedDt, T1.BPRatingType_RecLastUpdatedBy, T1.BPRatingType_UserDomainKey)
    FROM (
        SELECT 
            T.BpRatingTypeId AS BPRatingType_BPRatingTypeID, 
            T.BpRatingTypeCode AS BPRatingType_BPRatingTypeCode, 
            T.BpRatingTypeName AS BPRatingType_BPRatingTypeName, 
            T.BpRatingTypeDescription AS BPRatingType_BPRatingTypeDescription, 
            T.RowVersion AS BPRatingType_RowVersion, 
            T.IsActive AS BPRatingType_IsActive, 
            T.IsDeleted AS BPRatingType_IsDeleted, 
            T.IsPrivate AS BPRatingType_IsPrivate, 
            T.IsReadOnly AS BPRatingType_IsReadOnly, 
            T.RecCreatedDt AS BPRatingType_RecCreatedDt, 
            T.RecCreatedBy AS BPRatingType_RecCreatedBy, 
            T.RecLastUpdatedDt AS BPRatingType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS BPRatingType_RecLastUpdatedBy, 
            T.UserDomainKey AS BPRatingType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.BpRatingTypes1 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.BPRelationshipType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView73()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.BPRelationshipType", "\r\n    SELECT VALUE -- Constructing BPRelationshipType\r\n        [CaresModel.Store." +
                    "BPRelationshipType](T1.BPRelationshipType_BPRelationshipTypeID, T1.BPRelationshi" +
                    "pType_BPRelationshipTypeCode, T1.BPRelationshipType_BPRelationshipTypeName, T1.B" +
                    "PRelationshipType_BPRelationshipTypeDescription, T1.BPRelationshipType_RowVersio" +
                    "n, T1.BPRelationshipType_IsActive, T1.BPRelationshipType_IsDeleted, T1.BPRelatio" +
                    "nshipType_IsPrivate, T1.BPRelationshipType_IsReadOnly, T1.BPRelationshipType_Rec" +
                    "CreatedDt, T1.BPRelationshipType_RecCreatedBy, T1.BPRelationshipType_RecLastUpda" +
                    "tedDt, T1.BPRelationshipType_RecLastUpdatedBy, T1.BPRelationshipType_UserDomainK" +
                    "ey)\r\n    FROM (\r\n        SELECT \r\n            T.BusinessPartnerRelationshipTypeI" +
                    "d AS BPRelationshipType_BPRelationshipTypeID, \r\n            T.BusinessPartnerRel" +
                    "ationshpTypeCode AS BPRelationshipType_BPRelationshipTypeCode, \r\n            T.B" +
                    "usinessPartnerRelationshipTypeName AS BPRelationshipType_BPRelationshipTypeName," +
                    " \r\n            T.BusinessPartnerRelationshipTypeDescription AS BPRelationshipTyp" +
                    "e_BPRelationshipTypeDescription, \r\n            T.RowVersion AS BPRelationshipTyp" +
                    "e_RowVersion, \r\n            T.IsActive AS BPRelationshipType_IsActive, \r\n       " +
                    "     T.IsDeleted AS BPRelationshipType_IsDeleted, \r\n            T.IsPrivate AS B" +
                    "PRelationshipType_IsPrivate, \r\n            T.IsReadOnly AS BPRelationshipType_Is" +
                    "ReadOnly, \r\n            T.RecCreatedDt AS BPRelationshipType_RecCreatedDt, \r\n   " +
                    "         T.RecCreatedBy AS BPRelationshipType_RecCreatedBy, \r\n            T.RecL" +
                    "astUpdatedDt AS BPRelationshipType_RecLastUpdatedDt, \r\n            T.RecLastUpda" +
                    "tedBy AS BPRelationshipType_RecLastUpdatedBy, \r\n            T.UserDomainKey AS B" +
                    "PRelationshipType_UserDomainKey, \r\n            True AS _from0\r\n        FROM Base" +
                    "DbContext.BusinessPartnerRelationshipTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.VehicleDepreciation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView74()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.VehicleDepreciation", "\r\n    SELECT VALUE -- Constructing VehicleDepreciation\r\n        [CaresModel.Store" +
                    ".VehicleDepreciation](T1.VehicleDepreciation_VehicleID, T1.VehicleDepreciation_U" +
                    "sefulPeriodStartDate, T1.VehicleDepreciation_FirstMonthDepAmount, T1.VehicleDepr" +
                    "eciation_MonthlyDepAmount, T1.VehicleDepreciation_LastMonthDepAmount, T1.Vehicle" +
                    "Depreciation_ResidualValue, T1.VehicleDepreciation_UsefulPeriodEndDate, T1.Vehic" +
                    "leDepreciation_RowVersion, T1.VehicleDepreciation_RecCreatedDt, T1.VehicleDeprec" +
                    "iation_RecCreatedBy, T1.VehicleDepreciation_RecLastUpdatedBy, T1.VehicleDeprecia" +
                    "tion_RecLastUpdatedDt, T1.VehicleDepreciation_UserDomainKey)\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.VehicleId AS VehicleDepreciation_VehicleID, \r\n         " +
                    "   T.UsefulPeriodStartDate AS VehicleDepreciation_UsefulPeriodStartDate, \r\n     " +
                    "       T.FirstMonthDepAmount AS VehicleDepreciation_FirstMonthDepAmount, \r\n     " +
                    "       T.MonthlyDepAmount AS VehicleDepreciation_MonthlyDepAmount, \r\n           " +
                    " T.LastMonthDepAmount AS VehicleDepreciation_LastMonthDepAmount, \r\n            T" +
                    ".ResidualValue AS VehicleDepreciation_ResidualValue, \r\n            T.UsefulPerio" +
                    "dEndDate AS VehicleDepreciation_UsefulPeriodEndDate, \r\n            T.RowVersion " +
                    "AS VehicleDepreciation_RowVersion, \r\n            T.RecCreatedDt AS VehicleDeprec" +
                    "iation_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleDepreciation_RecCrea" +
                    "tedBy, \r\n            T.RecLastUpdatedBy AS VehicleDepreciation_RecLastUpdatedBy," +
                    " \r\n            T.RecLastUpdatedDt AS VehicleDepreciation_RecLastUpdatedDt, \r\n   " +
                    "         T.UserDomainKey AS VehicleDepreciation_UserDomainKey, \r\n            Tru" +
                    "e AS _from0\r\n        FROM BaseDbContext.VehicleDepreciations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Address
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView75()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Address", "\r\n    SELECT VALUE -- Constructing Address\r\n        [CaresModel.Store.Address](T1" +
                    ".Address_AddressID, T1.Address_ContactPerson, T1.Address_StreetAddress, T1.Addre" +
                    "ss_EmailAddress, T1.Address_WebPage, T1.Address_ZipCode, T1.Address_POBox, T1.Ad" +
                    "dress_CountryID, T1.Address_RegionID, T1.Address_SubRegionID, T1.Address_CityID," +
                    " T1.Address_AreaID, T1.Address_AddressTypeID, T1.Address_BPMainID, T1.Address_Em" +
                    "ployeeID, T1.Address_RowVersion, T1.Address_IsActive, T1.Address_IsDeleted, T1.A" +
                    "ddress_IsPrivate, T1.Address_IsReadOnly, T1.Address_RecCreatedDt, T1.Address_Rec" +
                    "CreatedBy, T1.Address_RecLastUpdatedDt, T1.Address_RecLastUpdatedBy, T1.Address_" +
                    "UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.AddressId AS Address_" +
                    "AddressID, \r\n            T.ContactPerson AS Address_ContactPerson, \r\n           " +
                    " T.StreetAddress AS Address_StreetAddress, \r\n            T.EmailAddress AS Addre" +
                    "ss_EmailAddress, \r\n            T.WebPage AS Address_WebPage, \r\n            T.Zip" +
                    "Code AS Address_ZipCode, \r\n            T.POBox AS Address_POBox, \r\n            T" +
                    ".CountryId AS Address_CountryID, \r\n            T.RegionId AS Address_RegionID, \r" +
                    "\n            T.SubRegionId AS Address_SubRegionID, \r\n            T.CityId AS Add" +
                    "ress_CityID, \r\n            T.AreaId AS Address_AreaID, \r\n            T.AddressTy" +
                    "peId AS Address_AddressTypeID, \r\n            T.BusinessPartnerId AS Address_BPMa" +
                    "inID, \r\n            T.EmployeeId AS Address_EmployeeID, \r\n            T.RowVersi" +
                    "on AS Address_RowVersion, \r\n            T.IsActive AS Address_IsActive, \r\n      " +
                    "      T.IsDeleted AS Address_IsDeleted, \r\n            T.IsPrivate AS Address_IsP" +
                    "rivate, \r\n            T.IsReadOnly AS Address_IsReadOnly, \r\n            T.RecCre" +
                    "atedDt AS Address_RecCreatedDt, \r\n            T.RecCreatedBy AS Address_RecCreat" +
                    "edBy, \r\n            T.RecLastUpdatedDt AS Address_RecLastUpdatedDt, \r\n          " +
                    "  T.RecLastUpdatedBy AS Address_RecLastUpdatedBy, \r\n            T.UserDomainKey " +
                    "AS Address_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbConte" +
                    "xt.Addresses AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.OrgGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView76()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.OrgGroups", @"
    SELECT VALUE -- Constructing OrgGroups
        [DomainModels.OrgGroup](T1.OrgGroup_OrgGroupId, T1.OrgGroup_OrgGroupCode, T1.OrgGroup_OrgGroupName, T1.OrgGroup_OrgGroupDescription, T1.OrgGroup_RowVersion, T1.OrgGroup_IsActive, T1.OrgGroup_IsDeleted, T1.OrgGroup_IsPrivate, T1.OrgGroup_IsReadOnly, T1.OrgGroup_RecCreatedDt, T1.OrgGroup_RecCreatedBy, T1.OrgGroup_RecLastUpdatedDt, T1.OrgGroup_RecLastUpdatedBy, T1.OrgGroup_UserDomainKey)
    FROM (
        SELECT 
            T.OrgGroupID AS OrgGroup_OrgGroupId, 
            T.OrgGroupCode AS OrgGroup_OrgGroupCode, 
            T.OrgGroupName AS OrgGroup_OrgGroupName, 
            T.OrgGroupDescription AS OrgGroup_OrgGroupDescription, 
            T.RowVersion AS OrgGroup_RowVersion, 
            T.IsActive AS OrgGroup_IsActive, 
            T.IsDeleted AS OrgGroup_IsDeleted, 
            T.IsPrivate AS OrgGroup_IsPrivate, 
            T.IsReadOnly AS OrgGroup_IsReadOnly, 
            T.RecCreatedDt AS OrgGroup_RecCreatedDt, 
            T.RecCreatedBy AS OrgGroup_RecCreatedBy, 
            T.RecLastUpdatedDt AS OrgGroup_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS OrgGroup_RecLastUpdatedBy, 
            T.UserDomainKey AS OrgGroup_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.OrgGroup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView77()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Companies", "\r\n    SELECT VALUE -- Constructing Companies\r\n        [DomainModels.Company](T1.C" +
                    "ompany_CompanyId, T1.Company_ParentCompanyId, T1.Company_OrgGroupId, T1.Company_" +
                    "CompanyCode, T1.Company_CompanyName, T1.Company_CompanyDescription, T1.Company_C" +
                    "ompanyLegalName, T1.Company_CrNumber, T1.Company_Uan, T1.Company_Ntn, T1.Company" +
                    "_PaidUpCapital, T1.Company_BusinessSegmentId, T1.Company_RowVersion, T1.Company_" +
                    "IsActive, T1.Company_IsDeleted, T1.Company_IsPrivate, T1.Company_IsReadOnly, T1." +
                    "Company_RecCreatedDt, T1.Company_RecCreatedBy, T1.Company_RecLastUpdatedDt, T1.C" +
                    "ompany_RecLastUpdatedBy, T1.Company_UserDomainKey)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.CompanyID AS Company_CompanyId, \r\n            T.ParentCompany AS " +
                    "Company_ParentCompanyId, \r\n            T.OrgGroupID AS Company_OrgGroupId, \r\n   " +
                    "         T.CompanyCode AS Company_CompanyCode, \r\n            T.CompanyName AS Co" +
                    "mpany_CompanyName, \r\n            T.CompanyDescription AS Company_CompanyDescript" +
                    "ion, \r\n            T.CompanyLegalName AS Company_CompanyLegalName, \r\n           " +
                    " T.CRNumber AS Company_CrNumber, \r\n            T.UAN AS Company_Uan, \r\n         " +
                    "   T.NTN AS Company_Ntn, \r\n            T.PaidUpCapital AS Company_PaidUpCapital," +
                    " \r\n            T.BusinessSegmentID AS Company_BusinessSegmentId, \r\n            T" +
                    ".RowVersion AS Company_RowVersion, \r\n            T.IsActive AS Company_IsActive," +
                    " \r\n            T.IsDeleted AS Company_IsDeleted, \r\n            T.IsPrivate AS Co" +
                    "mpany_IsPrivate, \r\n            T.IsReadOnly AS Company_IsReadOnly, \r\n           " +
                    " T.RecCreatedDt AS Company_RecCreatedDt, \r\n            T.RecCreatedBy AS Company" +
                    "_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Company_RecLastUpdatedDt, \r\n " +
                    "           T.RecLastUpdatedBy AS Company_RecLastUpdatedBy, \r\n            T.UserD" +
                    "omainKey AS Company_UserDomainKey, \r\n            True AS _from0\r\n        FROM Ca" +
                    "resModelStoreContainer.Company AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessSegments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView78()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessSegments", "\r\n    SELECT VALUE -- Constructing BusinessSegments\r\n        [DomainModels.Busine" +
                    "ssSegment](T1.BusinessSegment_BusinessSegmentId, T1.BusinessSegment_BusinessSegm" +
                    "entCode, T1.BusinessSegment_BusinessSegmentName, T1.BusinessSegment_BusinessSegm" +
                    "entDescription, T1.BusinessSegment_RowVersion, T1.BusinessSegment_IsActive, T1.B" +
                    "usinessSegment_IsDeleted, T1.BusinessSegment_IsPrivate, T1.BusinessSegment_IsRea" +
                    "dOnly, T1.BusinessSegment_RecCreatedDt, T1.BusinessSegment_RecCreatedBy, T1.Busi" +
                    "nessSegment_RecLastUpdatedDt, T1.BusinessSegment_RecLastUpdatedBy, T1.BusinessSe" +
                    "gment_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BusinessSegment" +
                    "ID AS BusinessSegment_BusinessSegmentId, \r\n            T.BusinessSegmentCode AS " +
                    "BusinessSegment_BusinessSegmentCode, \r\n            T.BusinessSegmentName AS Busi" +
                    "nessSegment_BusinessSegmentName, \r\n            T.BusinessSegmentDescription AS B" +
                    "usinessSegment_BusinessSegmentDescription, \r\n            T.RowVersion AS Busines" +
                    "sSegment_RowVersion, \r\n            T.IsActive AS BusinessSegment_IsActive, \r\n   " +
                    "         T.IsDeleted AS BusinessSegment_IsDeleted, \r\n            T.IsPrivate AS " +
                    "BusinessSegment_IsPrivate, \r\n            T.IsReadOnly AS BusinessSegment_IsReadO" +
                    "nly, \r\n            T.RecCreatedDt AS BusinessSegment_RecCreatedDt, \r\n           " +
                    " T.RecCreatedBy AS BusinessSegment_RecCreatedBy, \r\n            T.RecLastUpdatedD" +
                    "t AS BusinessSegment_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Busin" +
                    "essSegment_RecLastUpdatedBy, \r\n            T.UserDomainKey AS BusinessSegment_Us" +
                    "erDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContainer" +
                    ".BusinessSegment AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.AddressTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView79()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.AddressTypes", @"
    SELECT VALUE -- Constructing AddressTypes
        [DomainModels.AddressType](T1.AddressType_AddressTypeId, T1.AddressType_AddressTypeCode, T1.AddressType_AddressTypeName, T1.AddressType_AddressTypeDescription, T1.AddressType_IsActive, T1.AddressType_IsDeleted, T1.AddressType_IsPrivate, T1.AddressType_IsReadOnly, T1.AddressType_RecCreatedDt, T1.AddressType_RecCreatedBy, T1.AddressType_RecLastUpdatedDt, T1.AddressType_RecLastUpdatedBy, T1.AddressType_UserDomainKey)
    FROM (
        SELECT 
            T.AddressTypeID AS AddressType_AddressTypeId, 
            T.AddressTypeCode AS AddressType_AddressTypeCode, 
            T.AddressTypeName AS AddressType_AddressTypeName, 
            T.AddressTypeDescription AS AddressType_AddressTypeDescription, 
            T.IsActive AS AddressType_IsActive, 
            T.IsDeleted AS AddressType_IsDeleted, 
            T.IsPrivate AS AddressType_IsPrivate, 
            T.IsReadOnly AS AddressType_IsReadOnly, 
            T.RecCreatedDt AS AddressType_RecCreatedDt, 
            T.RecCreatedBy AS AddressType_RecCreatedBy, 
            T.RecLastUpdatedDt AS AddressType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS AddressType_RecLastUpdatedBy, 
            T.UserDomainKey AS AddressType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.AddressType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Areas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView80()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Areas", @"
    SELECT VALUE -- Constructing Areas
        [DomainModels.Area](T1.Area_AreaId, T1.Area_AreaCode, T1.Area_AreaName, T1.Area_AreaDescription, T1.Area_CityId, T1.Area_RowVersion, T1.Area_IsActive, T1.Area_IsPrivate, T1.Area_IsReadOnly, T1.Area_IsDeleted, T1.Area_RecCreatedDt, T1.Area_RecCreatedBy, T1.Area_RecLastUpdatedDt, T1.Area_RecLastUpdatedBy, T1.Area_UserDomainKey)
    FROM (
        SELECT 
            T.AreaID AS Area_AreaId, 
            T.AreaCode AS Area_AreaCode, 
            T.AreaName AS Area_AreaName, 
            T.AreaDescription AS Area_AreaDescription, 
            T.CityID AS Area_CityId, 
            T.RowVersion AS Area_RowVersion, 
            T.IsActive AS Area_IsActive, 
            T.IsPrivate AS Area_IsPrivate, 
            T.IsReadOnly AS Area_IsReadOnly, 
            T.IsDeleted AS Area_IsDeleted, 
            T.RecCreatedDt AS Area_RecCreatedDt, 
            T.RecCreatedBy AS Area_RecCreatedBy, 
            T.RecLastUpdatedDt AS Area_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Area_RecLastUpdatedBy, 
            T.UserDomainKey AS Area_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.Area AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerCompanies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView81()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerCompanies", "\r\n    SELECT VALUE -- Constructing BusinessPartnerCompanies\r\n        [DomainModel" +
                    "s.BusinessPartnerCompany](T1.BusinessPartnerCompany_BusinessPartnerId, T1.Busine" +
                    "ssPartnerCompany_BusinessPartnerCompanyCode, T1.BusinessPartnerCompany_BusinessP" +
                    "artnerCompanyName, T1.BusinessPartnerCompany_EstablishedSince, T1.BusinessPartne" +
                    "rCompany_SwiftCode, T1.BusinessPartnerCompany_AccountNumber, T1.BusinessPartnerC" +
                    "ompany_BusinessSegmentId, T1.BusinessPartnerCompany_RowVersion, T1.BusinessPartn" +
                    "erCompany_RecCreatedBy, T1.BusinessPartnerCompany_RecCreatedDt, T1.BusinessPartn" +
                    "erCompany_RecLastUpdatedBy, T1.BusinessPartnerCompany_RecLastUpdatedDt, T1.Busin" +
                    "essPartnerCompany_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BPM" +
                    "ainID AS BusinessPartnerCompany_BusinessPartnerId, \r\n            T.BPCompanyCode" +
                    " AS BusinessPartnerCompany_BusinessPartnerCompanyCode, \r\n            T.BPCompany" +
                    "Name AS BusinessPartnerCompany_BusinessPartnerCompanyName, \r\n            T.Estab" +
                    "lishedSince AS BusinessPartnerCompany_EstablishedSince, \r\n            T.SwiftCod" +
                    "e AS BusinessPartnerCompany_SwiftCode, \r\n            T.AccountNumber AS Business" +
                    "PartnerCompany_AccountNumber, \r\n            T.BusinessSegmentID AS BusinessPartn" +
                    "erCompany_BusinessSegmentId, \r\n            T.RowVersion AS BusinessPartnerCompan" +
                    "y_RowVersion, \r\n            T.RecCreatedBy AS BusinessPartnerCompany_RecCreatedB" +
                    "y, \r\n            T.RecCreatedDt AS BusinessPartnerCompany_RecCreatedDt, \r\n      " +
                    "      T.RecLastUpdatedBy AS BusinessPartnerCompany_RecLastUpdatedBy, \r\n         " +
                    "   T.RecLastUpdatedDt AS BusinessPartnerCompany_RecLastUpdatedDt, \r\n            " +
                    "T.UserDomainKey AS BusinessPartnerCompany_UserDomainKey, \r\n            True AS _" +
                    "from0\r\n        FROM CaresModelStoreContainer.BPCompany AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerIndividuals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView82()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3907);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BusinessPartnerIndividuals\r\n        [DomainMo");
            viewString.Append("dels.BusinessPartnerIndividual](T1.BusinessPartnerIndividual_BusinessPartnerId, ");
            viewString.Append("T1.BusinessPartnerIndividual_FirstName, T1.BusinessPartnerIndividual_MiddleName,");
            viewString.Append(" T1.BusinessPartnerIndividual_LastName, T1.BusinessPartnerIndividual_Initials, T");
            viewString.Append("1.BusinessPartnerIndividual_LiscenseNumber, T1.BusinessPartnerIndividual_Liscens");
            viewString.Append("eExpiryDate, T1.BusinessPartnerIndividual_GenderStatus, T1.BusinessPartnerIndivi");
            viewString.Append("dual_PassportNumber, T1.BusinessPartnerIndividual_NicNumber, T1.BusinessPartnerI");
            viewString.Append("ndividual_MaritalStatusCode, T1.BusinessPartnerIndividual_TaxRegisterationCode, ");
            viewString.Append("T1.BusinessPartnerIndividual_TaxNumber, T1.BusinessPartnerIndividual_DateOfBirth");
            viewString.Append(", T1.BusinessPartnerIndividual_OccupationTypeId, T1.BusinessPartnerIndividual_Is");
            viewString.Append("CompanyExternal, T1.BusinessPartnerIndividual_CompanyName, T1.BusinessPartnerInd");
            viewString.Append("ividual_CompanyAddress, T1.BusinessPartnerIndividual_CompanyPhone, T1.BusinessPa");
            viewString.Append("rtnerIndividual_BusinessPartnerCompanyId, T1.BusinessPartnerIndividual_RowVersio");
            viewString.Append("n, T1.BusinessPartnerIndividual_RecCreatedBy, T1.BusinessPartnerIndividual_RecCr");
            viewString.Append("eatedDt, T1.BusinessPartnerIndividual_RecLastUpdatedBy, T1.BusinessPartnerIndivi");
            viewString.Append("dual_RecLastUpdatedDt, T1.BusinessPartnerIndividual_NicExpiryDate, T1.BusinessPa");
            viewString.Append("rtnerIndividual_PassportExpiryDate, T1.BusinessPartnerIndividual_PassportCountry");
            viewString.Append("Id, T1.BusinessPartnerIndividual_IqamaNo, T1.BusinessPartnerIndividual_IqamaExpi");
            viewString.Append("ryDate, T1.BusinessPartnerIndividual_UserDomainKey)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.BPMainID AS BusinessPartnerIndividual_BusinessPartnerId, \r\n     ");
            viewString.Append("       T.FirstName AS BusinessPartnerIndividual_FirstName, \r\n            T.Middl");
            viewString.Append("eName AS BusinessPartnerIndividual_MiddleName, \r\n            T.LastName AS Busin");
            viewString.Append("essPartnerIndividual_LastName, \r\n            T.Initials AS BusinessPartnerIndivi");
            viewString.Append("dual_Initials, \r\n            T.LiscenseNumber AS BusinessPartnerIndividual_Lisce");
            viewString.Append("nseNumber, \r\n            T.LiscenseExpiryDate AS BusinessPartnerIndividual_Lisce");
            viewString.Append("nseExpiryDate, \r\n            T.GenderStatus AS BusinessPartnerIndividual_GenderS");
            viewString.Append("tatus, \r\n            T.PassportNumber AS BusinessPartnerIndividual_PassportNumbe");
            viewString.Append("r, \r\n            T.NIDNumber AS BusinessPartnerIndividual_NicNumber, \r\n         ");
            viewString.Append("   T.MaritalStatusCode AS BusinessPartnerIndividual_MaritalStatusCode, \r\n       ");
            viewString.Append("     T.TaxRegisterationCode AS BusinessPartnerIndividual_TaxRegisterationCode, \r");
            viewString.Append("\n            T.TaxNumber AS BusinessPartnerIndividual_TaxNumber, \r\n            T");
            viewString.Append(".DateOfBirth AS BusinessPartnerIndividual_DateOfBirth, \r\n            T.Occupatio");
            viewString.Append("nTypeID AS BusinessPartnerIndividual_OccupationTypeId, \r\n            T.IsCompany");
            viewString.Append("External AS BusinessPartnerIndividual_IsCompanyExternal, \r\n            T.Company");
            viewString.Append("Name AS BusinessPartnerIndividual_CompanyName, \r\n            T.CompanyAddress AS");
            viewString.Append(" BusinessPartnerIndividual_CompanyAddress, \r\n            T.CompanyPhone AS Busin");
            viewString.Append("essPartnerIndividual_CompanyPhone, \r\n            T.BPCompanyID AS BusinessPartne");
            viewString.Append("rIndividual_BusinessPartnerCompanyId, \r\n            T.RowVersion AS BusinessPart");
            viewString.Append("nerIndividual_RowVersion, \r\n            T.RecCreatedBy AS BusinessPartnerIndivid");
            viewString.Append("ual_RecCreatedBy, \r\n            T.RecCreatedDt AS BusinessPartnerIndividual_RecC");
            viewString.Append("reatedDt, \r\n            T.RecLastUpdatedBy AS BusinessPartnerIndividual_RecLastU");
            viewString.Append("pdatedBy, \r\n            T.RecLastUpdatedDt AS BusinessPartnerIndividual_RecLastU");
            viewString.Append("pdatedDt, \r\n            T.NICExpDt AS BusinessPartnerIndividual_NicExpiryDate, \r");
            viewString.Append("\n            T.PassportExpDt AS BusinessPartnerIndividual_PassportExpiryDate, \r\n");
            viewString.Append("            T.PassportCountryID AS BusinessPartnerIndividual_PassportCountryId, ");
            viewString.Append("\r\n            T.IqamaNo AS BusinessPartnerIndividual_IqamaNo, \r\n            T.Iq");
            viewString.Append("amaExpDt AS BusinessPartnerIndividual_IqamaExpiryDate, \r\n            T.UserDomai");
            viewString.Append("nKey AS BusinessPartnerIndividual_UserDomainKey, \r\n            True AS _from0\r\n ");
            viewString.Append("       FROM CaresModelStoreContainer.BPIndividual AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerIndividuals", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerInTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView83()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerInTypes", @"
    SELECT VALUE -- Constructing BusinessPartnerInTypes
        [DomainModels.BusinessPartnerInType](T1.BusinessPartnerInType_BusinessPartnerInTypeId, T1.BusinessPartnerInType_BusinessPartnerInTypeDescription, T1.BusinessPartnerInType_FromDate, T1.BusinessPartnerInType_ToDate, T1.BusinessPartnerInType_BusinessPartnerId, T1.BusinessPartnerInType_BusinessPartnerSubTypeId, T1.BusinessPartnerInType_RowVersion, T1.BusinessPartnerInType_BpRatingTypeId, T1.BusinessPartnerInType_UserDomainKey)
    FROM (
        SELECT 
            T.BPInTypeID AS BusinessPartnerInType_BusinessPartnerInTypeId, 
            T.BPInTypeDescription AS BusinessPartnerInType_BusinessPartnerInTypeDescription, 
            T.FromDate AS BusinessPartnerInType_FromDate, 
            T.ToDate AS BusinessPartnerInType_ToDate, 
            T.BPMainID AS BusinessPartnerInType_BusinessPartnerId, 
            T.BPSubTypeID AS BusinessPartnerInType_BusinessPartnerSubTypeId, 
            T.RowVersion AS BusinessPartnerInType_RowVersion, 
            T.BPRatingTypeID AS BusinessPartnerInType_BpRatingTypeId, 
            T.UserDomainKey AS BusinessPartnerInType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.BPInType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartners
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView84()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2772);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BusinessPartners\r\n        [DomainModels.Busin");
            viewString.Append("essPartner](T1.BusinessPartner_BusinessPartnerId, T1.BusinessPartner_CompanyId, ");
            viewString.Append("T1.BusinessPartner_BusinessPartnerCode, T1.BusinessPartner_BusinessPartnerName, ");
            viewString.Append("T1.BusinessPartner_BusinessPartnerDesciption, T1.BusinessPartner_IsSystemGuarant");
            viewString.Append("or, T1.BusinessPartner_SystemGuarantorId, T1.BusinessPartner_NonSystemGuarantor,");
            viewString.Append(" T1.BusinessPartner_BusinessLegalStatusId, T1.BusinessPartner_IsIndividual, T1.B");
            viewString.Append("usinessPartner_DealingEmployeeId, T1.BusinessPartner_RowVersion, T1.BusinessPart");
            viewString.Append("ner_IsActive, T1.BusinessPartner_IsDeleted, T1.BusinessPartner_IsPrivate, T1.Bus");
            viewString.Append("inessPartner_IsReadOnly, T1.BusinessPartner_RecCreatedDt, T1.BusinessPartner_Rec");
            viewString.Append("CreatedBy, T1.BusinessPartner_RecLastUpdatedDt, T1.BusinessPartner_RecLastUpdate");
            viewString.Append("dBy, T1.BusinessPartner_PaymentTermId, T1.BusinessPartner_BPRatingTypeId, T1.Bus");
            viewString.Append("inessPartner_BusinessPartnerEmailAddress, T1.BusinessPartner_BusinessPartnerIsVa");
            viewString.Append("lid, T1.BusinessPartner_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.BPMainID AS BusinessPartner_BusinessPartnerId, \r\n            T.CompanyID AS B");
            viewString.Append("usinessPartner_CompanyId, \r\n            T.BPMainCode AS BusinessPartner_Business");
            viewString.Append("PartnerCode, \r\n            T.BPMainName AS BusinessPartner_BusinessPartnerName, ");
            viewString.Append("\r\n            T.BPMainDescription AS BusinessPartner_BusinessPartnerDesciption, ");
            viewString.Append("\r\n            T.IsSystemGuarantor AS BusinessPartner_IsSystemGuarantor, \r\n      ");
            viewString.Append("      T.SystemGuarantorID AS BusinessPartner_SystemGuarantorId, \r\n            T.");
            viewString.Append("NonSystemGuarantor AS BusinessPartner_NonSystemGuarantor, \r\n            T.Busine");
            viewString.Append("ssLegalStatusID AS BusinessPartner_BusinessLegalStatusId, \r\n            T.IsIndi");
            viewString.Append("vidual AS BusinessPartner_IsIndividual, \r\n            T.DealingEmployeeID AS Bus");
            viewString.Append("inessPartner_DealingEmployeeId, \r\n            T.RowVersion AS BusinessPartner_Ro");
            viewString.Append("wVersion, \r\n            T.IsActive AS BusinessPartner_IsActive, \r\n            T.");
            viewString.Append("IsDeleted AS BusinessPartner_IsDeleted, \r\n            T.IsPrivate AS BusinessPar");
            viewString.Append("tner_IsPrivate, \r\n            T.IsReadOnly AS BusinessPartner_IsReadOnly, \r\n    ");
            viewString.Append("        T.RecCreatedDt AS BusinessPartner_RecCreatedDt, \r\n            T.RecCreat");
            viewString.Append("edBy AS BusinessPartner_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Busine");
            viewString.Append("ssPartner_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS BusinessPartner_");
            viewString.Append("RecLastUpdatedBy, \r\n            T.PaymentTermID AS BusinessPartner_PaymentTermId");
            viewString.Append(", \r\n            T.BPRatingTypeID AS BusinessPartner_BPRatingTypeId, \r\n          ");
            viewString.Append("  T.BPEmailAddress AS BusinessPartner_BusinessPartnerEmailAddress, \r\n           ");
            viewString.Append(" T.BPIsValid AS BusinessPartner_BusinessPartnerIsValid, \r\n            T.UserDoma");
            viewString.Append("inKey AS BusinessPartner_UserDomainKey, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM CaresModelStoreContainer.BPMain AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartners", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerMainTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView85()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2054);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BusinessPartnerMainTypes\r\n        [DomainMode");
            viewString.Append("ls.BusinessPartnerMainType](T1.BusinessPartnerMainType_BusinessPartnerMainTypeId");
            viewString.Append(", T1.BusinessPartnerMainType_BusinessPartnerMainTypeCode, T1.BusinessPartnerMain");
            viewString.Append("Type_BusinessPartnerMainTypeKey, T1.BusinessPartnerMainType_BusinessPartnerMainT");
            viewString.Append("ypeName, T1.BusinessPartnerMainType_BusinessPartnerMainTypeDescription, T1.Busin");
            viewString.Append("essPartnerMainType_RowVersion, T1.BusinessPartnerMainType_IsActive, T1.BusinessP");
            viewString.Append("artnerMainType_IsDeleted, T1.BusinessPartnerMainType_IsReadOnly, T1.BusinessPart");
            viewString.Append("nerMainType_IsPrivate, T1.BusinessPartnerMainType_RecCreatedDt, T1.BusinessPartn");
            viewString.Append("erMainType_RecCreatedBy, T1.BusinessPartnerMainType_RecLastUpdatedDt, T1.Busines");
            viewString.Append("sPartnerMainType_RecLastUpdatedBy, T1.BusinessPartnerMainType_UserDomainKey)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.BPMainTypeID AS BusinessPartnerMainType");
            viewString.Append("_BusinessPartnerMainTypeId, \r\n            T.BPMainTypeCode AS BusinessPartnerMai");
            viewString.Append("nType_BusinessPartnerMainTypeCode, \r\n            T.BPMainTypeKey AS BusinessPart");
            viewString.Append("nerMainType_BusinessPartnerMainTypeKey, \r\n            T.BPMainTypeName AS Busine");
            viewString.Append("ssPartnerMainType_BusinessPartnerMainTypeName, \r\n            T.BPMainTypeDescrip");
            viewString.Append("tion AS BusinessPartnerMainType_BusinessPartnerMainTypeDescription, \r\n          ");
            viewString.Append("  T.RowVersion AS BusinessPartnerMainType_RowVersion, \r\n            T.IsActive A");
            viewString.Append("S BusinessPartnerMainType_IsActive, \r\n            T.IsDeleted AS BusinessPartner");
            viewString.Append("MainType_IsDeleted, \r\n            T.IsReadOnly AS BusinessPartnerMainType_IsRead");
            viewString.Append("Only, \r\n            T.IsPrivate AS BusinessPartnerMainType_IsPrivate, \r\n        ");
            viewString.Append("    T.RecCreatedDt AS BusinessPartnerMainType_RecCreatedDt, \r\n            T.RecC");
            viewString.Append("reatedBy AS BusinessPartnerMainType_RecCreatedBy, \r\n            T.RecLastUpdated");
            viewString.Append("Dt AS BusinessPartnerMainType_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy");
            viewString.Append(" AS BusinessPartnerMainType_RecLastUpdatedBy, \r\n            T.UserDomainKey AS B");
            viewString.Append("usinessPartnerMainType_UserDomainKey, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" CaresModelStoreContainer.BPMainType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerMainTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerMarketingChannels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView86()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerMarketingChannels", @"
    SELECT VALUE -- Constructing BusinessPartnerMarketingChannels
        [DomainModels.BusinessPartnerMarketingChannel](T1.BusinessPartnerMarketingChannel_BusinessPartnerMarketingChannelId, T1.BusinessPartnerMarketingChannel_MarketingChannelId, T1.BusinessPartnerMarketingChannel_BusinessPartnerId, T1.BusinessPartnerMarketingChannel_RowVersion, T1.BusinessPartnerMarketingChannel_RecCreatedBy, T1.BusinessPartnerMarketingChannel_RecCreatedDt, T1.BusinessPartnerMarketingChannel_RecLastUpdatedBy, T1.BusinessPartnerMarketingChannel_RecLastUpdatedDt, T1.BusinessPartnerMarketingChannel_UserDomainKey)
    FROM (
        SELECT 
            T.BPMarketingChannelID AS BusinessPartnerMarketingChannel_BusinessPartnerMarketingChannelId, 
            T.MarketingChannelID AS BusinessPartnerMarketingChannel_MarketingChannelId, 
            T.BPMainID AS BusinessPartnerMarketingChannel_BusinessPartnerId, 
            T.RowVersion AS BusinessPartnerMarketingChannel_RowVersion, 
            T.RecCreatedBy AS BusinessPartnerMarketingChannel_RecCreatedBy, 
            T.RecCreatedDt AS BusinessPartnerMarketingChannel_RecCreatedDt, 
            T.RecLastUpdatedBy AS BusinessPartnerMarketingChannel_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS BusinessPartnerMarketingChannel_RecLastUpdatedDt, 
            T.UserDomainKey AS BusinessPartnerMarketingChannel_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.BPMarketingChannel AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerRelationships
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView87()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerRelationships", "\r\n    SELECT VALUE -- Constructing BusinessPartnerRelationships\r\n        [DomainM" +
                    "odels.BusinessPartnerRelationship](T1.BusinessPartnerRelationship_BusinessPartne" +
                    "rRelationshipId, T1.BusinessPartnerRelationship_BusinessPartnerId, T1.BusinessPa" +
                    "rtnerRelationship_BusinessPartnerRelationshipTypeId, T1.BusinessPartnerRelations" +
                    "hip_SecondaryBusinessPartnerId, T1.BusinessPartnerRelationship_RowVersion, T1.Bu" +
                    "sinessPartnerRelationship_RecCreatedBy, T1.BusinessPartnerRelationship_RecCreate" +
                    "dDt, T1.BusinessPartnerRelationship_RecLastUpdatedBy, T1.BusinessPartnerRelation" +
                    "ship_RecLastUpdatedDt, T1.BusinessPartnerRelationship_UserDomainKey)\r\n    FROM (" +
                    "\r\n        SELECT \r\n            T.BPRelationshipID AS BusinessPartnerRelationship" +
                    "_BusinessPartnerRelationshipId, \r\n            T.BPMainID AS BusinessPartnerRelat" +
                    "ionship_BusinessPartnerId, \r\n            T.BPRelationshipTypeID AS BusinessPartn" +
                    "erRelationship_BusinessPartnerRelationshipTypeId, \r\n            T.SecondaryBPID " +
                    "AS BusinessPartnerRelationship_SecondaryBusinessPartnerId, \r\n            T.RowVe" +
                    "rsion AS BusinessPartnerRelationship_RowVersion, \r\n            T.RecCreatedBy AS" +
                    " BusinessPartnerRelationship_RecCreatedBy, \r\n            T.RecCreatedDt AS Busin" +
                    "essPartnerRelationship_RecCreatedDt, \r\n            T.RecLastUpdatedBy AS Busines" +
                    "sPartnerRelationship_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS Busin" +
                    "essPartnerRelationship_RecLastUpdatedDt, \r\n            T.UserDomainKey AS Busine" +
                    "ssPartnerRelationship_UserDomainKey, \r\n            True AS _from0\r\n        FROM " +
                    "CaresModelStoreContainer.BPRelationship AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerSubTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView88()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2141);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BusinessPartnerSubTypes\r\n        [DomainModel");
            viewString.Append("s.BusinessPartnerSubType](T1.BusinessPartnerSubType_BusinessPartnerSubTypeId, T1");
            viewString.Append(".BusinessPartnerSubType_BusinessPartnerSubTypeCode, T1.BusinessPartnerSubType_Bu");
            viewString.Append("sinessPartnerSubTypeKey, T1.BusinessPartnerSubType_BusinessPartnerSubTypeName, T");
            viewString.Append("1.BusinessPartnerSubType_BusinessPartnerSubTypeDescription, T1.BusinessPartnerSu");
            viewString.Append("bType_BusinessPartnerMainTypeId, T1.BusinessPartnerSubType_RowVersion, T1.Busine");
            viewString.Append("ssPartnerSubType_IsActive, T1.BusinessPartnerSubType_IsDeleted, T1.BusinessPartn");
            viewString.Append("erSubType_IsReadOnly, T1.BusinessPartnerSubType_IsPrivate, T1.BusinessPartnerSub");
            viewString.Append("Type_RecCreatedDt, T1.BusinessPartnerSubType_RecCreatedBy, T1.BusinessPartnerSub");
            viewString.Append("Type_RecLastUpdatedDt, T1.BusinessPartnerSubType_RecLastUpdatedBy, T1.BusinessPa");
            viewString.Append("rtnerSubType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BPSubTyp");
            viewString.Append("eID AS BusinessPartnerSubType_BusinessPartnerSubTypeId, \r\n            T.BPSubTyp");
            viewString.Append("eCode AS BusinessPartnerSubType_BusinessPartnerSubTypeCode, \r\n            T.BPSu");
            viewString.Append("bTypeKey AS BusinessPartnerSubType_BusinessPartnerSubTypeKey, \r\n            T.BP");
            viewString.Append("SubTypeName AS BusinessPartnerSubType_BusinessPartnerSubTypeName, \r\n            ");
            viewString.Append("T.BPSubTypeDescription AS BusinessPartnerSubType_BusinessPartnerSubTypeDescripti");
            viewString.Append("on, \r\n            T.BPMainTypeID AS BusinessPartnerSubType_BusinessPartnerMainTy");
            viewString.Append("peId, \r\n            T.RowVersion AS BusinessPartnerSubType_RowVersion, \r\n       ");
            viewString.Append("     T.IsActive AS BusinessPartnerSubType_IsActive, \r\n            T.IsDeleted AS");
            viewString.Append(" BusinessPartnerSubType_IsDeleted, \r\n            T.IsReadOnly AS BusinessPartner");
            viewString.Append("SubType_IsReadOnly, \r\n            T.IsPrivate AS BusinessPartnerSubType_IsPrivat");
            viewString.Append("e, \r\n            T.RecCreatedDt AS BusinessPartnerSubType_RecCreatedDt, \r\n      ");
            viewString.Append("      T.RecCreatedBy AS BusinessPartnerSubType_RecCreatedBy, \r\n            T.Rec");
            viewString.Append("LastUpdatedDt AS BusinessPartnerSubType_RecLastUpdatedDt, \r\n            T.RecLas");
            viewString.Append("tUpdatedBy AS BusinessPartnerSubType_RecLastUpdatedBy, \r\n            T.UserDomai");
            viewString.Append("nKey AS BusinessPartnerSubType_UserDomainKey, \r\n            True AS _from0\r\n    ");
            viewString.Append("    FROM CaresModelStoreContainer.BPSubType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerSubTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessLegalStatus1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView89()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessLegalStatus1", "\r\n    SELECT VALUE -- Constructing BusinessLegalStatus1\r\n        [DomainModels.Bu" +
                    "sinessLegalStatus](T1.BusinessLegalStatus_BusinessLegalStatusId, T1.BusinessLega" +
                    "lStatus_BusinessLegalStatusCode, T1.BusinessLegalStatus_BusinessLegalStatusName," +
                    " T1.BusinessLegalStatus_BusinessLegalStatusDescription, T1.BusinessLegalStatus_R" +
                    "owVersion, T1.BusinessLegalStatus_IsActive, T1.BusinessLegalStatus_IsDeleted, T1" +
                    ".BusinessLegalStatus_IsPrivate, T1.BusinessLegalStatus_IsReadOnly, T1.BusinessLe" +
                    "galStatus_RecCreatedDt, T1.BusinessLegalStatus_RecCreatedBy, T1.BusinessLegalSta" +
                    "tus_RecLastUpdatedDt, T1.BusinessLegalStatus_RecLastUpdatedBy, T1.BusinessLegalS" +
                    "tatus_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BusinessLegalSt" +
                    "atusID AS BusinessLegalStatus_BusinessLegalStatusId, \r\n            T.BusinessLeg" +
                    "alStatusCode AS BusinessLegalStatus_BusinessLegalStatusCode, \r\n            T.Bus" +
                    "inessLegalStatusName AS BusinessLegalStatus_BusinessLegalStatusName, \r\n         " +
                    "   T.BusinessLegalStatusDescription AS BusinessLegalStatus_BusinessLegalStatusDe" +
                    "scription, \r\n            T.RowVersion AS BusinessLegalStatus_RowVersion, \r\n     " +
                    "       T.IsActive AS BusinessLegalStatus_IsActive, \r\n            T.IsDeleted AS " +
                    "BusinessLegalStatus_IsDeleted, \r\n            T.IsPrivate AS BusinessLegalStatus_" +
                    "IsPrivate, \r\n            T.IsReadOnly AS BusinessLegalStatus_IsReadOnly, \r\n     " +
                    "       T.RecCreatedDt AS BusinessLegalStatus_RecCreatedDt, \r\n            T.RecCr" +
                    "eatedBy AS BusinessLegalStatus_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS" +
                    " BusinessLegalStatus_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Busin" +
                    "essLegalStatus_RecLastUpdatedBy, \r\n            T.UserDomainKey AS BusinessLegalS" +
                    "tatus_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreC" +
                    "ontainer.BusinessLegalStatus AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Cities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView90()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Cities", @"
    SELECT VALUE -- Constructing Cities
        [DomainModels.City](T1.City_CityId, T1.City_CityCode, T1.City_CityName, T1.City_CityDescription, T1.City_RegionId, T1.City_SubRegionId, T1.City_CountryId, T1.City_RowVersion, T1.City_IsActive, T1.City_IsPrivate, T1.City_IsReadOnly, T1.City_IsDeleted, T1.City_RecCreatedDt, T1.City_RecCreatedBy, T1.City_RecLastUpdatedDt, T1.City_RecLastUpdatedBy, T1.City_UserDomainKey)
    FROM (
        SELECT 
            T.CityID AS City_CityId, 
            T.CityCode AS City_CityCode, 
            T.CityName AS City_CityName, 
            T.CityDescription AS City_CityDescription, 
            T.RegionID AS City_RegionId, 
            T.SubRegionID AS City_SubRegionId, 
            T.CountryID AS City_CountryId, 
            T.RowVersion AS City_RowVersion, 
            T.IsActive AS City_IsActive, 
            T.IsPrivate AS City_IsPrivate, 
            T.IsReadOnly AS City_IsReadOnly, 
            T.IsDeleted AS City_IsDeleted, 
            T.RecCreatedDt AS City_RecCreatedDt, 
            T.RecCreatedBy AS City_RecCreatedBy, 
            T.RecLastUpdatedDt AS City_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS City_RecLastUpdatedBy, 
            T.UserDomainKey AS City_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.City AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Countries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView91()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Countries", @"
    SELECT VALUE -- Constructing Countries
        [DomainModels.Country](T1.Country_CountryId, T1.Country_CountryCode, T1.Country_CountryName, T1.Country_CountryDescription, T1.Country_IsActive, T1.Country_IsReadOnly, T1.Country_IsPrivate, T1.Country_IsDeleted, T1.Country_RecLastUpdatedDt, T1.Country_RecLastUpdatedBy, T1.Country_RecCreatedBy, T1.Country_RecCreatedDt, T1.Country_UserDomainKey)
    FROM (
        SELECT 
            T.CountryID AS Country_CountryId, 
            T.CountryCode AS Country_CountryCode, 
            T.CountryName AS Country_CountryName, 
            T.CountryDescription AS Country_CountryDescription, 
            T.IsActive AS Country_IsActive, 
            T.IsReadOnly AS Country_IsReadOnly, 
            T.IsPrivate AS Country_IsPrivate, 
            T.IsDeleted AS Country_IsDeleted, 
            T.RecLastUpdatedDt AS Country_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Country_RecLastUpdatedBy, 
            T.RecCreatedBy AS Country_RecCreatedBy, 
            T.RecCreatedDt AS Country_RecCreatedDt, 
            T.UserDomainKey AS Country_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.Country AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Departments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView92()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Departments", "\r\n    SELECT VALUE -- Constructing Departments\r\n        [DomainModels.Department]" +
                    "(T1.Department_DepartmentId, T1.Department_DepartmentCode, T1.Department_Departm" +
                    "entName, T1.Department_DepartmentDescription, T1.Department_DepartmentType, T1.D" +
                    "epartment_CompanyId, T1.Department_RowVersion, T1.Department_IsActive, T1.Depart" +
                    "ment_IsDeleted, T1.Department_IsPrivate, T1.Department_IsReadOnly, T1.Department" +
                    "_RecCreatedDt, T1.Department_RecCreatedBy, T1.Department_RecLastUpdatedDt, T1.De" +
                    "partment_RecLastUpdatedBy, T1.Department_UserDomainKey)\r\n    FROM (\r\n        SEL" +
                    "ECT \r\n            T.DepartmentID AS Department_DepartmentId, \r\n            T.Dep" +
                    "artmentCode AS Department_DepartmentCode, \r\n            T.DepartmentName AS Depa" +
                    "rtment_DepartmentName, \r\n            T.DepartmentDescription AS Department_Depar" +
                    "tmentDescription, \r\n            T.DepartmentType AS Department_DepartmentType, \r" +
                    "\n            T.CompanyID AS Department_CompanyId, \r\n            T.RowVersion AS " +
                    "Department_RowVersion, \r\n            T.IsActive AS Department_IsActive, \r\n      " +
                    "      T.IsDeleted AS Department_IsDeleted, \r\n            T.IsPrivate AS Departme" +
                    "nt_IsPrivate, \r\n            T.IsReadOnly AS Department_IsReadOnly, \r\n           " +
                    " T.RecCreatedDt AS Department_RecCreatedDt, \r\n            T.RecCreatedBy AS Depa" +
                    "rtment_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Department_RecLastUpdat" +
                    "edDt, \r\n            T.RecLastUpdatedBy AS Department_RecLastUpdatedBy, \r\n       " +
                    "     T.UserDomainKey AS Department_UserDomainKey, \r\n            True AS _from0\r\n" +
                    "        FROM CaresModelStoreContainer.Department AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DesignGrades
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView93()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DesignGrades", @"
    SELECT VALUE -- Constructing DesignGrades
        [DomainModels.DesignGrade](T1.DesignGrade_DesigGradeId, T1.DesignGrade_DesigGradeCode, T1.DesignGrade_DesigGradeName, T1.DesignGrade_DesigGradeDescription, T1.DesignGrade_RowVersion, T1.DesignGrade_IsActive, T1.DesignGrade_IsPrivate, T1.DesignGrade_IsDeleted, T1.DesignGrade_IsReadOnly, T1.DesignGrade_RecCreatedDt, T1.DesignGrade_RecCreatedBy, T1.DesignGrade_RecLastUpdatedDt, T1.DesignGrade_RecLastUpdatedBy, T1.DesignGrade_UserDomainKey)
    FROM (
        SELECT 
            T.DesigGradeID AS DesignGrade_DesigGradeId, 
            T.DesigGradeCode AS DesignGrade_DesigGradeCode, 
            T.DesigGradeName AS DesignGrade_DesigGradeName, 
            T.DesigGradeDescription AS DesignGrade_DesigGradeDescription, 
            T.RowVersion AS DesignGrade_RowVersion, 
            T.IsActive AS DesignGrade_IsActive, 
            T.IsPrivate AS DesignGrade_IsPrivate, 
            T.IsDeleted AS DesignGrade_IsDeleted, 
            T.IsReadOnly AS DesignGrade_IsReadOnly, 
            T.RecCreatedDt AS DesignGrade_RecCreatedDt, 
            T.RecCreatedBy AS DesignGrade_RecCreatedBy, 
            T.RecLastUpdatedDt AS DesignGrade_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS DesignGrade_RecLastUpdatedBy, 
            T.UserDomainKey AS DesignGrade_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.DesigGrade AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Designations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView94()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Designations", "\r\n    SELECT VALUE -- Constructing Designations\r\n        [DomainModels.Designatio" +
                    "n](T1.Designation_DesignationId, T1.Designation_DesignationCode, T1.Designation_" +
                    "DesignationName, T1.Designation_DesignationDescription, T1.Designation_Designati" +
                    "onKey, T1.Designation_RowVersion, T1.Designation_IsActive, T1.Designation_IsPriv" +
                    "ate, T1.Designation_IsDeleted, T1.Designation_IsReadOnly, T1.Designation_RecCrea" +
                    "tedDt, T1.Designation_RecCreatedBy, T1.Designation_RecLastUpdatedDt, T1.Designat" +
                    "ion_RecLastUpdatedBy, T1.Designation_UserDomainKey)\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.DesignationID AS Designation_DesignationId, \r\n            T.Desi" +
                    "gnationCode AS Designation_DesignationCode, \r\n            T.DesignationName AS D" +
                    "esignation_DesignationName, \r\n            T.DesignationDescription AS Designatio" +
                    "n_DesignationDescription, \r\n            T.DesignationKey AS Designation_Designat" +
                    "ionKey, \r\n            T.RowVersion AS Designation_RowVersion, \r\n            T.Is" +
                    "Active AS Designation_IsActive, \r\n            T.IsPrivate AS Designation_IsPriva" +
                    "te, \r\n            T.IsDeleted AS Designation_IsDeleted, \r\n            T.IsReadOn" +
                    "ly AS Designation_IsReadOnly, \r\n            T.RecCreatedDt AS Designation_RecCre" +
                    "atedDt, \r\n            T.RecCreatedBy AS Designation_RecCreatedBy, \r\n            " +
                    "T.RecLastUpdatedDt AS Designation_RecLastUpdatedDt, \r\n            T.RecLastUpdat" +
                    "edBy AS Designation_RecLastUpdatedBy, \r\n            T.UserDomainKey AS Designati" +
                    "on_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreCont" +
                    "ainer.Designation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmpAuthOperationsWorkplaces
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView95()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2072);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EmpAuthOperationsWorkplaces\r\n        [DomainM");
            viewString.Append("odels.EmpAuthOperationsWorkplace](T1.EmpAuthOperationsWorkplace_EmpAuthOperation");
            viewString.Append("sWorkplaceId, T1.EmpAuthOperationsWorkplace_EmployeeId, T1.EmpAuthOperationsWork");
            viewString.Append("place_OperationsWorkplaceId, T1.EmpAuthOperationsWorkplace_IsDefault, T1.EmpAuth");
            viewString.Append("OperationsWorkplace_RowVersion, T1.EmpAuthOperationsWorkplace_IsActive, T1.EmpAu");
            viewString.Append("thOperationsWorkplace_IsPrivate, T1.EmpAuthOperationsWorkplace_IsDeleted, T1.Emp");
            viewString.Append("AuthOperationsWorkplace_IsReadOnly, T1.EmpAuthOperationsWorkplace_RecCreatedDt, ");
            viewString.Append("T1.EmpAuthOperationsWorkplace_RecCreatedBy, T1.EmpAuthOperationsWorkplace_RecLas");
            viewString.Append("tUpdatedDt, T1.EmpAuthOperationsWorkplace_RecLastUpdatedBy, T1.EmpAuthOperations");
            viewString.Append("Workplace_IsOperationDefault, T1.EmpAuthOperationsWorkplace_UserDomainKey)\r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.EmpAuthOperationsWorkplaceID AS EmpAuthOp");
            viewString.Append("erationsWorkplace_EmpAuthOperationsWorkplaceId, \r\n            T.EmployeeID AS Em");
            viewString.Append("pAuthOperationsWorkplace_EmployeeId, \r\n            T.OperationsWorkplaceID AS Em");
            viewString.Append("pAuthOperationsWorkplace_OperationsWorkplaceId, \r\n            T.IsDefault AS Emp");
            viewString.Append("AuthOperationsWorkplace_IsDefault, \r\n            T.RowVersion AS EmpAuthOperatio");
            viewString.Append("nsWorkplace_RowVersion, \r\n            T.IsActive AS EmpAuthOperationsWorkplace_I");
            viewString.Append("sActive, \r\n            T.IsPrivate AS EmpAuthOperationsWorkplace_IsPrivate, \r\n  ");
            viewString.Append("          T.IsDeleted AS EmpAuthOperationsWorkplace_IsDeleted, \r\n            T.I");
            viewString.Append("sReadOnly AS EmpAuthOperationsWorkplace_IsReadOnly, \r\n            T.RecCreatedDt");
            viewString.Append(" AS EmpAuthOperationsWorkplace_RecCreatedDt, \r\n            T.RecCreatedBy AS Emp");
            viewString.Append("AuthOperationsWorkplace_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS EmpAut");
            viewString.Append("hOperationsWorkplace_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpAu");
            viewString.Append("thOperationsWorkplace_RecLastUpdatedBy, \r\n            T.IsOperationDefault AS Em");
            viewString.Append("pAuthOperationsWorkplace_IsOperationDefault, \r\n            T.UserDomainKey AS Em");
            viewString.Append("pAuthOperationsWorkplace_UserDomainKey, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM CaresModelStoreContainer.EmpAuthOperationsWorkplace AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmpAuthOperationsWorkplaces", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmpDocsInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView96()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2481);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EmpDocsInfoes\r\n        [DomainModels.EmpDocsI");
            viewString.Append("nfo](T1.EmpDocsInfo_EmployeeId, T1.EmpDocsInfo_NIC, T1.EmpDocsInfo_NICExpDt, T1.");
            viewString.Append("EmpDocsInfo_IqamaNo, T1.EmpDocsInfo_IqamaExpDt, T1.EmpDocsInfo_PassportNo, T1.Em");
            viewString.Append("pDocsInfo_PassportExpDt, T1.EmpDocsInfo_PassportCountryId, T1.EmpDocsInfo_VisaNo");
            viewString.Append(", T1.EmpDocsInfo_VisaExpDt, T1.EmpDocsInfo_VisaIssueCountryId, T1.EmpDocsInfo_Li");
            viewString.Append("censeNo, T1.EmpDocsInfo_LicenseExpDt, T1.EmpDocsInfo_LicenseTypeId, T1.EmpDocsIn");
            viewString.Append("fo_InsuranceNo, T1.EmpDocsInfo_InsuranceCompany, T1.EmpDocsInfo_InsuranceDt, T1.");
            viewString.Append("EmpDocsInfo_RowVersion, T1.EmpDocsInfo_IsActive, T1.EmpDocsInfo_IsPrivate, T1.Em");
            viewString.Append("pDocsInfo_IsDeleted, T1.EmpDocsInfo_IsReadOnly, T1.EmpDocsInfo_RecCreatedDt, T1.");
            viewString.Append("EmpDocsInfo_RecCreatedBy, T1.EmpDocsInfo_RecLastUpdatedDt, T1.EmpDocsInfo_RecLas");
            viewString.Append("tUpdatedBy, T1.EmpDocsInfo_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.EmployeeID AS EmpDocsInfo_EmployeeId, \r\n            T.NIC AS EmpDocsInfo_N");
            viewString.Append("IC, \r\n            T.NICExpDt AS EmpDocsInfo_NICExpDt, \r\n            T.IqamaNo AS");
            viewString.Append(" EmpDocsInfo_IqamaNo, \r\n            T.IqamaExpDt AS EmpDocsInfo_IqamaExpDt, \r\n  ");
            viewString.Append("          T.PassportNo AS EmpDocsInfo_PassportNo, \r\n            T.PassportExpDt ");
            viewString.Append("AS EmpDocsInfo_PassportExpDt, \r\n            T.PassportCountryID AS EmpDocsInfo_P");
            viewString.Append("assportCountryId, \r\n            T.VisaNo AS EmpDocsInfo_VisaNo, \r\n            T.");
            viewString.Append("VisaExpDt AS EmpDocsInfo_VisaExpDt, \r\n            T.VisaIssueCountryID AS EmpDoc");
            viewString.Append("sInfo_VisaIssueCountryId, \r\n            T.LicenseNo AS EmpDocsInfo_LicenseNo, \r\n");
            viewString.Append("            T.LicenseExpDt AS EmpDocsInfo_LicenseExpDt, \r\n            T.LicenseT");
            viewString.Append("ypeID AS EmpDocsInfo_LicenseTypeId, \r\n            T.InsuranceNo AS EmpDocsInfo_I");
            viewString.Append("nsuranceNo, \r\n            T.InsuranceCompany AS EmpDocsInfo_InsuranceCompany, \r\n");
            viewString.Append("            T.InsuranceDt AS EmpDocsInfo_InsuranceDt, \r\n            T.RowVersion");
            viewString.Append(" AS EmpDocsInfo_RowVersion, \r\n            T.IsActive AS EmpDocsInfo_IsActive, \r\n");
            viewString.Append("            T.IsPrivate AS EmpDocsInfo_IsPrivate, \r\n            T.IsDeleted AS E");
            viewString.Append("mpDocsInfo_IsDeleted, \r\n            T.IsReadOnly AS EmpDocsInfo_IsReadOnly, \r\n  ");
            viewString.Append("          T.RecCreatedDt AS EmpDocsInfo_RecCreatedDt, \r\n            T.RecCreated");
            viewString.Append("By AS EmpDocsInfo_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS EmpDocsInfo_");
            viewString.Append("RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpDocsInfo_RecLastUpdated");
            viewString.Append("By, \r\n            T.UserDomainKey AS EmpDocsInfo_UserDomainKey, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM CaresModelStoreContainer.EmpDocsInfo AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmpDocsInfoes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmpJobInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView97()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmpJobInfoes", "\r\n    SELECT VALUE -- Constructing EmpJobInfoes\r\n        [DomainModels.EmpJobInfo" +
                    "](T1.EmpJobInfo_EmployeeId, T1.EmpJobInfo_SupervisorId, T1.EmpJobInfo_Designatio" +
                    "nId, T1.EmpJobInfo_DesigGradeId, T1.EmpJobInfo_JobTypeId, T1.EmpJobInfo_Departme" +
                    "ntId, T1.EmpJobInfo_WorkPlaceId, T1.EmpJobInfo_JoiningDt, T1.EmpJobInfo_Salary, " +
                    "T1.EmpJobInfo_RowVersion, T1.EmpJobInfo_IsActive, T1.EmpJobInfo_IsPrivate, T1.Em" +
                    "pJobInfo_IsDeleted, T1.EmpJobInfo_IsReadOnly, T1.EmpJobInfo_RecCreatedDt, T1.Emp" +
                    "JobInfo_RecCreatedBy, T1.EmpJobInfo_RecLastUpdatedDt, T1.EmpJobInfo_RecLastUpdat" +
                    "edBy, T1.EmpJobInfo_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.E" +
                    "mployeeID AS EmpJobInfo_EmployeeId, \r\n            T.SupervisorID AS EmpJobInfo_S" +
                    "upervisorId, \r\n            T.DesignationID AS EmpJobInfo_DesignationId, \r\n      " +
                    "      T.DesigGradeID AS EmpJobInfo_DesigGradeId, \r\n            T.JobTypeID AS Em" +
                    "pJobInfo_JobTypeId, \r\n            T.DepartmentID AS EmpJobInfo_DepartmentId, \r\n " +
                    "           T.WorkplaceID AS EmpJobInfo_WorkPlaceId, \r\n            T.JoiningDt AS" +
                    " EmpJobInfo_JoiningDt, \r\n            T.Salary AS EmpJobInfo_Salary, \r\n          " +
                    "  T.RowVersion AS EmpJobInfo_RowVersion, \r\n            T.IsActive AS EmpJobInfo_" +
                    "IsActive, \r\n            T.IsPrivate AS EmpJobInfo_IsPrivate, \r\n            T.IsD" +
                    "eleted AS EmpJobInfo_IsDeleted, \r\n            T.IsReadOnly AS EmpJobInfo_IsReadO" +
                    "nly, \r\n            T.RecCreatedDt AS EmpJobInfo_RecCreatedDt, \r\n            T.Re" +
                    "cCreatedBy AS EmpJobInfo_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS EmpJo" +
                    "bInfo_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpJobInfo_RecLastUp" +
                    "datedBy, \r\n            T.UserDomainKey AS EmpJobInfo_UserDomainKey, \r\n          " +
                    "  True AS _from0\r\n        FROM CaresModelStoreContainer.EmpJobInfo AS T\r\n    ) A" +
                    "S T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmpJobProgs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView98()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmpJobProgs", "\r\n    SELECT VALUE -- Constructing EmpJobProgs\r\n        [DomainModels.EmpJobProg]" +
                    "(T1.EmpJobProg_EmpJobProgId, T1.EmpJobProg_EmployeeId, T1.EmpJobProg_Designation" +
                    "Id, T1.EmpJobProg_WorkplaceId, T1.EmpJobProg_DesigStDt, T1.EmpJobProg_DesigEndDt" +
                    ", T1.EmpJobProg_RowVersion, T1.EmpJobProg_IsActive, T1.EmpJobProg_IsPrivate, T1." +
                    "EmpJobProg_IsDeleted, T1.EmpJobProg_IsReadOnly, T1.EmpJobProg_RecCreatedDt, T1.E" +
                    "mpJobProg_RecCreatedBy, T1.EmpJobProg_RecLastUpdatedDt, T1.EmpJobProg_RecLastUpd" +
                    "atedBy, T1.EmpJobProg_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T" +
                    ".EmpJobProgID AS EmpJobProg_EmpJobProgId, \r\n            T.EmployeeID AS EmpJobPr" +
                    "og_EmployeeId, \r\n            T.DesignationID AS EmpJobProg_DesignationId, \r\n    " +
                    "        T.WorkplaceID AS EmpJobProg_WorkplaceId, \r\n            T.DesigStDt AS Em" +
                    "pJobProg_DesigStDt, \r\n            T.DesigEndDt AS EmpJobProg_DesigEndDt, \r\n     " +
                    "       T.RowVersion AS EmpJobProg_RowVersion, \r\n            T.IsActive AS EmpJob" +
                    "Prog_IsActive, \r\n            T.IsPrivate AS EmpJobProg_IsPrivate, \r\n            " +
                    "T.IsDeleted AS EmpJobProg_IsDeleted, \r\n            T.IsReadOnly AS EmpJobProg_Is" +
                    "ReadOnly, \r\n            T.RecCreatedDt AS EmpJobProg_RecCreatedDt, \r\n           " +
                    " T.RecCreatedBy AS EmpJobProg_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS " +
                    "EmpJobProg_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS EmpJobProg_RecL" +
                    "astUpdatedBy, \r\n            T.UserDomainKey AS EmpJobProg_UserDomainKey, \r\n     " +
                    "       True AS _from0\r\n        FROM CaresModelStoreContainer.EmpJobProg AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Employees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView99()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2082);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Employees\r\n        [DomainModels.Employee](T1");
            viewString.Append(".Employee_EmployeeId, T1.Employee_EmpCode, T1.Employee_EmpFName, T1.Employee_Com");
            viewString.Append("panyId, T1.Employee_EmpStatusId, T1.Employee_EmpMName, T1.Employee_EmpLName, T1.");
            viewString.Append("Employee_DOB, T1.Employee_Gender, T1.Employee_NationalityId, T1.Employee_Notes, ");
            viewString.Append("T1.Employee_Notes1, T1.Employee_Notes2, T1.Employee_Notes3, T1.Employee_Notes4, ");
            viewString.Append("T1.Employee_Notes5, T1.Employee_RowVersion, T1.Employee_IsActive, T1.Employee_Is");
            viewString.Append("Deleted, T1.Employee_IsPrivate, T1.Employee_IsReadOnly, T1.Employee_RecCreatedDt");
            viewString.Append(", T1.Employee_RecCreatedBy, T1.Employee_RecLastUpdatedDt, T1.Employee_RecLastUpd");
            viewString.Append("atedBy, T1.Employee_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.E");
            viewString.Append("mployeeID AS Employee_EmployeeId, \r\n            T.EmpCode AS Employee_EmpCode, \r");
            viewString.Append("\n            T.EmpFName AS Employee_EmpFName, \r\n            T.CompanyID AS Emplo");
            viewString.Append("yee_CompanyId, \r\n            T.EmpStatusID AS Employee_EmpStatusId, \r\n          ");
            viewString.Append("  T.EmpMName AS Employee_EmpMName, \r\n            T.EmpLName AS Employee_EmpLName");
            viewString.Append(", \r\n            T.DOB AS Employee_DOB, \r\n            T.Gender AS Employee_Gender");
            viewString.Append(", \r\n            T.Nationality AS Employee_NationalityId, \r\n            T.Notes A");
            viewString.Append("S Employee_Notes, \r\n            T.AddNotes1 AS Employee_Notes1, \r\n            T.");
            viewString.Append("AddNotes2 AS Employee_Notes2, \r\n            T.AddNotes3 AS Employee_Notes3, \r\n  ");
            viewString.Append("          T.AddNotes4 AS Employee_Notes4, \r\n            T.AddNotes5 AS Employee_");
            viewString.Append("Notes5, \r\n            T.RowVersion AS Employee_RowVersion, \r\n            T.IsAct");
            viewString.Append("ive AS Employee_IsActive, \r\n            T.IsDeleted AS Employee_IsDeleted, \r\n   ");
            viewString.Append("         T.IsPrivate AS Employee_IsPrivate, \r\n            T.IsReadOnly AS Employ");
            viewString.Append("ee_IsReadOnly, \r\n            T.RecCreatedDt AS Employee_RecCreatedDt, \r\n        ");
            viewString.Append("    T.RecCreatedBy AS Employee_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS");
            viewString.Append(" Employee_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Employee_RecLast");
            viewString.Append("UpdatedBy, \r\n            T.UserDomainKey AS Employee_UserDomainKey, \r\n          ");
            viewString.Append("  True AS _from0\r\n        FROM CaresModelStoreContainer.Employee AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Employees", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmpStatus1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView100()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmpStatus1", @"
    SELECT VALUE -- Constructing EmpStatus1
        [DomainModels.EmpStatus](T1.EmpStatus_EmpStatusId, T1.EmpStatus_EmpStatusCode, T1.EmpStatus_EmpStatusName, T1.EmpStatus_EmpStatusDescription, T1.EmpStatus_EmpStatusFlag, T1.EmpStatus_RowVersion, T1.EmpStatus_IsActive, T1.EmpStatus_IsPrivate, T1.EmpStatus_IsDeleted, T1.EmpStatus_IsReadOnly, T1.EmpStatus_RecCreatedDt, T1.EmpStatus_RecCreatedBy, T1.EmpStatus_RecLastUpdatedDt, T1.EmpStatus_RecLastUpdatedBy, T1.EmpStatus_UserDomainKey)
    FROM (
        SELECT 
            T.EmpStatusID AS EmpStatus_EmpStatusId, 
            T.EmpStatusCode AS EmpStatus_EmpStatusCode, 
            T.EmpStatusName AS EmpStatus_EmpStatusName, 
            T.EmpStatusDescription AS EmpStatus_EmpStatusDescription, 
            T.EmpStatusFlg AS EmpStatus_EmpStatusFlag, 
            T.RowVersion AS EmpStatus_RowVersion, 
            T.IsActive AS EmpStatus_IsActive, 
            T.IsPrivate AS EmpStatus_IsPrivate, 
            T.IsDeleted AS EmpStatus_IsDeleted, 
            T.IsReadOnly AS EmpStatus_IsReadOnly, 
            T.RecCreatedDt AS EmpStatus_RecCreatedDt, 
            T.RecCreatedBy AS EmpStatus_RecCreatedBy, 
            T.RecLastUpdatedDt AS EmpStatus_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS EmpStatus_RecLastUpdatedBy, 
            T.UserDomainKey AS EmpStatus_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.EmpStatus AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.FleetPools
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView101()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.FleetPools", "\r\n    SELECT VALUE -- Constructing FleetPools\r\n        [DomainModels.FleetPool](T" +
                    "1.FleetPool_FleetPoolId, T1.FleetPool_ApproximateVehiclesAsgnd, T1.FleetPool_Fle" +
                    "etPoolCode, T1.FleetPool_FleetPoolName, T1.FleetPool_FleetPoolDescription, T1.Fl" +
                    "eetPool_IsActive, T1.FleetPool_IsPrivate, T1.FleetPool_IsReadOnly, T1.FleetPool_" +
                    "IsDeleted, T1.FleetPool_OperationId, T1.FleetPool_RegionId, T1.FleetPool_RecCrea" +
                    "tedDt, T1.FleetPool_RecCreatedBy, T1.FleetPool_RecLastUpdatedDt, T1.FleetPool_Re" +
                    "cLastUpdatedBy, T1.FleetPool_RowVersion, T1.FleetPool_UserDomainKey)\r\n    FROM (" +
                    "\r\n        SELECT \r\n            T.FleetPoolID AS FleetPool_FleetPoolId, \r\n       " +
                    "     T.ApproximateVehiclesAsgnd AS FleetPool_ApproximateVehiclesAsgnd, \r\n       " +
                    "     T.FleetPoolCode AS FleetPool_FleetPoolCode, \r\n            T.FleetPoolName A" +
                    "S FleetPool_FleetPoolName, \r\n            T.FleetPoolDescription AS FleetPool_Fle" +
                    "etPoolDescription, \r\n            T.IsActive AS FleetPool_IsActive, \r\n           " +
                    " T.IsPrivate AS FleetPool_IsPrivate, \r\n            T.IsReadOnly AS FleetPool_IsR" +
                    "eadOnly, \r\n            T.IsDeleted AS FleetPool_IsDeleted, \r\n            T.Opera" +
                    "tionID AS FleetPool_OperationId, \r\n            T.RegionID AS FleetPool_RegionId," +
                    " \r\n            T.RecCreatedDt AS FleetPool_RecCreatedDt, \r\n            T.RecCrea" +
                    "tedBy AS FleetPool_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS FleetPool_R" +
                    "ecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS FleetPool_RecLastUpdatedBy," +
                    " \r\n            T.RowVersion AS FleetPool_RowVersion, \r\n            T.UserDomainK" +
                    "ey AS FleetPool_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresM" +
                    "odelStoreContainer.FleetPool AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.FuelTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView102()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.FuelTypes", @"
    SELECT VALUE -- Constructing FuelTypes
        [DomainModels.FuelType](T1.FuelType_FuelTypeId, T1.FuelType_FuelTypeCode, T1.FuelType_FuelTypeName, T1.FuelType_UserDomainKey)
    FROM (
        SELECT 
            T.FuelTypeID AS FuelType_FuelTypeId, 
            T.FuelTypeCode AS FuelType_FuelTypeCode, 
            T.FuelTypeName AS FuelType_FuelTypeName, 
            T.UserDomainKey AS FuelType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.FuelType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.HireGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView103()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.HireGroups", "\r\n    SELECT VALUE -- Constructing HireGroups\r\n        [DomainModels.HireGroup](T" +
                    "1.HireGroup_HireGroupId, T1.HireGroup_ParentHireGroupId, T1.HireGroup_HireGroupN" +
                    "ame, T1.HireGroup_HireGroupDescription, T1.HireGroup_HireGroupCode, T1.HireGroup" +
                    "_IsParent, T1.HireGroup_IsActive, T1.HireGroup_IsDeleted, T1.HireGroup_IsReadOnl" +
                    "y, T1.HireGroup_IsPrivate, T1.HireGroup_RecCreatedDt, T1.HireGroup_RecCreatedBy," +
                    " T1.HireGroup_RecLastUpdatedBy, T1.HireGroup_RecLastUpdatedDt, T1.HireGroup_Comp" +
                    "anyId, T1.HireGroup_RowVersion, T1.HireGroup_UserDomainKey)\r\n    FROM (\r\n       " +
                    " SELECT \r\n            T.HireGroupID AS HireGroup_HireGroupId, \r\n            T.Pa" +
                    "rentHireGroupID AS HireGroup_ParentHireGroupId, \r\n            T.HireGroupName AS" +
                    " HireGroup_HireGroupName, \r\n            T.HireGroupDescription AS HireGroup_Hire" +
                    "GroupDescription, \r\n            T.HireGroupCode AS HireGroup_HireGroupCode, \r\n  " +
                    "          T.IsParent AS HireGroup_IsParent, \r\n            T.IsActive AS HireGrou" +
                    "p_IsActive, \r\n            T.IsDeleted AS HireGroup_IsDeleted, \r\n            T.Is" +
                    "ReadOnly AS HireGroup_IsReadOnly, \r\n            T.IsPrivate AS HireGroup_IsPriva" +
                    "te, \r\n            T.RecCreatedDt AS HireGroup_RecCreatedDt, \r\n            T.RecC" +
                    "reatedBy AS HireGroup_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS HireGrou" +
                    "p_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS HireGroup_RecLastUpdated" +
                    "Dt, \r\n            T.CompanyID AS HireGroup_CompanyId, \r\n            T.RowVersion" +
                    " AS HireGroup_RowVersion, \r\n            T.UserDomainKey AS HireGroup_UserDomainK" +
                    "ey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContainer.HireGrou" +
                    "p AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.HireGroupDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView104()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.HireGroupDetails", "\r\n    SELECT VALUE -- Constructing HireGroupDetails\r\n        [DomainModels.HireGr" +
                    "oupDetail](T1.HireGroupDetail_HireGroupDetailId, T1.HireGroupDetail_HireGroupId," +
                    " T1.HireGroupDetail_VehicleCategoryId, T1.HireGroupDetail_ModelYear, T1.HireGrou" +
                    "pDetail_VehicleModelId, T1.HireGroupDetail_VehicleMakeId, T1.HireGroupDetail_Row" +
                    "Version, T1.HireGroupDetail_IsActive, T1.HireGroupDetail_IsDeleted, T1.HireGroup" +
                    "Detail_IsReadOnly, T1.HireGroupDetail_IsPrivate, T1.HireGroupDetail_RecCreatedDt" +
                    ", T1.HireGroupDetail_RecCreatedBy, T1.HireGroupDetail_RecLastUpdatedBy, T1.HireG" +
                    "roupDetail_RecLastUpdatedDt, T1.HireGroupDetail_UserDomainKey)\r\n    FROM (\r\n    " +
                    "    SELECT \r\n            T.HireGroupDetailID AS HireGroupDetail_HireGroupDetailI" +
                    "d, \r\n            T.HireGroupID AS HireGroupDetail_HireGroupId, \r\n            T.V" +
                    "ehicleCategoryID AS HireGroupDetail_VehicleCategoryId, \r\n            T.ModelYear" +
                    " AS HireGroupDetail_ModelYear, \r\n            T.VehicleModelID AS HireGroupDetail" +
                    "_VehicleModelId, \r\n            T.VehicleMakeID AS HireGroupDetail_VehicleMakeId," +
                    " \r\n            T.RowVersion AS HireGroupDetail_RowVersion, \r\n            T.IsAct" +
                    "ive AS HireGroupDetail_IsActive, \r\n            T.IsDeleted AS HireGroupDetail_Is" +
                    "Deleted, \r\n            T.IsReadOnly AS HireGroupDetail_IsReadOnly, \r\n           " +
                    " T.IsPrivate AS HireGroupDetail_IsPrivate, \r\n            T.RecCreatedDt AS HireG" +
                    "roupDetail_RecCreatedDt, \r\n            T.RecCreatedBy AS HireGroupDetail_RecCrea" +
                    "tedBy, \r\n            T.RecLastUpdatedBy AS HireGroupDetail_RecLastUpdatedBy, \r\n " +
                    "           T.RecLastUpdatedDt AS HireGroupDetail_RecLastUpdatedDt, \r\n           " +
                    " T.UserDomainKey AS HireGroupDetail_UserDomainKey, \r\n            True AS _from0\r" +
                    "\n        FROM CaresModelStoreContainer.HireGroupDetail AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Operations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView105()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Operations", @"
    SELECT VALUE -- Constructing Operations
        [DomainModels.Operation](T1.Operation_OperationId, T1.Operation_OperationCode, T1.Operation_OperationName, T1.Operation_OperationDescription, T1.Operation_DepartmentId, T1.Operation_RowVersion, T1.Operation_IsActive, T1.Operation_IsDeleted, T1.Operation_IsPrivate, T1.Operation_IsReadOnly, T1.Operation_RecCreatedDt, T1.Operation_RecCreatedBy, T1.Operation_RecLastUpdatedDt, T1.Operation_RecLastUpdatedBy, T1.Operation_UserDomainKey)
    FROM (
        SELECT 
            T.OperationID AS Operation_OperationId, 
            T.OperationCode AS Operation_OperationCode, 
            T.OperationName AS Operation_OperationName, 
            T.OperationDescription AS Operation_OperationDescription, 
            T.DepartmentID AS Operation_DepartmentId, 
            T.RowVersion AS Operation_RowVersion, 
            T.IsActive AS Operation_IsActive, 
            T.IsDeleted AS Operation_IsDeleted, 
            T.IsPrivate AS Operation_IsPrivate, 
            T.IsReadOnly AS Operation_IsReadOnly, 
            T.RecCreatedDt AS Operation_RecCreatedDt, 
            T.RecCreatedBy AS Operation_RecCreatedBy, 
            T.RecLastUpdatedDt AS Operation_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Operation_RecLastUpdatedBy, 
            T.UserDomainKey AS Operation_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.Operation AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.OperationsWorkPlaces1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView106()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.OperationsWorkPlaces1", "\r\n    SELECT VALUE -- Constructing OperationsWorkPlaces1\r\n        [DomainModels.O" +
                    "perationsWorkPlace](T1.OperationsWorkPlace_OperationsWorkPlaceId, T1.OperationsW" +
                    "orkPlace_LocationCode, T1.OperationsWorkPlace_WorkPlaceId, T1.OperationsWorkPlac" +
                    "e_OperationId, T1.OperationsWorkPlace_FleetPoolId, T1.OperationsWorkPlace_CostCe" +
                    "nter, T1.OperationsWorkPlace_RowVersion, T1.OperationsWorkPlace_IsActive, T1.Ope" +
                    "rationsWorkPlace_IsDeleted, T1.OperationsWorkPlace_IsPrivate, T1.OperationsWorkP" +
                    "lace_IsReadOnly, T1.OperationsWorkPlace_RecCreatedDt, T1.OperationsWorkPlace_Rec" +
                    "CreatedBy, T1.OperationsWorkPlace_RecLastUpdatedDt, T1.OperationsWorkPlace_RecLa" +
                    "stUpdatedBy, T1.OperationsWorkPlace_UserDomainKey)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.OperationsWorkplaceID AS OperationsWorkPlace_OperationsWorkPlaceI" +
                    "d, \r\n            T.LocationCode AS OperationsWorkPlace_LocationCode, \r\n         " +
                    "   T.WorkplaceID AS OperationsWorkPlace_WorkPlaceId, \r\n            T.OperationID" +
                    " AS OperationsWorkPlace_OperationId, \r\n            T.FleetPoolID AS OperationsWo" +
                    "rkPlace_FleetPoolId, \r\n            T.CostCenter AS OperationsWorkPlace_CostCente" +
                    "r, \r\n            T.RowVersion AS OperationsWorkPlace_RowVersion, \r\n            T" +
                    ".IsActive AS OperationsWorkPlace_IsActive, \r\n            T.IsDeleted AS Operatio" +
                    "nsWorkPlace_IsDeleted, \r\n            T.IsPrivate AS OperationsWorkPlace_IsPrivat" +
                    "e, \r\n            T.IsReadOnly AS OperationsWorkPlace_IsReadOnly, \r\n            T" +
                    ".RecCreatedDt AS OperationsWorkPlace_RecCreatedDt, \r\n            T.RecCreatedBy " +
                    "AS OperationsWorkPlace_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Operati" +
                    "onsWorkPlace_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS OperationsWor" +
                    "kPlace_RecLastUpdatedBy, \r\n            T.UserDomainKey AS OperationsWorkPlace_Us" +
                    "erDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContainer" +
                    ".OperationsWorkplace AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaymentTerms
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView107()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaymentTerms", "\r\n    SELECT VALUE -- Constructing PaymentTerms\r\n        [DomainModels.PaymentTer" +
                    "m](T1.PaymentTerm_PaymentTermId, T1.PaymentTerm_PaymentTermCode, T1.PaymentTerm_" +
                    "PaymentTermName, T1.PaymentTerm_PaymentTermDescription, T1.PaymentTerm_PaymentTe" +
                    "rmKey, T1.PaymentTerm_RowVersion, T1.PaymentTerm_IsActive, T1.PaymentTerm_IsDele" +
                    "ted, T1.PaymentTerm_IsPrivate, T1.PaymentTerm_IsReadOnly, T1.PaymentTerm_RecCrea" +
                    "tedDt, T1.PaymentTerm_RecCreatedBy, T1.PaymentTerm_RecLastUpdatedDt, T1.PaymentT" +
                    "erm_RecLastUpdatedBy, T1.PaymentTerm_UserDomainKey)\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.PaymentTermID AS PaymentTerm_PaymentTermId, \r\n            T.Paym" +
                    "entTermCode AS PaymentTerm_PaymentTermCode, \r\n            T.PaymentTermName AS P" +
                    "aymentTerm_PaymentTermName, \r\n            T.PaymentTermDescription AS PaymentTer" +
                    "m_PaymentTermDescription, \r\n            T.PaymentTermKey AS PaymentTerm_PaymentT" +
                    "ermKey, \r\n            T.RowVersion AS PaymentTerm_RowVersion, \r\n            T.Is" +
                    "Active AS PaymentTerm_IsActive, \r\n            T.IsDeleted AS PaymentTerm_IsDelet" +
                    "ed, \r\n            T.IsPrivate AS PaymentTerm_IsPrivate, \r\n            T.IsReadOn" +
                    "ly AS PaymentTerm_IsReadOnly, \r\n            T.RecCreatedDt AS PaymentTerm_RecCre" +
                    "atedDt, \r\n            T.RecCreatedBy AS PaymentTerm_RecCreatedBy, \r\n            " +
                    "T.RecLastUpdatedDt AS PaymentTerm_RecLastUpdatedDt, \r\n            T.RecLastUpdat" +
                    "edBy AS PaymentTerm_RecLastUpdatedBy, \r\n            T.UserDomainKey AS PaymentTe" +
                    "rm_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreCont" +
                    "ainer.PaymentTerm AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Phones
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView108()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Phones", @"
    SELECT VALUE -- Constructing Phones
        [DomainModels.Phone](T1.Phone_PhoneId, T1.Phone_IsDefault, T1.Phone_PhoneNumber, T1.Phone_BusinessPartnerId, T1.Phone_PhoneTypeId, T1.Phone_WorkLocationId, T1.Phone_EmployeeId, T1.Phone_RowVersion, T1.Phone_IsActive, T1.Phone_IsDeleted, T1.Phone_IsPrivate, T1.Phone_IsReadOnly, T1.Phone_RecCreatedDt, T1.Phone_RecCreatedBy, T1.Phone_RecLastUpdatedDt, T1.Phone_RecLastUpdatedBy, T1.Phone_UserDomainKey)
    FROM (
        SELECT 
            T.PhoneID AS Phone_PhoneId, 
            T.IsDefault AS Phone_IsDefault, 
            T.PhoneNumber AS Phone_PhoneNumber, 
            T.BPMainID AS Phone_BusinessPartnerId, 
            T.PhoneTypeID AS Phone_PhoneTypeId, 
            T.WorkLocationID AS Phone_WorkLocationId, 
            T.EmployeeID AS Phone_EmployeeId, 
            T.RowVersion AS Phone_RowVersion, 
            T.IsActive AS Phone_IsActive, 
            T.IsDeleted AS Phone_IsDeleted, 
            T.IsPrivate AS Phone_IsPrivate, 
            T.IsReadOnly AS Phone_IsReadOnly, 
            T.RecCreatedDt AS Phone_RecCreatedDt, 
            T.RecCreatedBy AS Phone_RecCreatedBy, 
            T.RecLastUpdatedDt AS Phone_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS Phone_RecLastUpdatedBy, 
            T.UserDomainKey AS Phone_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.Phone AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PhoneTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView109()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PhoneTypes", @"
    SELECT VALUE -- Constructing PhoneTypes
        [DomainModels.PhoneType](T1.PhoneType_PhoneTypeId, T1.PhoneType_PhoneTypeCode, T1.PhoneType_PhoneTypeName, T1.PhoneType_PhoneTypeKey, T1.PhoneType_PhoneTypeDescription, T1.PhoneType_IsActive, T1.PhoneType_IsDeleted, T1.PhoneType_IsPrivate, T1.PhoneType_IsReadOnly, T1.PhoneType_RecCreatedDt, T1.PhoneType_RecCreatedBy, T1.PhoneType_RecLastUpdatedDt, T1.PhoneType_RecLastUpdatedBy, T1.PhoneType_UserDomainKey)
    FROM (
        SELECT 
            T.PhoneTypeID AS PhoneType_PhoneTypeId, 
            T.PhoneTypeCode AS PhoneType_PhoneTypeCode, 
            T.PhoneTypeName AS PhoneType_PhoneTypeName, 
            T.PhoneTypeKey AS PhoneType_PhoneTypeKey, 
            T.PhoneTypeDescription AS PhoneType_PhoneTypeDescription, 
            T.IsActive AS PhoneType_IsActive, 
            T.IsDeleted AS PhoneType_IsDeleted, 
            T.IsPrivate AS PhoneType_IsPrivate, 
            T.IsReadOnly AS PhoneType_IsReadOnly, 
            T.RecCreatedDt AS PhoneType_RecCreatedDt, 
            T.RecCreatedBy AS PhoneType_RecCreatedBy, 
            T.RecLastUpdateDt AS PhoneType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS PhoneType_RecLastUpdatedBy, 
            T.UserDomainKey AS PhoneType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.PhoneType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Regions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView110()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Regions", @"
    SELECT VALUE -- Constructing Regions
        [DomainModels.Region](T1.Region_RegionId, T1.Region_CountryId, T1.Region_RegionCode, T1.Region_RegionName, T1.Region_RegionDescription, T1.Region_RowVersion, T1.Region_IsActive, T1.Region_IsDeleted, T1.Region_IsPrivate, T1.Region_IsReadOnly, T1.Region_RecCreatedDt, T1.Region_RecLastUpdatedBy, T1.Region_RecCreatedBy, T1.Region_RecLastUpdatedDt, T1.Region_UserDomainKey)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionId, 
            T.CountryID AS Region_CountryId, 
            T.RegionCode AS Region_RegionCode, 
            T.RegionName AS Region_RegionName, 
            T.RegionDescription AS Region_RegionDescription, 
            T.RowVersion AS Region_RowVersion, 
            T.IsActive AS Region_IsActive, 
            T.IsDeleted AS Region_IsDeleted, 
            T.IsPrivate AS Region_IsPrivate, 
            T.IsReadOnly AS Region_IsReadOnly, 
            T.RecCreatedDt AS Region_RecCreatedDt, 
            T.RecLastUpdatedBy AS Region_RecLastUpdatedBy, 
            T.RecCreatedBy AS Region_RecCreatedBy, 
            T.RecLastUpdatedDt AS Region_RecLastUpdatedDt, 
            T.UserDomainKey AS Region_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.Region AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SubRegions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView111()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SubRegions", @"
    SELECT VALUE -- Constructing SubRegions
        [DomainModels.SubRegion](T1.SubRegion_SubRegionId, T1.SubRegion_SubRegionCode, T1.SubRegion_SubRegionName, T1.SubRegion_SubRegionDescription, T1.SubRegion_RegionId, T1.SubRegion_RowVersion, T1.SubRegion_IsActive, T1.SubRegion_IsPrivate, T1.SubRegion_IsReadOnly, T1.SubRegion_IsDeleted, T1.SubRegion_RecCreatedDt, T1.SubRegion_RecCreatedBy, T1.SubRegion_RecLastUpdatedDt, T1.SubRegion_RecLastUpdatedBy, T1.SubRegion_UserDomainKey)
    FROM (
        SELECT 
            T.SubRegionID AS SubRegion_SubRegionId, 
            T.SubRegionCode AS SubRegion_SubRegionCode, 
            T.SubRegionName AS SubRegion_SubRegionName, 
            T.SubRegionDescription AS SubRegion_SubRegionDescription, 
            T.RegionID AS SubRegion_RegionId, 
            T.RowVersion AS SubRegion_RowVersion, 
            T.IsActive AS SubRegion_IsActive, 
            T.IsPrivate AS SubRegion_IsPrivate, 
            T.IsReadOnly AS SubRegion_IsReadOnly, 
            T.IsDeleted AS SubRegion_IsDeleted, 
            T.RecCreatedDt AS SubRegion_RecCreatedDt, 
            T.RecCreatedBy AS SubRegion_RecCreatedBy, 
            T.RecLastUpdatedDt AS SubRegion_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS SubRegion_RecLastUpdatedBy, 
            T.UserDomainKey AS SubRegion_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.SubRegion AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TariffTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView112()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2227);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TariffTypes\r\n        [DomainModels.TariffType");
            viewString.Append("](T1.TariffType_TariffTypeId, T1.TariffType_OperationId, T1.TariffType_Measureme");
            viewString.Append("ntUnitId, T1.TariffType_TariffTypeCode, T1.TariffType_TariffTypeName, T1.TariffT");
            viewString.Append("ype_TariffTypeDescription, T1.TariffType_PricingStrategyId, T1.TariffType_Durati");
            viewString.Append("onFrom, T1.TariffType_DurationTo, T1.TariffType_GracePeriod, T1.TariffType_Effec");
            viewString.Append("tiveDate, T1.TariffType_RowVersion, T1.TariffType_RevisionNumber, T1.TariffType_");
            viewString.Append("ChildTariffTypeId, T1.TariffType_RecCreatedDt, T1.TariffType_RecLastUpdatedDt, T");
            viewString.Append("1.TariffType_RecLastUpdatedBy, T1.TariffType_RecCreatedBy, T1.TariffType_IsActiv");
            viewString.Append("e, T1.TariffType_IsDeleted, T1.TariffType_IsPrivate, T1.TariffType_IsReadOnly, T");
            viewString.Append("1.TariffType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.TariffTy");
            viewString.Append("peID AS TariffType_TariffTypeId, \r\n            T.OperationID AS TariffType_Opera");
            viewString.Append("tionId, \r\n            T.MeasurementUnitID AS TariffType_MeasurementUnitId, \r\n   ");
            viewString.Append("         T.TariffTypeCode AS TariffType_TariffTypeCode, \r\n            T.TariffTy");
            viewString.Append("peName AS TariffType_TariffTypeName, \r\n            T.TariffTypeDescription AS Ta");
            viewString.Append("riffType_TariffTypeDescription, \r\n            T.PricingStrategyID AS TariffType_");
            viewString.Append("PricingStrategyId, \r\n            T.DurationFrom AS TariffType_DurationFrom, \r\n  ");
            viewString.Append("          T.DurationTo AS TariffType_DurationTo, \r\n            T.GracePeriod AS ");
            viewString.Append("TariffType_GracePeriod, \r\n            T.EffectiveDate AS TariffType_EffectiveDat");
            viewString.Append("e, \r\n            T.RowVersion AS TariffType_RowVersion, \r\n            T.Revision");
            viewString.Append("Number AS TariffType_RevisionNumber, \r\n            T.ChildTariffTypeID AS Tariff");
            viewString.Append("Type_ChildTariffTypeId, \r\n            T.RecCreatedDt AS TariffType_RecCreatedDt,");
            viewString.Append(" \r\n            T.RecLastUpdatedDt AS TariffType_RecLastUpdatedDt, \r\n            ");
            viewString.Append("T.RecLastUpdatedBy AS TariffType_RecLastUpdatedBy, \r\n            T.RecCreatedBy ");
            viewString.Append("AS TariffType_RecCreatedBy, \r\n            T.IsActive AS TariffType_IsActive, \r\n ");
            viewString.Append("           T.IsDeleted AS TariffType_IsDeleted, \r\n            T.IsPrivate AS Tar");
            viewString.Append("iffType_IsPrivate, \r\n            T.IsReadOnly AS TariffType_IsReadOnly, \r\n      ");
            viewString.Append("      T.UserDomainKey AS TariffType_UserDomainKey, \r\n            True AS _from0\r");
            viewString.Append("\n        FROM CaresModelStoreContainer.TariffType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TariffTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TransmissionTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView113()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TransmissionTypes", @"
    SELECT VALUE -- Constructing TransmissionTypes
        [DomainModels.TransmissionType](T1.TransmissionType_TransmissionTypeId, T1.TransmissionType_TransmissionTypeName, T1.TransmissionType_TransmissionTypeCode, T1.TransmissionType_UserDomainKey)
    FROM (
        SELECT 
            T.TransmissionTypeID AS TransmissionType_TransmissionTypeId, 
            T.TransmissionTypeName AS TransmissionType_TransmissionTypeName, 
            T.TransmissionTypeCode AS TransmissionType_TransmissionTypeCode, 
            T.UserDomainKey AS TransmissionType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.TransmissionType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Vehicles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView114()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2987);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Vehicles\r\n        [DomainModels.Vehicle](T1.V");
            viewString.Append("ehicle_VehicleId, T1.Vehicle_IsBranchOwner, T1.Vehicle_PlateNumber, T1.Vehicle_V");
            viewString.Append("ehicleCode, T1.Vehicle_VehicleName, T1.Vehicle_ModelYear, T1.Vehicle_HireGroupId");
            viewString.Append(", T1.Vehicle_FleetPoolId, T1.Vehicle_Color, T1.Vehicle_OperationsWorkPlaceId, T1");
            viewString.Append(".Vehicle_FuelLevel, T1.Vehicle_TankSize, T1.Vehicle_InitialOdometer, T1.Vehicle_");
            viewString.Append("CurrentOdometer, T1.Vehicle_RegistrationDate, T1.Vehicle_VehicleMakeId, T1.Vehic");
            viewString.Append("le_VehicleCategoryId, T1.Vehicle_VehicleModelId, T1.Vehicle_VehicleStatusId, T1.");
            viewString.Append("Vehicle_RecCreatedDt, T1.Vehicle_RecCreatedBy, T1.Vehicle_RecLastUpdatedDt, T1.V");
            viewString.Append("ehicle_RecLastUpdatedBy, T1.Vehicle_RowVersion, T1.Vehicle_FuelTypeId, T1.Vehicl");
            viewString.Append("e_TransmissionTypeId, T1.Vehicle_IsActive, T1.Vehicle_IsDeleted, T1.Vehicle_IsRe");
            viewString.Append("adOnly, T1.Vehicle_IsPrivate, T1.Vehicle_VehicleCondition, T1.Vehicle_VehicleCon");
            viewString.Append("ditionDescription, T1.Vehicle_RegistrationExpiryDate, T1.Vehicle_UserDomainKey)\r");
            viewString.Append("\n    FROM (\r\n        SELECT \r\n            T.VehicleID AS Vehicle_VehicleId, \r\n  ");
            viewString.Append("          T.IsBranchOwner AS Vehicle_IsBranchOwner, \r\n            T.PlateNumber ");
            viewString.Append("AS Vehicle_PlateNumber, \r\n            T.VehicleCode AS Vehicle_VehicleCode, \r\n  ");
            viewString.Append("          T.VehicleName AS Vehicle_VehicleName, \r\n            T.ModelYear AS Veh");
            viewString.Append("icle_ModelYear, \r\n            T.HireGroupID AS Vehicle_HireGroupId, \r\n          ");
            viewString.Append("  T.FleetPoolID AS Vehicle_FleetPoolId, \r\n            T.Color AS Vehicle_Color, ");
            viewString.Append("\r\n            T.OperationsWorkPlaceID AS Vehicle_OperationsWorkPlaceId, \r\n      ");
            viewString.Append("      T.FuelLevel AS Vehicle_FuelLevel, \r\n            T.TankSize AS Vehicle_Tank");
            viewString.Append("Size, \r\n            T.InitialOdometer AS Vehicle_InitialOdometer, \r\n            ");
            viewString.Append("T.CurrentOdometer AS Vehicle_CurrentOdometer, \r\n            T.RegisterationDate ");
            viewString.Append("AS Vehicle_RegistrationDate, \r\n            T.VehicleMakeID AS Vehicle_VehicleMak");
            viewString.Append("eId, \r\n            T.VehicleCategoryID AS Vehicle_VehicleCategoryId, \r\n         ");
            viewString.Append("   T.VehicleModelID AS Vehicle_VehicleModelId, \r\n            T.VehicleStatusID A");
            viewString.Append("S Vehicle_VehicleStatusId, \r\n            T.RecCreatedDt AS Vehicle_RecCreatedDt,");
            viewString.Append(" \r\n            T.RecCreatedBy AS Vehicle_RecCreatedBy, \r\n            T.RecLastUp");
            viewString.Append("datedDt AS Vehicle_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS Vehicle");
            viewString.Append("_RecLastUpdatedBy, \r\n            T.RowVersion AS Vehicle_RowVersion, \r\n         ");
            viewString.Append("   T.FuelTypeID AS Vehicle_FuelTypeId, \r\n            T.TransmissionTypeID AS Veh");
            viewString.Append("icle_TransmissionTypeId, \r\n            T.IsActive AS Vehicle_IsActive, \r\n       ");
            viewString.Append("     T.IsDeleted AS Vehicle_IsDeleted, \r\n            T.IsReadOnly AS Vehicle_IsR");
            viewString.Append("eadOnly, \r\n            T.IsPrivate AS Vehicle_IsPrivate, \r\n            T.Vehicle");
            viewString.Append("Condition AS Vehicle_VehicleCondition, \r\n            T.VehicleConditionDescripti");
            viewString.Append("on AS Vehicle_VehicleConditionDescription, \r\n            T.RegisterationExpiryDa");
            viewString.Append("te AS Vehicle_RegistrationExpiryDate, \r\n            T.UserDomainKey AS Vehicle_U");
            viewString.Append("serDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContaine");
            viewString.Append("r.Vehicle AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Vehicles", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView115()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleCategories", "\r\n    SELECT VALUE -- Constructing VehicleCategories\r\n        [DomainModels.Vehic" +
                    "leCategory](T1.VehicleCategory_VehicleCategoryId, T1.VehicleCategory_VehicleCate" +
                    "goryCode, T1.VehicleCategory_VehicleCategoryName, T1.VehicleCategory_VehicleCate" +
                    "goryDescription, T1.VehicleCategory_IsActive, T1.VehicleCategory_IsDeleted, T1.V" +
                    "ehicleCategory_IsReadOnly, T1.VehicleCategory_IsPrivate, T1.VehicleCategory_RecC" +
                    "reatedDt, T1.VehicleCategory_RecCreatedBy, T1.VehicleCategory_RecLastUpdatedBy, " +
                    "T1.VehicleCategory_RecLastUpdatedDt, T1.VehicleCategory_RowVersion, T1.VehicleCa" +
                    "tegory_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.VehicleCategor" +
                    "yID AS VehicleCategory_VehicleCategoryId, \r\n            T.VehicleCategoryCode AS" +
                    " VehicleCategory_VehicleCategoryCode, \r\n            T.VehicleCategoryName AS Veh" +
                    "icleCategory_VehicleCategoryName, \r\n            T.VehicleCategoryDescription AS " +
                    "VehicleCategory_VehicleCategoryDescription, \r\n            T.IsActive AS VehicleC" +
                    "ategory_IsActive, \r\n            T.IsDeleted AS VehicleCategory_IsDeleted, \r\n    " +
                    "        T.IsReadOnly AS VehicleCategory_IsReadOnly, \r\n            T.IsPrivate AS" +
                    " VehicleCategory_IsPrivate, \r\n            T.RecCreatedDt AS VehicleCategory_RecC" +
                    "reatedDt, \r\n            T.RecCreatedBy AS VehicleCategory_RecCreatedBy, \r\n      " +
                    "      T.RecLastUpdatedBy AS VehicleCategory_RecLastUpdatedBy, \r\n            T.Re" +
                    "cLastUpdatedDt AS VehicleCategory_RecLastUpdatedDt, \r\n            T.RowVersion A" +
                    "S VehicleCategory_RowVersion, \r\n            T.UserDomainKey AS VehicleCategory_U" +
                    "serDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContaine" +
                    "r.VehicleCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleCheckLists
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView116()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleCheckLists", "\r\n    SELECT VALUE -- Constructing VehicleCheckLists\r\n        [DomainModels.Vehic" +
                    "leCheckList](T1.VehicleCheckList_VehicleCheckListId, T1.VehicleCheckList_Vehicle" +
                    "CheckListCode, T1.VehicleCheckList_VehicleCheckListName, T1.VehicleCheckList_Veh" +
                    "icleCheckListDescription, T1.VehicleCheckList_IsInterior, T1.VehicleCheckList_Ve" +
                    "hicleCheckListKey, T1.VehicleCheckList_RowVersion, T1.VehicleCheckList_IsActive," +
                    " T1.VehicleCheckList_IsDeleted, T1.VehicleCheckList_IsPrivate, T1.VehicleCheckLi" +
                    "st_IsReadOnly, T1.VehicleCheckList_RecCreatedDt, T1.VehicleCheckList_RecCreatedB" +
                    "y, T1.VehicleCheckList_RecLastUpdatedDt, T1.VehicleCheckList_RecLastUpdatedBy, T" +
                    "1.VehicleCheckList_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Ve" +
                    "hicleCheckListID AS VehicleCheckList_VehicleCheckListId, \r\n            T.Vehicle" +
                    "CheckListCode AS VehicleCheckList_VehicleCheckListCode, \r\n            T.VehicleC" +
                    "heckListName AS VehicleCheckList_VehicleCheckListName, \r\n            T.VehicleCh" +
                    "eckListDescription AS VehicleCheckList_VehicleCheckListDescription, \r\n          " +
                    "  T.IsInterior AS VehicleCheckList_IsInterior, \r\n            T.VehicleCheckListK" +
                    "ey AS VehicleCheckList_VehicleCheckListKey, \r\n            T.RowVersion AS Vehicl" +
                    "eCheckList_RowVersion, \r\n            T.IsActive AS VehicleCheckList_IsActive, \r\n" +
                    "            T.IsDeleted AS VehicleCheckList_IsDeleted, \r\n            T.IsPrivate" +
                    " AS VehicleCheckList_IsPrivate, \r\n            T.IsReadOnly AS VehicleCheckList_I" +
                    "sReadOnly, \r\n            T.RecCreatedDt AS VehicleCheckList_RecCreatedDt, \r\n    " +
                    "        T.RecCreatedBy AS VehicleCheckList_RecCreatedBy, \r\n            T.RecLast" +
                    "UpdatedDt AS VehicleCheckList_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy" +
                    " AS VehicleCheckList_RecLastUpdatedBy, \r\n            T.UserDomainKey AS VehicleC" +
                    "heckList_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelSto" +
                    "reContainer.VehicleCheckList AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleCheckListItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView117()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleCheckListItems", "\r\n    SELECT VALUE -- Constructing VehicleCheckListItems\r\n        [DomainModels.V" +
                    "ehicleCheckListItem](T1.VehicleCheckListItem_VehicleCheckListItemId, T1.VehicleC" +
                    "heckListItem_VehicleCheckListId, T1.VehicleCheckListItem_VehicleId, T1.VehicleCh" +
                    "eckListItem_RowVersion, T1.VehicleCheckListItem_IsActive, T1.VehicleCheckListIte" +
                    "m_IsDeleted, T1.VehicleCheckListItem_IsReadOnly, T1.VehicleCheckListItem_IsPriva" +
                    "te, T1.VehicleCheckListItem_RecCreatedDt, T1.VehicleCheckListItem_RecCreatedBy, " +
                    "T1.VehicleCheckListItem_RecLastUpdatedBy, T1.VehicleCheckListItem_RecLastUpdated" +
                    "Dt, T1.VehicleCheckListItem_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.VehicleCheckListItemID AS VehicleCheckListItem_VehicleCheckListItemId, \r\n" +
                    "            T.VehicleCheckListID AS VehicleCheckListItem_VehicleCheckListId, \r\n " +
                    "           T.VehicleID AS VehicleCheckListItem_VehicleId, \r\n            T.RowVer" +
                    "sion AS VehicleCheckListItem_RowVersion, \r\n            T.IsActive AS VehicleChec" +
                    "kListItem_IsActive, \r\n            T.IsDeleted AS VehicleCheckListItem_IsDeleted," +
                    " \r\n            T.IsReadOnly AS VehicleCheckListItem_IsReadOnly, \r\n            T." +
                    "IsPrivate AS VehicleCheckListItem_IsPrivate, \r\n            T.RecCreatedDt AS Veh" +
                    "icleCheckListItem_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleCheckList" +
                    "Item_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS VehicleCheckListItem_RecL" +
                    "astUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleCheckListItem_RecLastUp" +
                    "datedDt, \r\n            T.UserDomainKey AS VehicleCheckListItem_UserDomainKey, \r\n" +
                    "            True AS _from0\r\n        FROM CaresModelStoreContainer.VehicleCheckLi" +
                    "stItem AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView118()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleImages", "\r\n    SELECT VALUE -- Constructing VehicleImages\r\n        [DomainModels.VehicleIm" +
                    "age](T1.VehicleImage_VehicleImageId, T1.VehicleImage_Image, T1.VehicleImage_Vehi" +
                    "cleImageCode, T1.VehicleImage_VehicleImageName, T1.VehicleImage_VehicleImageDesc" +
                    "ription, T1.VehicleImage_RowVersion, T1.VehicleImage_IsActive, T1.VehicleImage_I" +
                    "sDeleted, T1.VehicleImage_IsPrivate, T1.VehicleImage_IsReadOnly, T1.VehicleImage" +
                    "_RecCreatedDt, T1.VehicleImage_RecCreatedBy, T1.VehicleImage_RecLastUpdatedDt, T" +
                    "1.VehicleImage_RecLastUpdatedBy, T1.VehicleImage_UserDomainKey)\r\n    FROM (\r\n   " +
                    "     SELECT \r\n            T.VehicleImageID AS VehicleImage_VehicleImageId, \r\n   " +
                    "         T.Image AS VehicleImage_Image, \r\n            T.VehicleImageCode AS Vehi" +
                    "cleImage_VehicleImageCode, \r\n            T.VehicleImageName AS VehicleImage_Vehi" +
                    "cleImageName, \r\n            T.VehicleImageDescription AS VehicleImage_VehicleIma" +
                    "geDescription, \r\n            T.RowVersion AS VehicleImage_RowVersion, \r\n        " +
                    "    T.IsActive AS VehicleImage_IsActive, \r\n            T.IsDeleted AS VehicleIma" +
                    "ge_IsDeleted, \r\n            T.IsPrivate AS VehicleImage_IsPrivate, \r\n           " +
                    " T.IsReadOnly AS VehicleImage_IsReadOnly, \r\n            T.RecCreatedDt AS Vehicl" +
                    "eImage_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleImage_RecCreatedBy, " +
                    "\r\n            T.RecLastUpdatedDt AS VehicleImage_RecLastUpdatedDt, \r\n           " +
                    " T.RecLastUpdatedBy AS VehicleImage_RecLastUpdatedBy, \r\n            T.UserDomain" +
                    "Key AS VehicleImage_UserDomainKey, \r\n            True AS _from0\r\n        FROM Ca" +
                    "resModelStoreContainer.VehicleImage AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleMakes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView119()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleMakes", @"
    SELECT VALUE -- Constructing VehicleMakes
        [DomainModels.VehicleMake](T1.VehicleMake_VehicleMakeId, T1.VehicleMake_VehicleMakeCode, T1.VehicleMake_VehicleMakeName, T1.VehicleMake_VehicleMakeDescription, T1.VehicleMake_IsActive, T1.VehicleMake_IsDeleted, T1.VehicleMake_IsReadOnly, T1.VehicleMake_IsPrivate, T1.VehicleMake_RecCreatedDt, T1.VehicleMake_RecCreatedBy, T1.VehicleMake_RecLastUpdatedBy, T1.VehicleMake_RecLastUpdatedDt, T1.VehicleMake_RowVersion, T1.VehicleMake_UserDomainKey)
    FROM (
        SELECT 
            T.VehicleMakeID AS VehicleMake_VehicleMakeId, 
            T.VehicleMakeCode AS VehicleMake_VehicleMakeCode, 
            T.VehicleMakeName AS VehicleMake_VehicleMakeName, 
            T.VehicleMakeDescription AS VehicleMake_VehicleMakeDescription, 
            T.IsActive AS VehicleMake_IsActive, 
            T.IsDeleted AS VehicleMake_IsDeleted, 
            T.IsReadOnly AS VehicleMake_IsReadOnly, 
            T.IsPrivate AS VehicleMake_IsPrivate, 
            T.RecCreatedDt AS VehicleMake_RecCreatedDt, 
            T.RecCreatedBy AS VehicleMake_RecCreatedBy, 
            T.RecLastUpdatedBy AS VehicleMake_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS VehicleMake_RecLastUpdatedDt, 
            T.RowVersion AS VehicleMake_RowVersion, 
            T.UserDomainKey AS VehicleMake_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.VehicleMake AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView120()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleModels", "\r\n    SELECT VALUE -- Constructing VehicleModels\r\n        [DomainModels.VehicleMo" +
                    "del](T1.VehicleModel_VehicleModelId, T1.VehicleModel_VehicleModelCode, T1.Vehicl" +
                    "eModel_VehicleModelName, T1.VehicleModel_VehicleModelDescription, T1.VehicleMode" +
                    "l_IsActive, T1.VehicleModel_IsDeleted, T1.VehicleModel_IsReadOnly, T1.VehicleMod" +
                    "el_IsPrivate, T1.VehicleModel_RecCreatedDt, T1.VehicleModel_RecCreatedBy, T1.Veh" +
                    "icleModel_RecLastUpdatedBy, T1.VehicleModel_RecLastUpdatedDt, T1.VehicleModel_Ro" +
                    "wVersion, T1.VehicleModel_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.VehicleModelID AS VehicleModel_VehicleModelId, \r\n            T.VehicleModel" +
                    "Code AS VehicleModel_VehicleModelCode, \r\n            T.VehicleModelName AS Vehic" +
                    "leModel_VehicleModelName, \r\n            T.VehicleModelDescription AS VehicleMode" +
                    "l_VehicleModelDescription, \r\n            T.IsActive AS VehicleModel_IsActive, \r\n" +
                    "            T.IsDeleted AS VehicleModel_IsDeleted, \r\n            T.IsReadOnly AS" +
                    " VehicleModel_IsReadOnly, \r\n            T.IsPrivate AS VehicleModel_IsPrivate, \r" +
                    "\n            T.RecCreatedDt AS VehicleModel_RecCreatedDt, \r\n            T.RecCre" +
                    "atedBy AS VehicleModel_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS Vehicle" +
                    "Model_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleModel_RecLast" +
                    "UpdatedDt, \r\n            T.RowVersion AS VehicleModel_RowVersion, \r\n            " +
                    "T.UserDomainKey AS VehicleModel_UserDomainKey, \r\n            True AS _from0\r\n   " +
                    "     FROM CaresModelStoreContainer.VehicleModel AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleReservations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView121()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2069);
            viewString.Append("\r\n    SELECT VALUE -- Constructing VehicleReservations\r\n        [DomainModels.Ve");
            viewString.Append("hicleReservation](T1.VehicleReservation_VehicleReservationId, T1.VehicleReservat");
            viewString.Append("ion_StartDtTime, T1.VehicleReservation_EndDtTime, T1.VehicleReservation_BookingM");
            viewString.Append("ainId, T1.VehicleReservation_VehicleId, T1.VehicleReservation_RAMainId, T1.Vehic");
            viewString.Append("leReservation_VehicleReservationDescription, T1.VehicleReservation_RowVersion, T");
            viewString.Append("1.VehicleReservation_IsActive, T1.VehicleReservation_IsDeleted, T1.VehicleReserv");
            viewString.Append("ation_IsPrivate, T1.VehicleReservation_IsReadOnly, T1.VehicleReservation_RecCrea");
            viewString.Append("tedDt, T1.VehicleReservation_RecCreatedBy, T1.VehicleReservation_RecLastUpdatedD");
            viewString.Append("t, T1.VehicleReservation_RecLastUpdatedBy, T1.VehicleReservation_NRTMainId, T1.V");
            viewString.Append("ehicleReservation_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Veh");
            viewString.Append("icleReservationID AS VehicleReservation_VehicleReservationId, \r\n            T.St");
            viewString.Append("artDtTime AS VehicleReservation_StartDtTime, \r\n            T.EndDtTime AS Vehicl");
            viewString.Append("eReservation_EndDtTime, \r\n            T.BookingMainID AS VehicleReservation_Book");
            viewString.Append("ingMainId, \r\n            T.VehicleID AS VehicleReservation_VehicleId, \r\n        ");
            viewString.Append("    T.RAMainID AS VehicleReservation_RAMainId, \r\n            T.VehicleReservatio");
            viewString.Append("nDescription AS VehicleReservation_VehicleReservationDescription, \r\n            ");
            viewString.Append("T.RowVersion AS VehicleReservation_RowVersion, \r\n            T.IsActive AS Vehic");
            viewString.Append("leReservation_IsActive, \r\n            T.IsDeleted AS VehicleReservation_IsDelete");
            viewString.Append("d, \r\n            T.IsPrivate AS VehicleReservation_IsPrivate, \r\n            T.Is");
            viewString.Append("ReadOnly AS VehicleReservation_IsReadOnly, \r\n            T.RecCreatedDt AS Vehic");
            viewString.Append("leReservation_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleReservation_R");
            viewString.Append("ecCreatedBy, \r\n            T.RecLastUpdatedDt AS VehicleReservation_RecLastUpdat");
            viewString.Append("edDt, \r\n            T.RecLastUpdatedBy AS VehicleReservation_RecLastUpdatedBy, \r");
            viewString.Append("\n            T.NRTMainID AS VehicleReservation_NRTMainId, \r\n            T.UserDo");
            viewString.Append("mainKey AS VehicleReservation_UserDomainKey, \r\n            True AS _from0\r\n     ");
            viewString.Append("   FROM CaresModelStoreContainer.VehicleReservation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleReservations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleStatus1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView122()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleStatus1", "\r\n    SELECT VALUE -- Constructing VehicleStatus1\r\n        [DomainModels.VehicleS" +
                    "tatus](T1.VehicleStatus_VehicleStatusId, T1.VehicleStatus_VehicleStatusCode, T1." +
                    "VehicleStatus_VehicleStatusName, T1.VehicleStatus_VehicleStatusDescription, T1.V" +
                    "ehicleStatus_VehicleStatusKey, T1.VehicleStatus_AvailabilityCheck, T1.VehicleSta" +
                    "tus_IsActive, T1.VehicleStatus_IsDeleted, T1.VehicleStatus_IsReadOnly, T1.Vehicl" +
                    "eStatus_IsPrivate, T1.VehicleStatus_RecCreatedDt, T1.VehicleStatus_RecCreatedBy," +
                    " T1.VehicleStatus_RecLastUpdatedBy, T1.VehicleStatus_RecLastUpdatedDt, T1.Vehicl" +
                    "eStatus_RowVersion, T1.VehicleStatus_UserDomainKey)\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.VehicleStatusID AS VehicleStatus_VehicleStatusId, \r\n            " +
                    "T.VehicleStatusCode AS VehicleStatus_VehicleStatusCode, \r\n            T.VehicleS" +
                    "tatusName AS VehicleStatus_VehicleStatusName, \r\n            T.VehicleStatusDescr" +
                    "iption AS VehicleStatus_VehicleStatusDescription, \r\n            T.VehicleStatusK" +
                    "ey AS VehicleStatus_VehicleStatusKey, \r\n            T.AvailabilityCheck AS Vehic" +
                    "leStatus_AvailabilityCheck, \r\n            T.IsActive AS VehicleStatus_IsActive, " +
                    "\r\n            T.IsDeleted AS VehicleStatus_IsDeleted, \r\n            T.IsReadOnly" +
                    " AS VehicleStatus_IsReadOnly, \r\n            T.IsPrivate AS VehicleStatus_IsPriva" +
                    "te, \r\n            T.RecCreatedDt AS VehicleStatus_RecCreatedDt, \r\n            T." +
                    "RecCreatedBy AS VehicleStatus_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS " +
                    "VehicleStatus_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleStatu" +
                    "s_RecLastUpdatedDt, \r\n            T.RowVersion AS VehicleStatus_RowVersion, \r\n  " +
                    "          T.UserDomainKey AS VehicleStatus_UserDomainKey, \r\n            True AS " +
                    "_from0\r\n        FROM CaresModelStoreContainer.VehicleStatus AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleSubStatus1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView123()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleSubStatus1", "\r\n    SELECT VALUE -- Constructing VehicleSubStatus1\r\n        [DomainModels.Vehic" +
                    "leSubStatus](T1.VehicleSubStatus_VehicleSubStatusId, T1.VehicleSubStatus_Vehicle" +
                    "StatusId, T1.VehicleSubStatus_VehicleSubStatusCode, T1.VehicleSubStatus_VehicleS" +
                    "ubStatusName, T1.VehicleSubStatus_VehicleSubStatusDescription, T1.VehicleSubStat" +
                    "us_IsActive, T1.VehicleSubStatus_IsDeleted, T1.VehicleSubStatus_IsReadOnly, T1.V" +
                    "ehicleSubStatus_IsPrivate, T1.VehicleSubStatus_RecCreatedDt, T1.VehicleSubStatus" +
                    "_RecCreatedBy, T1.VehicleSubStatus_RecLastUpdatedBy, T1.VehicleSubStatus_RecLast" +
                    "UpdatedDt, T1.VehicleSubStatus_RowVersion, T1.VehicleSubStatus_UserDomainKey)\r\n " +
                    "   FROM (\r\n        SELECT \r\n            T.VehicleSubStatusID AS VehicleSubStatus" +
                    "_VehicleSubStatusId, \r\n            T.VehicleStatusID AS VehicleSubStatus_Vehicle" +
                    "StatusId, \r\n            T.VehicleSubStatusCode AS VehicleSubStatus_VehicleSubSta" +
                    "tusCode, \r\n            T.VehicleSubStatusName AS VehicleSubStatus_VehicleSubStat" +
                    "usName, \r\n            T.VehicleSubStatusDescription AS VehicleSubStatus_VehicleS" +
                    "ubStatusDescription, \r\n            T.IsActive AS VehicleSubStatus_IsActive, \r\n  " +
                    "          T.IsDeleted AS VehicleSubStatus_IsDeleted, \r\n            T.IsReadOnly " +
                    "AS VehicleSubStatus_IsReadOnly, \r\n            T.IsPrivate AS VehicleSubStatus_Is" +
                    "Private, \r\n            T.RecCreatedDt AS VehicleSubStatus_RecCreatedDt, \r\n      " +
                    "      T.RecCreatedBy AS VehicleSubStatus_RecCreatedBy, \r\n            T.RecLastUp" +
                    "datedBy AS VehicleSubStatus_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt A" +
                    "S VehicleSubStatus_RecLastUpdatedDt, \r\n            T.RowVersion AS VehicleSubSta" +
                    "tus_RowVersion, \r\n            T.UserDomainKey AS VehicleSubStatus_UserDomainKey," +
                    " \r\n            True AS _from0\r\n        FROM CaresModelStoreContainer.VehicleSubS" +
                    "tatus AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.WorkLocations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView124()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.WorkLocations", "\r\n    SELECT VALUE -- Constructing WorkLocations\r\n        [DomainModels.WorkLocat" +
                    "ion](T1.WorkLocation_WorkLocationId, T1.WorkLocation_WorkLocationCode, T1.WorkLo" +
                    "cation_WorkLocationName, T1.WorkLocation_WorkLocationDescription, T1.WorkLocatio" +
                    "n_CompanyId, T1.WorkLocation_RowVersion, T1.WorkLocation_IsActive, T1.WorkLocati" +
                    "on_IsDeleted, T1.WorkLocation_IsPrivate, T1.WorkLocation_IsReadOnly, T1.WorkLoca" +
                    "tion_RecCreatedDt, T1.WorkLocation_RecCreatedBy, T1.WorkLocation_RecLastUpdatedD" +
                    "t, T1.WorkLocation_RecLastUpdatedBy, T1.WorkLocation_UserDomainKey, T1.WorkLocat" +
                    "ion_AddressId)\r\n    FROM (\r\n        SELECT \r\n            T.WorkLocationID AS Wor" +
                    "kLocation_WorkLocationId, \r\n            T.WorkLocationCode AS WorkLocation_WorkL" +
                    "ocationCode, \r\n            T.WorkLocationName AS WorkLocation_WorkLocationName, " +
                    "\r\n            T.WorkLocationDescription AS WorkLocation_WorkLocationDescription," +
                    " \r\n            T.CompanyID AS WorkLocation_CompanyId, \r\n            T.RowVersion" +
                    " AS WorkLocation_RowVersion, \r\n            T.IsActive AS WorkLocation_IsActive, " +
                    "\r\n            T.IsDeleted AS WorkLocation_IsDeleted, \r\n            T.IsPrivate A" +
                    "S WorkLocation_IsPrivate, \r\n            T.IsReadOnly AS WorkLocation_IsReadOnly," +
                    " \r\n            T.RecCreatedDt AS WorkLocation_RecCreatedDt, \r\n            T.RecC" +
                    "reatedBy AS WorkLocation_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS WorkL" +
                    "ocation_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS WorkLocation_RecLa" +
                    "stUpdatedBy, \r\n            T.UserDomainKey AS WorkLocation_UserDomainKey, \r\n    " +
                    "        T.AddressID AS WorkLocation_AddressId, \r\n            True AS _from0\r\n   " +
                    "     FROM CaresModelStoreContainer.WorkLocation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.WorkPlaces1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView125()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.WorkPlaces1", "\r\n    SELECT VALUE -- Constructing WorkPlaces1\r\n        [DomainModels.WorkPlace](" +
                    "T1.WorkPlace_WorkPlaceId, T1.WorkPlace_WorkPlaceCode, T1.WorkPlace_WorkPlaceName" +
                    ", T1.WorkPlace_WorkPlaceDescription, T1.WorkPlace_ParentWorkPlaceId, T1.WorkPlac" +
                    "e_WorkPlaceTypeId, T1.WorkPlace_WorkLocationId, T1.WorkPlace_RowVersion, T1.Work" +
                    "Place_IsActive, T1.WorkPlace_IsDeleted, T1.WorkPlace_IsPrivate, T1.WorkPlace_IsR" +
                    "eadOnly, T1.WorkPlace_RecCreatedDt, T1.WorkPlace_RecCreatedBy, T1.WorkPlace_RecL" +
                    "astUpdatedDt, T1.WorkPlace_RecLastUpdatedBy, T1.WorkPlace_UserDomainKey)\r\n    FR" +
                    "OM (\r\n        SELECT \r\n            T.WorkplaceID AS WorkPlace_WorkPlaceId, \r\n   " +
                    "         T.WorkplaceCode AS WorkPlace_WorkPlaceCode, \r\n            T.WorkplaceNa" +
                    "me AS WorkPlace_WorkPlaceName, \r\n            T.WorkplaceDescription AS WorkPlace" +
                    "_WorkPlaceDescription, \r\n            T.ParentWorkplaceID AS WorkPlace_ParentWork" +
                    "PlaceId, \r\n            T.WorkplaceTypeID AS WorkPlace_WorkPlaceTypeId, \r\n       " +
                    "     T.WorkLocationID AS WorkPlace_WorkLocationId, \r\n            T.RowVersion AS" +
                    " WorkPlace_RowVersion, \r\n            T.IsActive AS WorkPlace_IsActive, \r\n       " +
                    "     T.IsDeleted AS WorkPlace_IsDeleted, \r\n            T.IsPrivate AS WorkPlace_" +
                    "IsPrivate, \r\n            T.IsReadOnly AS WorkPlace_IsReadOnly, \r\n            T.R" +
                    "ecCreatedDt AS WorkPlace_RecCreatedDt, \r\n            T.RecCreatedBy AS WorkPlace" +
                    "_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS WorkPlace_RecLastUpdatedDt, \r" +
                    "\n            T.RecLastUpdatedBy AS WorkPlace_RecLastUpdatedBy, \r\n            T.U" +
                    "serDomainKey AS WorkPlace_UserDomainKey, \r\n            True AS _from0\r\n        F" +
                    "ROM CaresModelStoreContainer.Workplace AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.WorkPlaceTypes1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView126()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.WorkPlaceTypes1", "\r\n    SELECT VALUE -- Constructing WorkPlaceTypes1\r\n        [DomainModels.WorkPla" +
                    "ceType](T1.WorkPlaceType_WorkPlaceTypeId, T1.WorkPlaceType_WorkPlaceTypeCode, T1" +
                    ".WorkPlaceType_WorkPlaceTypeName, T1.WorkPlaceType_WorkPlaceTypeDescription, T1." +
                    "WorkPlaceType_WorkPlaceTypeCat, T1.WorkPlaceType_RowVersion, T1.WorkPlaceType_Is" +
                    "Active, T1.WorkPlaceType_IsDeleted, T1.WorkPlaceType_IsPrivate, T1.WorkPlaceType" +
                    "_IsReadOnly, T1.WorkPlaceType_RecCreatedDt, T1.WorkPlaceType_RecCreatedBy, T1.Wo" +
                    "rkPlaceType_RecLastUpdatedDt, T1.WorkPlaceType_RecLastUpdatedBy, T1.WorkPlaceTyp" +
                    "e_UserDomainKey, T1.WorkPlaceType_WorkPlaceNature)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.WorkplaceTypeID AS WorkPlaceType_WorkPlaceTypeId, \r\n            T" +
                    ".WorkplaceTypeCode AS WorkPlaceType_WorkPlaceTypeCode, \r\n            T.Workplace" +
                    "TypeName AS WorkPlaceType_WorkPlaceTypeName, \r\n            T.WorkplaceTypeDescri" +
                    "ption AS WorkPlaceType_WorkPlaceTypeDescription, \r\n            T.WorkplaceTypeCa" +
                    "t AS WorkPlaceType_WorkPlaceTypeCat, \r\n            T.RowVersion AS WorkPlaceType" +
                    "_RowVersion, \r\n            T.IsActive AS WorkPlaceType_IsActive, \r\n            T" +
                    ".IsDeleted AS WorkPlaceType_IsDeleted, \r\n            T.IsPrivate AS WorkPlaceTyp" +
                    "e_IsPrivate, \r\n            T.IsReadOnly AS WorkPlaceType_IsReadOnly, \r\n         " +
                    "   T.RecCreatedDt AS WorkPlaceType_RecCreatedDt, \r\n            T.RecCreatedBy AS" +
                    " WorkPlaceType_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS WorkPlaceType_R" +
                    "ecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS WorkPlaceType_RecLastUpdate" +
                    "dBy, \r\n            T.UserDomainKey AS WorkPlaceType_UserDomainKey, \r\n           " +
                    " T.WorkplaceTypeNature AS WorkPlaceType_WorkPlaceNature, \r\n            True AS _" +
                    "from0\r\n        FROM CaresModelStoreContainer.WorkplaceType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.HireGroupUpGrades
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView127()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.HireGroupUpGrades", "\r\n    SELECT VALUE -- Constructing HireGroupUpGrades\r\n        [DomainModels.HireG" +
                    "roupUpGrade](T1.HireGroupUpGrade_HireGroupUpGradeId, T1.HireGroupUpGrade_HireGro" +
                    "upId, T1.HireGroupUpGrade_AllowedHireGroupId, T1.HireGroupUpGrade_RowVersion, T1" +
                    ".HireGroupUpGrade_IsActive, T1.HireGroupUpGrade_IsDeleted, T1.HireGroupUpGrade_I" +
                    "sReadOnly, T1.HireGroupUpGrade_IsPrivate, T1.HireGroupUpGrade_RecCreatedDt, T1.H" +
                    "ireGroupUpGrade_RecCreatedBy, T1.HireGroupUpGrade_RecLastUpdatedBy, T1.HireGroup" +
                    "UpGrade_RecLastUpdatedDt, T1.HireGroupUpGrade_UserDomainKey)\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.HireGroupUpGradeID AS HireGroupUpGrade_HireGroupUpGrade" +
                    "Id, \r\n            T.HireGroupID AS HireGroupUpGrade_HireGroupId, \r\n            T" +
                    ".AllowedHireGroupID AS HireGroupUpGrade_AllowedHireGroupId, \r\n            T.RowV" +
                    "ersion AS HireGroupUpGrade_RowVersion, \r\n            T.IsActive AS HireGroupUpGr" +
                    "ade_IsActive, \r\n            T.IsDeleted AS HireGroupUpGrade_IsDeleted, \r\n       " +
                    "     T.IsReadOnly AS HireGroupUpGrade_IsReadOnly, \r\n            T.IsPrivate AS H" +
                    "ireGroupUpGrade_IsPrivate, \r\n            T.RecCreatedDt AS HireGroupUpGrade_RecC" +
                    "reatedDt, \r\n            T.RecCreatedBy AS HireGroupUpGrade_RecCreatedBy, \r\n     " +
                    "       T.RecLastUpdatedBy AS HireGroupUpGrade_RecLastUpdatedBy, \r\n            T." +
                    "RecLastUpdatedDt AS HireGroupUpGrade_RecLastUpdatedDt, \r\n            T.UserDomai" +
                    "nKey AS HireGroupUpGrade_UserDomainKey, \r\n            True AS _from0\r\n        FR" +
                    "OM CaresModelStoreContainer.HireGroupUpGrade AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InsuranceRts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView128()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InsuranceRts", "\r\n    SELECT VALUE -- Constructing InsuranceRts\r\n        [DomainModels.InsuranceR" +
                    "t](T1.InsuranceRt_InsuranceRtId, T1.InsuranceRt_ChildInsuranceRtId, T1.Insurance" +
                    "Rt_InsuranceRtMainId, T1.InsuranceRt_InsuranceTypeId, T1.InsuranceRt_HireGroupDe" +
                    "tailId, T1.InsuranceRt_InsuranceRate, T1.InsuranceRt_StartDt, T1.InsuranceRt_IsA" +
                    "ctive, T1.InsuranceRt_RevisionNumber, T1.InsuranceRt_IsDeleted, T1.InsuranceRt_I" +
                    "sPrivate, T1.InsuranceRt_IsReadOnly, T1.InsuranceRt_RowVersion, T1.InsuranceRt_R" +
                    "ecCreatedDt, T1.InsuranceRt_RecLastUpdatedDt, T1.InsuranceRt_RecLastUpdatedBy, T" +
                    "1.InsuranceRt_RecCreatedBy, T1.InsuranceRt_UserDomainKey)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.InsuranceRtID AS InsuranceRt_InsuranceRtId, \r\n            " +
                    "T.ChildInsuranceRtID AS InsuranceRt_ChildInsuranceRtId, \r\n            T.Insuranc" +
                    "eRtMainID AS InsuranceRt_InsuranceRtMainId, \r\n            T.InsuranceTypeID AS I" +
                    "nsuranceRt_InsuranceTypeId, \r\n            T.HireGroupDetailID AS InsuranceRt_Hir" +
                    "eGroupDetailId, \r\n            T.InsuranceRate AS InsuranceRt_InsuranceRate, \r\n  " +
                    "          T.StartDt AS InsuranceRt_StartDt, \r\n            T.IsActive AS Insuranc" +
                    "eRt_IsActive, \r\n            T.RevisionNumber AS InsuranceRt_RevisionNumber, \r\n  " +
                    "          T.IsDeleted AS InsuranceRt_IsDeleted, \r\n            T.IsPrivate AS Ins" +
                    "uranceRt_IsPrivate, \r\n            T.IsReadOnly AS InsuranceRt_IsReadOnly, \r\n    " +
                    "        T.RowVersion AS InsuranceRt_RowVersion, \r\n            T.RecCreatedDt AS " +
                    "InsuranceRt_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS InsuranceRt_RecLas" +
                    "tUpdatedDt, \r\n            T.RecLastUpdatedBy AS InsuranceRt_RecLastUpdatedBy, \r\n" +
                    "            T.RecCreatedBy AS InsuranceRt_RecCreatedBy, \r\n            T.UserDoma" +
                    "inKey AS InsuranceRt_UserDomainKey, \r\n            True AS _from0\r\n        FROM C" +
                    "aresModelStoreContainer.InsuranceRt AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InsuranceRtMains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView129()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InsuranceRtMains", "\r\n    SELECT VALUE -- Constructing InsuranceRtMains\r\n        [DomainModels.Insura" +
                    "nceRtMain](T1.InsuranceRtMain_InsuranceRtMainId, T1.InsuranceRtMain_TariffTypeCo" +
                    "de, T1.InsuranceRtMain_InsuranceRtMainCode, T1.InsuranceRtMain_InsuranceRtMainNa" +
                    "me, T1.InsuranceRtMain_InsuranceRtMainDescription, T1.InsuranceRtMain_StartDt, T" +
                    "1.InsuranceRtMain_RowVersion, T1.InsuranceRtMain_IsActive, T1.InsuranceRtMain_Is" +
                    "Deleted, T1.InsuranceRtMain_IsPrivate, T1.InsuranceRtMain_IsReadOnly, T1.Insuran" +
                    "ceRtMain_RecCreatedDt, T1.InsuranceRtMain_RecLastUpdatedDt, T1.InsuranceRtMain_R" +
                    "ecCreatedBy, T1.InsuranceRtMain_RecLastUpdatedBy, T1.InsuranceRtMain_UserDomainK" +
                    "ey)\r\n    FROM (\r\n        SELECT \r\n            T.InsuranceRtMainID AS InsuranceRt" +
                    "Main_InsuranceRtMainId, \r\n            T.TariffTypeCode AS InsuranceRtMain_Tariff" +
                    "TypeCode, \r\n            T.InsuranceRtMainCode AS InsuranceRtMain_InsuranceRtMain" +
                    "Code, \r\n            T.InsuranceRtMainName AS InsuranceRtMain_InsuranceRtMainName" +
                    ", \r\n            T.InsuranceRtMainDescription AS InsuranceRtMain_InsuranceRtMainD" +
                    "escription, \r\n            T.StartDt AS InsuranceRtMain_StartDt, \r\n            T." +
                    "RowVersion AS InsuranceRtMain_RowVersion, \r\n            T.IsActive AS InsuranceR" +
                    "tMain_IsActive, \r\n            T.IsDeleted AS InsuranceRtMain_IsDeleted, \r\n      " +
                    "      T.IsPrivate AS InsuranceRtMain_IsPrivate, \r\n            T.IsReadOnly AS In" +
                    "suranceRtMain_IsReadOnly, \r\n            T.RecCreatedDt AS InsuranceRtMain_RecCre" +
                    "atedDt, \r\n            T.RecLastUpdatedDt AS InsuranceRtMain_RecLastUpdatedDt, \r\n" +
                    "            T.RecCreatedBy AS InsuranceRtMain_RecCreatedBy, \r\n            T.RecL" +
                    "astUpdatedBy AS InsuranceRtMain_RecLastUpdatedBy, \r\n            T.UserDomainKey " +
                    "AS InsuranceRtMain_UserDomainKey, \r\n            True AS _from0\r\n        FROM Car" +
                    "esModelStoreContainer.InsuranceRtMain AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InsuranceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView130()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InsuranceTypes", "\r\n    SELECT VALUE -- Constructing InsuranceTypes\r\n        [DomainModels.Insuranc" +
                    "eType](T1.InsuranceType_InsuranceTypeId, T1.InsuranceType_InsuranceTypeCode, T1." +
                    "InsuranceType_InsuranceTypeName, T1.InsuranceType_InsuranceTypeDescription, T1.I" +
                    "nsuranceType_IsActive, T1.InsuranceType_IsDeleted, T1.InsuranceType_IsReadOnly, " +
                    "T1.InsuranceType_IsPrivate, T1.InsuranceType_RecCreatedDt, T1.InsuranceType_RecC" +
                    "reatedBy, T1.InsuranceType_RecLastUpdatedBy, T1.InsuranceType_RecLastUpdatedDt, " +
                    "T1.InsuranceType_RowVersion, T1.InsuranceType_UserDomainKey)\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.InsuranceTypeID AS InsuranceType_InsuranceTypeId, \r\n   " +
                    "         T.InsuranceTypeCode AS InsuranceType_InsuranceTypeCode, \r\n            T" +
                    ".InsuranceTypeName AS InsuranceType_InsuranceTypeName, \r\n            T.Insurance" +
                    "TypeDescription AS InsuranceType_InsuranceTypeDescription, \r\n            T.IsAct" +
                    "ive AS InsuranceType_IsActive, \r\n            T.IsDeleted AS InsuranceType_IsDele" +
                    "ted, \r\n            T.IsReadOnly AS InsuranceType_IsReadOnly, \r\n            T.IsP" +
                    "rivate AS InsuranceType_IsPrivate, \r\n            T.RecCreatedDt AS InsuranceType" +
                    "_RecCreatedDt, \r\n            T.RecCreatedBy AS InsuranceType_RecCreatedBy, \r\n   " +
                    "         T.RecLastUpdatedBy AS InsuranceType_RecLastUpdatedBy, \r\n            T.R" +
                    "ecLastUpdatedDt AS InsuranceType_RecLastUpdatedDt, \r\n            T.RowVersion AS" +
                    " InsuranceType_RowVersion, \r\n            T.UserDomainKey AS InsuranceType_UserDo" +
                    "mainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContainer.Ins" +
                    "uranceType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.JobTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView131()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.JobTypes", @"
    SELECT VALUE -- Constructing JobTypes
        [DomainModels.JobType](T1.JobType_JobTypeId, T1.JobType_JobTypeCode, T1.JobType_JobTypeName, T1.JobType_JobTypeDescription, T1.JobType_RowVersion, T1.JobType_IsActive, T1.JobType_IsPrivate, T1.JobType_IsDeleted, T1.JobType_IsReadOnly, T1.JobType_RecCreatedDt, T1.JobType_RecCreatedBy, T1.JobType_RecLastUpdatedDt, T1.JobType_RecLastUpdatedBy, T1.JobType_UserDomainKey)
    FROM (
        SELECT 
            T.JobTypeID AS JobType_JobTypeId, 
            T.JobTypeCode AS JobType_JobTypeCode, 
            T.JobTypeName AS JobType_JobTypeName, 
            T.JobTypeDescription AS JobType_JobTypeDescription, 
            T.RowVersion AS JobType_RowVersion, 
            T.IsActive AS JobType_IsActive, 
            T.IsPrivate AS JobType_IsPrivate, 
            T.IsDeleted AS JobType_IsDeleted, 
            T.IsReadOnly AS JobType_IsReadOnly, 
            T.RecCreatedDt AS JobType_RecCreatedDt, 
            T.RecCreatedBy AS JobType_RecCreatedBy, 
            T.RecLastUpdatedDt AS JobType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS JobType_RecLastUpdatedBy, 
            T.UserDomainKey AS JobType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.JobType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.LicenseTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView132()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.LicenseTypes", @"
    SELECT VALUE -- Constructing LicenseTypes
        [DomainModels.LicenseType](T1.LicenseType_LicenseTypeId, T1.LicenseType_LicenseTypeCode, T1.LicenseType_LicenseTypeName, T1.LicenseType_LicenseTypeDescription, T1.LicenseType_RowVersion, T1.LicenseType_IsActive, T1.LicenseType_IsPrivate, T1.LicenseType_IsDeleted, T1.LicenseType_IsReadOnly, T1.LicenseType_RecCreatedDt, T1.LicenseType_RecCreatedBy, T1.LicenseType_RecLastUpdatedDt, T1.LicenseType_RecLastUpdatedBy, T1.LicenseType_UserDomainKey)
    FROM (
        SELECT 
            T.LicenseTypeID AS LicenseType_LicenseTypeId, 
            T.LicenseTypeCode AS LicenseType_LicenseTypeCode, 
            T.LicenseTypeName AS LicenseType_LicenseTypeName, 
            T.LicenseTypeDescription AS LicenseType_LicenseTypeDescription, 
            T.RowVersion AS LicenseType_RowVersion, 
            T.IsActive AS LicenseType_IsActive, 
            T.IsPrivate AS LicenseType_IsPrivate, 
            T.IsDeleted AS LicenseType_IsDeleted, 
            T.IsReadOnly AS LicenseType_IsReadOnly, 
            T.RecCreatedDt AS LicenseType_RecCreatedDt, 
            T.RecCreatedBy AS LicenseType_RecCreatedBy, 
            T.RecLastUpdatedDt AS LicenseType_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS LicenseType_RecLastUpdatedBy, 
            T.UserDomainKey AS LicenseType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.LicenseType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MaintenanceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView133()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MaintenanceTypes", "\r\n    SELECT VALUE -- Constructing MaintenanceTypes\r\n        [DomainModels.Mainte" +
                    "nanceType](T1.MaintenanceType_MaintenanceTypeId, T1.MaintenanceType_MaintenanceT" +
                    "ypeGroupId, T1.MaintenanceType_MaintenanceTypeCode, T1.MaintenanceType_Maintenan" +
                    "ceTypeName, T1.MaintenanceType_MaintenanceTypeDescription, T1.MaintenanceType_Is" +
                    "Active, T1.MaintenanceType_IsDeleted, T1.MaintenanceType_IsReadOnly, T1.Maintena" +
                    "nceType_IsPrivate, T1.MaintenanceType_RecCreatedDt, T1.MaintenanceType_RecCreate" +
                    "dBy, T1.MaintenanceType_RecLastUpdatedBy, T1.MaintenanceType_RecLastUpdatedDt, T" +
                    "1.MaintenanceType_RowVersion, T1.MaintenanceType_UserDomainKey)\r\n    FROM (\r\n   " +
                    "     SELECT \r\n            T.MaintenanceTypeID AS MaintenanceType_MaintenanceType" +
                    "Id, \r\n            T.MaintenanceTypeGroupID AS MaintenanceType_MaintenanceTypeGro" +
                    "upId, \r\n            T.MaintenanceTypeCode AS MaintenanceType_MaintenanceTypeCode" +
                    ", \r\n            T.MaintenanceTypeName AS MaintenanceType_MaintenanceTypeName, \r\n" +
                    "            T.MaintenanceTypeDescription AS MaintenanceType_MaintenanceTypeDescr" +
                    "iption, \r\n            T.IsActive AS MaintenanceType_IsActive, \r\n            T.Is" +
                    "Deleted AS MaintenanceType_IsDeleted, \r\n            T.IsReadOnly AS MaintenanceT" +
                    "ype_IsReadOnly, \r\n            T.IsPrivate AS MaintenanceType_IsPrivate, \r\n      " +
                    "      T.RecCreatedDt AS MaintenanceType_RecCreatedDt, \r\n            T.RecCreated" +
                    "By AS MaintenanceType_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS Maintena" +
                    "nceType_RecLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS MaintenanceType_Re" +
                    "cLastUpdatedDt, \r\n            T.RowVersion AS MaintenanceType_RowVersion, \r\n    " +
                    "        T.UserDomainKey AS MaintenanceType_UserDomainKey, \r\n            True AS " +
                    "_from0\r\n        FROM CaresModelStoreContainer.MaintenanceType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MaintenanceTypeGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView134()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MaintenanceTypeGroups", "\r\n    SELECT VALUE -- Constructing MaintenanceTypeGroups\r\n        [DomainModels.M" +
                    "aintenanceTypeGroup](T1.MaintenanceTypeGroup_MaintenanceTypeGroupId, T1.Maintena" +
                    "nceTypeGroup_MaintenanceTypeGroupCode, T1.MaintenanceTypeGroup_MaintenanceTypeGr" +
                    "oupName, T1.MaintenanceTypeGroup_MaintenanceTypeGroupDescription, T1.Maintenance" +
                    "TypeGroup_IsActive, T1.MaintenanceTypeGroup_IsDeleted, T1.MaintenanceTypeGroup_I" +
                    "sReadOnly, T1.MaintenanceTypeGroup_IsPrivate, T1.MaintenanceTypeGroup_RecCreated" +
                    "Dt, T1.MaintenanceTypeGroup_RecCreatedBy, T1.MaintenanceTypeGroup_RecLastUpdated" +
                    "By, T1.MaintenanceTypeGroup_RecLastUpdatedDt, T1.MaintenanceTypeGroup_RowVersion" +
                    ", T1.MaintenanceTypeGroup_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.MaintenanceTypeGroupID AS MaintenanceTypeGroup_MaintenanceTypeGroupId, \r\n  " +
                    "          T.MaintenanceTypeGroupCode AS MaintenanceTypeGroup_MaintenanceTypeGrou" +
                    "pCode, \r\n            T.MaintenanceTypeGroupName AS MaintenanceTypeGroup_Maintena" +
                    "nceTypeGroupName, \r\n            T.MaintenanceTypeGroupDescription AS Maintenance" +
                    "TypeGroup_MaintenanceTypeGroupDescription, \r\n            T.IsActive AS Maintenan" +
                    "ceTypeGroup_IsActive, \r\n            T.IsDeleted AS MaintenanceTypeGroup_IsDelete" +
                    "d, \r\n            T.IsReadOnly AS MaintenanceTypeGroup_IsReadOnly, \r\n            " +
                    "T.IsPrivate AS MaintenanceTypeGroup_IsPrivate, \r\n            T.RecCreatedDt AS M" +
                    "aintenanceTypeGroup_RecCreatedDt, \r\n            T.RecCreatedBy AS MaintenanceTyp" +
                    "eGroup_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS MaintenanceTypeGroup_Re" +
                    "cLastUpdatedBy, \r\n            T.RecLastUpdatedDt AS MaintenanceTypeGroup_RecLast" +
                    "UpdatedDt, \r\n            T.RowVersion AS MaintenanceTypeGroup_RowVersion, \r\n    " +
                    "        T.UserDomainKey AS MaintenanceTypeGroup_UserDomainKey, \r\n            Tru" +
                    "e AS _from0\r\n        FROM CaresModelStoreContainer.MaintenanceTypeGroup AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MarketingChannels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView135()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MarketingChannels", "\r\n    SELECT VALUE -- Constructing MarketingChannels\r\n        [DomainModels.Marke" +
                    "tingChannel](T1.MarketingChannel_MarketingChannelId, T1.MarketingChannel_Marketi" +
                    "ngChannelCode, T1.MarketingChannel_MarketingChannelName, T1.MarketingChannel_Mar" +
                    "ketingChannelDescription, T1.MarketingChannel_RowVersion, T1.MarketingChannel_Is" +
                    "Active, T1.MarketingChannel_IsDeleted, T1.MarketingChannel_IsPrivate, T1.Marketi" +
                    "ngChannel_IsReadOnly, T1.MarketingChannel_RecCreatedDt, T1.MarketingChannel_RecC" +
                    "reatedBy, T1.MarketingChannel_RecLastUpdatedDt, T1.MarketingChannel_RecLastUpdat" +
                    "edBy, T1.MarketingChannel_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.MarketingChannelID AS MarketingChannel_MarketingChannelId, \r\n            T." +
                    "MarketingChannelCode AS MarketingChannel_MarketingChannelCode, \r\n            T.M" +
                    "arketingChannelName AS MarketingChannel_MarketingChannelName, \r\n            T.Ma" +
                    "rketingChannelDescription AS MarketingChannel_MarketingChannelDescription, \r\n   " +
                    "         T.RowVersion AS MarketingChannel_RowVersion, \r\n            T.IsActive A" +
                    "S MarketingChannel_IsActive, \r\n            T.IsDeleted AS MarketingChannel_IsDel" +
                    "eted, \r\n            T.IsPrivate AS MarketingChannel_IsPrivate, \r\n            T.I" +
                    "sReadOnly AS MarketingChannel_IsReadOnly, \r\n            T.RecCreatedDt AS Market" +
                    "ingChannel_RecCreatedDt, \r\n            T.RecCreatedBy AS MarketingChannel_RecCre" +
                    "atedBy, \r\n            T.RecLastUpdatedDt AS MarketingChannel_RecLastUpdatedDt, \r" +
                    "\n            T.RecLastUpdatedBy AS MarketingChannel_RecLastUpdatedBy, \r\n        " +
                    "    T.UserDomainKey AS MarketingChannel_UserDomainKey, \r\n            True AS _fr" +
                    "om0\r\n        FROM CaresModelStoreContainer.MarketingChannel AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MeasurementUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView136()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MeasurementUnits", "\r\n    SELECT VALUE -- Constructing MeasurementUnits\r\n        [DomainModels.Measur" +
                    "ementUnit](T1.MeasurementUnit_MeasurementUnitId, T1.MeasurementUnit_MeasurementU" +
                    "nitCode, T1.MeasurementUnit_MeasurementUnitName, T1.MeasurementUnit_MeasurementU" +
                    "nitDescription, T1.MeasurementUnit_MeasurementUnitKey, T1.MeasurementUnit_RowVer" +
                    "sion, T1.MeasurementUnit_RecCreatedDt, T1.MeasurementUnit_RecLastUpdatedDt, T1.M" +
                    "easurementUnit_RecLastUpdatedBy, T1.MeasurementUnit_RecCreatedBy, T1.Measurement" +
                    "Unit_IsActive, T1.MeasurementUnit_IsDeleted, T1.MeasurementUnit_IsPrivate, T1.Me" +
                    "asurementUnit_IsReadOnly, T1.MeasurementUnit_UserDomainKey)\r\n    FROM (\r\n       " +
                    " SELECT \r\n            T.MeasurementUnitID AS MeasurementUnit_MeasurementUnitId, " +
                    "\r\n            T.MeasurementUnitCode AS MeasurementUnit_MeasurementUnitCode, \r\n  " +
                    "          T.MeasurementUnitName AS MeasurementUnit_MeasurementUnitName, \r\n      " +
                    "      T.MeasurementUnitDescription AS MeasurementUnit_MeasurementUnitDescription" +
                    ", \r\n            T.MeasurementUnitKey AS MeasurementUnit_MeasurementUnitKey, \r\n  " +
                    "          T.RowVersion AS MeasurementUnit_RowVersion, \r\n            T.RecCreated" +
                    "Dt AS MeasurementUnit_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS Measurem" +
                    "entUnit_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS MeasurementUnit_Re" +
                    "cLastUpdatedBy, \r\n            T.RecCreatedBy AS MeasurementUnit_RecCreatedBy, \r\n" +
                    "            T.IsActive AS MeasurementUnit_IsActive, \r\n            T.IsDeleted AS" +
                    " MeasurementUnit_IsDeleted, \r\n            T.IsPrivate AS MeasurementUnit_IsPriva" +
                    "te, \r\n            T.IsReadOnly AS MeasurementUnit_IsReadOnly, \r\n            T.Us" +
                    "erDomainKey AS MeasurementUnit_UserDomainKey, \r\n            True AS _from0\r\n    " +
                    "    FROM CaresModelStoreContainer.MeasurementUnit AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.OccupationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView137()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.OccupationTypes", "\r\n    SELECT VALUE -- Constructing OccupationTypes\r\n        [DomainModels.Occupat" +
                    "ionType](T1.OccupationType_OccupationTypeId, T1.OccupationType_OccupationTypeCod" +
                    "e, T1.OccupationType_OccupationTypeName, T1.OccupationType_OccupationTypeDescrip" +
                    "tion, T1.OccupationType_RowVersion, T1.OccupationType_IsActive, T1.OccupationTyp" +
                    "e_IsDeleted, T1.OccupationType_IsPrivate, T1.OccupationType_IsReadOnly, T1.Occup" +
                    "ationType_RecCreatedDt, T1.OccupationType_RecCreatedBy, T1.OccupationType_RecLas" +
                    "tUpdatedDt, T1.OccupationType_RecLastUpdatedBy, T1.OccupationType_UserDomainKey)" +
                    "\r\n    FROM (\r\n        SELECT \r\n            T.OccupationTypeID AS OccupationType_" +
                    "OccupationTypeId, \r\n            T.OccupationTypeCode AS OccupationType_Occupatio" +
                    "nTypeCode, \r\n            T.OccupationTypeName AS OccupationType_OccupationTypeNa" +
                    "me, \r\n            T.OccupationTypeDescription AS OccupationType_OccupationTypeDe" +
                    "scription, \r\n            T.RowVersion AS OccupationType_RowVersion, \r\n          " +
                    "  T.IsActive AS OccupationType_IsActive, \r\n            T.IsDeleted AS Occupation" +
                    "Type_IsDeleted, \r\n            T.IsPrivate AS OccupationType_IsPrivate, \r\n       " +
                    "     T.IsReadOnly AS OccupationType_IsReadOnly, \r\n            T.RecCreatedDt AS " +
                    "OccupationType_RecCreatedDt, \r\n            T.RecCreatedBy AS OccupationType_RecC" +
                    "reatedBy, \r\n            T.RecLastUpdatedDt AS OccupationType_RecLastUpdatedDt, \r" +
                    "\n            T.RecLastUpdatedBy AS OccupationType_RecLastUpdatedBy, \r\n          " +
                    "  T.UserDomainKey AS OccupationType_UserDomainKey, \r\n            True AS _from0\r" +
                    "\n        FROM CaresModelStoreContainer.OccupationType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PricingStrategies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView138()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PricingStrategies", @"
    SELECT VALUE -- Constructing PricingStrategies
        [DomainModels.PricingStrategy](T1.PricingStrategy_PricingStrategyId, T1.PricingStrategy_PricingStrategyCode, T1.PricingStrategy_PricingStrategyName, T1.PricingStrategy_PricingStrategyDescription, T1.PricingStrategy_IsActive, T1.PricingStrategy_IsDeleted, T1.PricingStrategy_IsPrivate, T1.PricingStrategy_IsReadOnly, T1.PricingStrategy_UserDomainKey)
    FROM (
        SELECT 
            T.PricingStrategyID AS PricingStrategy_PricingStrategyId, 
            T.PricingStrategyCode AS PricingStrategy_PricingStrategyCode, 
            T.PricingStrategyName AS PricingStrategy_PricingStrategyName, 
            T.PricingStrategyDescription AS PricingStrategy_PricingStrategyDescription, 
            T.IsActive AS PricingStrategy_IsActive, 
            T.IsDeleted AS PricingStrategy_IsDeleted, 
            T.IsPrivate AS PricingStrategy_IsPrivate, 
            T.IsReadOnly AS PricingStrategy_IsReadOnly, 
            T.UserDomainKey AS PricingStrategy_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.PricingStrategy AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StandardRates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView139()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2064);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StandardRates\r\n        [DomainModels.Standard");
            viewString.Append("Rate](T1.StandardRate_StandardRtId, T1.StandardRate_ChildStandardRtId, T1.Standa");
            viewString.Append("rdRate_StandardRtMainId, T1.StandardRate_AllowedMileage, T1.StandardRate_ExcessM");
            viewString.Append("ileageChrg, T1.StandardRate_StandardRt, T1.StandardRate_RevisionNumber, T1.Stand");
            viewString.Append("ardRate_IsActive, T1.StandardRate_IsDeleted, T1.StandardRate_IsPrivate, T1.Stand");
            viewString.Append("ardRate_IsReadOnly, T1.StandardRate_RowVersion, T1.StandardRate_RecCreatedDt, T1");
            viewString.Append(".StandardRate_RecLastUpdatedDt, T1.StandardRate_RecCreatedBy, T1.StandardRate_Re");
            viewString.Append("cLastUpdatedBy, T1.StandardRate_HireGroupDetailId, T1.StandardRate_StandardRtEnd");
            viewString.Append("Dt, T1.StandardRate_StandardRtStartDt, T1.StandardRate_UserDomainKey)\r\n    FROM ");
            viewString.Append("(\r\n        SELECT \r\n            T.StandardRtID AS StandardRate_StandardRtId, \r\n ");
            viewString.Append("           T.ChildStandardRtID AS StandardRate_ChildStandardRtId, \r\n            ");
            viewString.Append("T.StandardRtMainID AS StandardRate_StandardRtMainId, \r\n            T.AllowedMile");
            viewString.Append("age AS StandardRate_AllowedMileage, \r\n            T.ExcessMileageChrg AS Standar");
            viewString.Append("dRate_ExcessMileageChrg, \r\n            T.StandardRate AS StandardRate_StandardRt");
            viewString.Append(", \r\n            T.RevisionNumber AS StandardRate_RevisionNumber, \r\n            T");
            viewString.Append(".IsActive AS StandardRate_IsActive, \r\n            T.IsDeleted AS StandardRate_Is");
            viewString.Append("Deleted, \r\n            T.IsPrivate AS StandardRate_IsPrivate, \r\n            T.Is");
            viewString.Append("ReadOnly AS StandardRate_IsReadOnly, \r\n            T.RowVersion AS StandardRate_");
            viewString.Append("RowVersion, \r\n            T.RecCreatedDt AS StandardRate_RecCreatedDt, \r\n       ");
            viewString.Append("     T.RecLastUpdatedDt AS StandardRate_RecLastUpdatedDt, \r\n            T.RecCre");
            viewString.Append("atedBy AS StandardRate_RecCreatedBy, \r\n            T.RecLastUpdatedBy AS Standar");
            viewString.Append("dRate_RecLastUpdatedBy, \r\n            T.HireGroupDetailID AS StandardRate_HireGr");
            viewString.Append("oupDetailId, \r\n            T.StandardRtEndDt AS StandardRate_StandardRtEndDt, \r\n");
            viewString.Append("            T.StandardRtStartDt AS StandardRate_StandardRtStartDt, \r\n           ");
            viewString.Append(" T.UserDomainKey AS StandardRate_UserDomainKey, \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM CaresModelStoreContainer.StandardRt AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StandardRates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StandardRateMains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView140()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StandardRateMains", "\r\n    SELECT VALUE -- Constructing StandardRateMains\r\n        [DomainModels.Stand" +
                    "ardRateMain](T1.StandardRateMain_StandardRtMainId, T1.StandardRateMain_StandardR" +
                    "tMainCode, T1.StandardRateMain_TariffTypeCode, T1.StandardRateMain_StandardRtMai" +
                    "nName, T1.StandardRateMain_StandardRtMainDescription, T1.StandardRateMain_StartD" +
                    "t, T1.StandardRateMain_EndDt, T1.StandardRateMain_RowVersion, T1.StandardRateMai" +
                    "n_IsActive, T1.StandardRateMain_IsDeleted, T1.StandardRateMain_IsPrivate, T1.Sta" +
                    "ndardRateMain_IsReadOnly, T1.StandardRateMain_RecCreatedDt, T1.StandardRateMain_" +
                    "RecLastUpdatedDt, T1.StandardRateMain_RecCreatedBy, T1.StandardRateMain_RecLastU" +
                    "pdatedBy, T1.StandardRateMain_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n     " +
                    "       T.StandardRtMainID AS StandardRateMain_StandardRtMainId, \r\n            T." +
                    "StandardRtMainCode AS StandardRateMain_StandardRtMainCode, \r\n            T.Tarif" +
                    "fTypeCode AS StandardRateMain_TariffTypeCode, \r\n            T.StandardRtMainName" +
                    " AS StandardRateMain_StandardRtMainName, \r\n            T.StandardRtMainDescripti" +
                    "on AS StandardRateMain_StandardRtMainDescription, \r\n            T.StartDt AS Sta" +
                    "ndardRateMain_StartDt, \r\n            T.EndDt AS StandardRateMain_EndDt, \r\n      " +
                    "      T.RowVersion AS StandardRateMain_RowVersion, \r\n            T.IsActive AS S" +
                    "tandardRateMain_IsActive, \r\n            T.IsDeleted AS StandardRateMain_IsDelete" +
                    "d, \r\n            T.IsPrivate AS StandardRateMain_IsPrivate, \r\n            T.IsRe" +
                    "adOnly AS StandardRateMain_IsReadOnly, \r\n            T.RecCreatedDt AS StandardR" +
                    "ateMain_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS StandardRateMain_RecLa" +
                    "stUpdatedDt, \r\n            T.RecCreatedBy AS StandardRateMain_RecCreatedBy, \r\n  " +
                    "          T.RecLastUpdatedBy AS StandardRateMain_RecLastUpdatedBy, \r\n           " +
                    " T.UserDomainKey AS StandardRateMain_UserDomainKey, \r\n            True AS _from0" +
                    "\r\n        FROM CaresModelStoreContainer.StandardRtMain AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleDisposalInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView141()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleDisposalInfoes", @"
    SELECT VALUE -- Constructing VehicleDisposalInfoes
        [DomainModels.VehicleDisposalInfo](T1.VehicleDisposalInfo_VehicleId, T1.VehicleDisposalInfo_SaleDate, T1.VehicleDisposalInfo_SalePrice, T1.VehicleDisposalInfo_SoldTo, T1.VehicleDisposalInfo_DisposalDescription, T1.VehicleDisposalInfo_BPMainId, T1.VehicleDisposalInfo_RecCreatedDt, T1.VehicleDisposalInfo_RecCreatedBy, T1.VehicleDisposalInfo_RecLastUpdatedDt, T1.VehicleDisposalInfo_RecLastUpdatedBy, T1.VehicleDisposalInfo_RowVersion, T1.VehicleDisposalInfo_UserDomainKey)
    FROM (
        SELECT 
            T.VehicleID AS VehicleDisposalInfo_VehicleId, 
            T.SaleDate AS VehicleDisposalInfo_SaleDate, 
            T.SalePrice AS VehicleDisposalInfo_SalePrice, 
            T.SoldTo AS VehicleDisposalInfo_SoldTo, 
            T.DisposalDescription AS VehicleDisposalInfo_DisposalDescription, 
            T.BPMainID AS VehicleDisposalInfo_BPMainId, 
            T.RecCreatedDt AS VehicleDisposalInfo_RecCreatedDt, 
            T.RecCreatedBy AS VehicleDisposalInfo_RecCreatedBy, 
            T.RecLastUpdatedDt AS VehicleDisposalInfo_RecLastUpdatedDt, 
            T.RecLastUpdatedBy AS VehicleDisposalInfo_RecLastUpdatedBy, 
            T.RowVersion AS VehicleDisposalInfo_RowVersion, 
            T.UserDomainKey AS VehicleDisposalInfo_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.VehicleDisposalInfo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleImageHireGroupDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView142()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleImageHireGroupDetails", "\r\n    SELECT VALUE -- Constructing VehicleImageHireGroupDetails\r\n        [DomainM" +
                    "odels.VehicleImageHireGroupDetail](T1.VehicleImageHireGroupDetail_VehicleImageHi" +
                    "reGroupDetailId, T1.VehicleImageHireGroupDetail_VehicleImageId, T1.VehicleImageH" +
                    "ireGroupDetail_HireGroupDetailId, T1.VehicleImageHireGroupDetail_RowVersion, T1." +
                    "VehicleImageHireGroupDetail_IsActive, T1.VehicleImageHireGroupDetail_IsDeleted, " +
                    "T1.VehicleImageHireGroupDetail_IsPrivate, T1.VehicleImageHireGroupDetail_IsReadO" +
                    "nly, T1.VehicleImageHireGroupDetail_RecCreatedDt, T1.VehicleImageHireGroupDetail" +
                    "_RecCreatedBy, T1.VehicleImageHireGroupDetail_RecLastUpdatedDt, T1.VehicleImageH" +
                    "ireGroupDetail_RecLastUpdatedBy, T1.VehicleImageHireGroupDetail_UserDomainKey)\r\n" +
                    "    FROM (\r\n        SELECT \r\n            T.VehicleImageHireGroupDetailID AS Vehi" +
                    "cleImageHireGroupDetail_VehicleImageHireGroupDetailId, \r\n            T.VehicleIm" +
                    "ageID AS VehicleImageHireGroupDetail_VehicleImageId, \r\n            T.HireGroupDe" +
                    "tailID AS VehicleImageHireGroupDetail_HireGroupDetailId, \r\n            T.RowVers" +
                    "ion AS VehicleImageHireGroupDetail_RowVersion, \r\n            T.IsActive AS Vehic" +
                    "leImageHireGroupDetail_IsActive, \r\n            T.IsDeleted AS VehicleImageHireGr" +
                    "oupDetail_IsDeleted, \r\n            T.IsPrivate AS VehicleImageHireGroupDetail_Is" +
                    "Private, \r\n            T.IsReadOnly AS VehicleImageHireGroupDetail_IsReadOnly, \r" +
                    "\n            T.RecCreatedDt AS VehicleImageHireGroupDetail_RecCreatedDt, \r\n     " +
                    "       T.RecCreatedBy AS VehicleImageHireGroupDetail_RecCreatedBy, \r\n           " +
                    " T.RecLastUpdatedDt AS VehicleImageHireGroupDetail_RecLastUpdatedDt, \r\n         " +
                    "   T.RecLastUpdatedBy AS VehicleImageHireGroupDetail_RecLastUpdatedBy, \r\n       " +
                    "     T.UserDomainKey AS VehicleImageHireGroupDetail_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM CaresModelStoreContainer.VehicleImageHireGroupDeta" +
                    "il AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleInsuranceInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView143()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleInsuranceInfoes", "\r\n    SELECT VALUE -- Constructing VehicleInsuranceInfoes\r\n        [DomainModels." +
                    "VehicleInsuranceInfo](T1.VehicleInsuranceInfo_VehicleId, T1.VehicleInsuranceInfo" +
                    "_InsuranceAgent, T1.VehicleInsuranceInfo_CoverageLimit, T1.VehicleInsuranceInfo_" +
                    "RenewalDate, T1.VehicleInsuranceInfo_Premium, T1.VehicleInsuranceInfo_InsuranceD" +
                    "ate, T1.VehicleInsuranceInfo_InsuredValue, T1.VehicleInsuranceInfo_InsuredFrom, " +
                    "T1.VehicleInsuranceInfo_BPMainId, T1.VehicleInsuranceInfo_InsuranceTypeId, T1.Ve" +
                    "hicleInsuranceInfo_RowVersion, T1.VehicleInsuranceInfo_RecLastUpdatedBy, T1.Vehi" +
                    "cleInsuranceInfo_RecCreatedDt, T1.VehicleInsuranceInfo_RecLastUpdatedDt, T1.Vehi" +
                    "cleInsuranceInfo_RecCreatedBy, T1.VehicleInsuranceInfo_UserDomainKey)\r\n    FROM " +
                    "(\r\n        SELECT \r\n            T.VehicleID AS VehicleInsuranceInfo_VehicleId, \r" +
                    "\n            T.InsuranceAgent AS VehicleInsuranceInfo_InsuranceAgent, \r\n        " +
                    "    T.CoverageLimit AS VehicleInsuranceInfo_CoverageLimit, \r\n            T.Renew" +
                    "alDate AS VehicleInsuranceInfo_RenewalDate, \r\n            T.Premium AS VehicleIn" +
                    "suranceInfo_Premium, \r\n            T.InsuranceDate AS VehicleInsuranceInfo_Insur" +
                    "anceDate, \r\n            T.InsuredValue AS VehicleInsuranceInfo_InsuredValue, \r\n " +
                    "           T.InsuredFrom AS VehicleInsuranceInfo_InsuredFrom, \r\n            T.BP" +
                    "MainID AS VehicleInsuranceInfo_BPMainId, \r\n            T.InsuranceTypeID AS Vehi" +
                    "cleInsuranceInfo_InsuranceTypeId, \r\n            T.RowVersion AS VehicleInsurance" +
                    "Info_RowVersion, \r\n            T.RecLastUpdatedBy AS VehicleInsuranceInfo_RecLas" +
                    "tUpdatedBy, \r\n            T.RecCreatedDt AS VehicleInsuranceInfo_RecCreatedDt, \r" +
                    "\n            T.RecLastUpdatedDt AS VehicleInsuranceInfo_RecLastUpdatedDt, \r\n    " +
                    "        T.RecCreatedBy AS VehicleInsuranceInfo_RecCreatedBy, \r\n            T.Use" +
                    "rDomainKey AS VehicleInsuranceInfo_UserDomainKey, \r\n            True AS _from0\r\n" +
                    "        FROM CaresModelStoreContainer.VehicleInsuranceInfo AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleLeasedInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView144()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2193);
            viewString.Append("\r\n    SELECT VALUE -- Constructing VehicleLeasedInfoes\r\n        [DomainModels.Ve");
            viewString.Append("hicleLeasedInfo](T1.VehicleLeasedInfo_VehicleId, T1.VehicleLeasedInfo_DownPaymen");
            viewString.Append("t, T1.VehicleLeasedInfo_LeasedStartDate, T1.VehicleLeasedInfo_LeasedFinishDate, ");
            viewString.Append("T1.VehicleLeasedInfo_MonthlyPayment, T1.VehicleLeasedInfo_InterestRate, T1.Vehic");
            viewString.Append("leLeasedInfo_PrinicipalPayment, T1.VehicleLeasedInfo_FirstPaymentDate, T1.Vehicl");
            viewString.Append("eLeasedInfo_LeasedFrom, T1.VehicleLeasedInfo_LeaseToOwnership, T1.VehicleLeasedI");
            viewString.Append("nfo_LastMonthPayment, T1.VehicleLeasedInfo_FirstMonthPayment, T1.VehicleLeasedIn");
            viewString.Append("fo_BPMainId, T1.VehicleLeasedInfo_RecCreatedDt, T1.VehicleLeasedInfo_RecLastUpda");
            viewString.Append("tedBy, T1.VehicleLeasedInfo_RecCreatedBy, T1.VehicleLeasedInfo_RowVersion, T1.Ve");
            viewString.Append("hicleLeasedInfo_RecLastUpdatedDt, T1.VehicleLeasedInfo_UserDomainKey)\r\n    FROM ");
            viewString.Append("(\r\n        SELECT \r\n            T.VehicleID AS VehicleLeasedInfo_VehicleId, \r\n  ");
            viewString.Append("          T.DownPayment AS VehicleLeasedInfo_DownPayment, \r\n            T.Leased");
            viewString.Append("StartDate AS VehicleLeasedInfo_LeasedStartDate, \r\n            T.LeasedFinishDate");
            viewString.Append(" AS VehicleLeasedInfo_LeasedFinishDate, \r\n            T.MonthlyPayment AS Vehicl");
            viewString.Append("eLeasedInfo_MonthlyPayment, \r\n            T.InterestRate AS VehicleLeasedInfo_In");
            viewString.Append("terestRate, \r\n            T.PrinicipalPayment AS VehicleLeasedInfo_PrinicipalPay");
            viewString.Append("ment, \r\n            T.FirstPaymentDate AS VehicleLeasedInfo_FirstPaymentDate, \r\n");
            viewString.Append("            T.LeasedFrom AS VehicleLeasedInfo_LeasedFrom, \r\n            T.LeaseT");
            viewString.Append("oOwnership AS VehicleLeasedInfo_LeaseToOwnership, \r\n            T.LastMonthPayme");
            viewString.Append("nt AS VehicleLeasedInfo_LastMonthPayment, \r\n            T.FirstMonthPayment AS V");
            viewString.Append("ehicleLeasedInfo_FirstMonthPayment, \r\n            T.BPMainID AS VehicleLeasedInf");
            viewString.Append("o_BPMainId, \r\n            T.RecCreatedDt AS VehicleLeasedInfo_RecCreatedDt, \r\n  ");
            viewString.Append("          T.RecLastUpdatedBy AS VehicleLeasedInfo_RecLastUpdatedBy, \r\n          ");
            viewString.Append("  T.RecCreatedBy AS VehicleLeasedInfo_RecCreatedBy, \r\n            T.RowVersion A");
            viewString.Append("S VehicleLeasedInfo_RowVersion, \r\n            T.RecLastUpdatedDt AS VehicleLease");
            viewString.Append("dInfo_RecLastUpdatedDt, \r\n            T.UserDomainKey AS VehicleLeasedInfo_UserD");
            viewString.Append("omainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContainer.Ve");
            viewString.Append("hicleLeasedInfo AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleLeasedInfoes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleMaintenanceTypeFrequencies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView145()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleMaintenanceTypeFrequencies", "\r\n    SELECT VALUE -- Constructing VehicleMaintenanceTypeFrequencies\r\n        [Do" +
                    "mainModels.VehicleMaintenanceTypeFrequency](T1.VehicleMaintenanceTypeFrequency_M" +
                    "aintenanceTypeFrequencyId, T1.VehicleMaintenanceTypeFrequency_VehicleId, T1.Vehi" +
                    "cleMaintenanceTypeFrequency_MaintenanceStartDate, T1.VehicleMaintenanceTypeFrequ" +
                    "ency_Frequency, T1.VehicleMaintenanceTypeFrequency_FrequencyKiloMeter, T1.Vehicl" +
                    "eMaintenanceTypeFrequency_MaintenanceTypeId, T1.VehicleMaintenanceTypeFrequency_" +
                    "RowVersion, T1.VehicleMaintenanceTypeFrequency_RecCreatedDt, T1.VehicleMaintenan" +
                    "ceTypeFrequency_RecCreatedBy, T1.VehicleMaintenanceTypeFrequency_RecLastUpdatedB" +
                    "y, T1.VehicleMaintenanceTypeFrequency_RecLastUpdatedDt, T1.VehicleMaintenanceTyp" +
                    "eFrequency_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.Maintenanc" +
                    "eTypeFrequencyID AS VehicleMaintenanceTypeFrequency_MaintenanceTypeFrequencyId, " +
                    "\r\n            T.VehicleID AS VehicleMaintenanceTypeFrequency_VehicleId, \r\n      " +
                    "      T.MaintenanceStartDate AS VehicleMaintenanceTypeFrequency_MaintenanceStart" +
                    "Date, \r\n            T.Frequency AS VehicleMaintenanceTypeFrequency_Frequency, \r\n" +
                    "            T.FrequencyKiloMeter AS VehicleMaintenanceTypeFrequency_FrequencyKil" +
                    "oMeter, \r\n            T.MaintenanceTypeID AS VehicleMaintenanceTypeFrequency_Mai" +
                    "ntenanceTypeId, \r\n            T.RowVersion AS VehicleMaintenanceTypeFrequency_Ro" +
                    "wVersion, \r\n            T.RecCreatedDt AS VehicleMaintenanceTypeFrequency_RecCre" +
                    "atedDt, \r\n            T.RecCreatedBy AS VehicleMaintenanceTypeFrequency_RecCreat" +
                    "edBy, \r\n            T.RecLastUpdatedBy AS VehicleMaintenanceTypeFrequency_RecLas" +
                    "tUpdatedBy, \r\n            T.RecLastUpdatedDt AS VehicleMaintenanceTypeFrequency_" +
                    "RecLastUpdatedDt, \r\n            T.UserDomainKey AS VehicleMaintenanceTypeFrequen" +
                    "cy_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreCont" +
                    "ainer.VehicleMaintenanceTypeFrequency AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleOtherDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView146()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2640);
            viewString.Append("\r\n    SELECT VALUE -- Constructing VehicleOtherDetails\r\n        [DomainModels.Ve");
            viewString.Append("hicleOtherDetail](T1.VehicleOtherDetail_VehicleId, T1.VehicleOtherDetail_NumberO");
            viewString.Append("fDoors, T1.[VehicleOtherDetail.HorsePower_CC], T1.VehicleOtherDetail_NumberOfCyl");
            viewString.Append("inders, T1.VehicleOtherDetail_IsAlloyRim, T1.VehicleOtherDetail_ChasisNumber, T1");
            viewString.Append(".VehicleOtherDetail_EngineNumber, T1.VehicleOtherDetail_KeyCode, T1.VehicleOther");
            viewString.Append("Detail_RadioCode, T1.VehicleOtherDetail_Accessories, T1.VehicleOtherDetail_TopSp");
            viewString.Append("eed, T1.VehicleOtherDetail_InteriorDescription, T1.VehicleOtherDetail_FrontWheel");
            viewString.Append("Size, T1.VehicleOtherDetail_BackWheelSize, T1.VehicleOtherDetail_RecCreatedDt, T");
            viewString.Append("1.VehicleOtherDetail_RecCreatedBy, T1.VehicleOtherDetail_RecLastUpdatedDt, T1.Ve");
            viewString.Append("hicleOtherDetail_RecLastUpdatedBy, T1.VehicleOtherDetail_RowVersion, T1.VehicleO");
            viewString.Append("therDetail_IsActive, T1.VehicleOtherDetail_IsDeleted, T1.VehicleOtherDetail_IsRe");
            viewString.Append("adOnly, T1.VehicleOtherDetail_IsPrivate, T1.VehicleOtherDetail_UserDomainKey)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.VehicleID AS VehicleOtherDetail_Vehicl");
            viewString.Append("eId, \r\n            T.NumberOfDoors AS VehicleOtherDetail_NumberOfDoors, \r\n      ");
            viewString.Append("      T.HorsePower_CC AS [VehicleOtherDetail.HorsePower_CC], \r\n            T.Num");
            viewString.Append("berOfCylinders AS VehicleOtherDetail_NumberOfCylinders, \r\n            T.isAlloyR");
            viewString.Append("im AS VehicleOtherDetail_IsAlloyRim, \r\n            T.ChasisNumber AS VehicleOthe");
            viewString.Append("rDetail_ChasisNumber, \r\n            T.EngineNumber AS VehicleOtherDetail_EngineN");
            viewString.Append("umber, \r\n            T.KeyCode AS VehicleOtherDetail_KeyCode, \r\n            T.Ra");
            viewString.Append("dioCode AS VehicleOtherDetail_RadioCode, \r\n            T.Accessories AS VehicleO");
            viewString.Append("therDetail_Accessories, \r\n            T.TopSpeed AS VehicleOtherDetail_TopSpeed,");
            viewString.Append(" \r\n            T.InteriorDescription AS VehicleOtherDetail_InteriorDescription, ");
            viewString.Append("\r\n            T.FrontWheelSize AS VehicleOtherDetail_FrontWheelSize, \r\n         ");
            viewString.Append("   T.BackWheelSize AS VehicleOtherDetail_BackWheelSize, \r\n            T.RecCreat");
            viewString.Append("edDt AS VehicleOtherDetail_RecCreatedDt, \r\n            T.RecCreatedBy AS Vehicle");
            viewString.Append("OtherDetail_RecCreatedBy, \r\n            T.RecLastUpdatedDt AS VehicleOtherDetail");
            viewString.Append("_RecLastUpdatedDt, \r\n            T.RecLastUpdatedBy AS VehicleOtherDetail_RecLas");
            viewString.Append("tUpdatedBy, \r\n            T.RowVersion AS VehicleOtherDetail_RowVersion, \r\n     ");
            viewString.Append("       T.IsActive AS VehicleOtherDetail_IsActive, \r\n            T.IsDeleted AS V");
            viewString.Append("ehicleOtherDetail_IsDeleted, \r\n            T.IsReadOnly AS VehicleOtherDetail_Is");
            viewString.Append("ReadOnly, \r\n            T.IsPrivate AS VehicleOtherDetail_IsPrivate, \r\n         ");
            viewString.Append("   T.UserDomainKey AS VehicleOtherDetail_UserDomainKey, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM CaresModelStoreContainer.VehicleOtherDetail AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleOtherDetails", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehiclePurchaseInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView147()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehiclePurchaseInfoes", "\r\n    SELECT VALUE -- Constructing VehiclePurchaseInfoes\r\n        [DomainModels.V" +
                    "ehiclePurchaseInfo](T1.VehiclePurchaseInfo_VehicleId, T1.VehiclePurchaseInfo_Pur" +
                    "chaseDate, T1.VehiclePurchaseInfo_PurchasedFrom, T1.VehiclePurchaseInfo_Purchase" +
                    "OrderNumber, T1.VehiclePurchaseInfo_PurchaseCost, T1.VehiclePurchaseInfo_IsUsedV" +
                    "ehicle, T1.VehiclePurchaseInfo_PurchaseDescription, T1.VehiclePurchaseInfo_Busin" +
                    "essPartnerId, T1.VehiclePurchaseInfo_RecCreatedDt, T1.VehiclePurchaseInfo_RecCre" +
                    "atedBy, T1.VehiclePurchaseInfo_RecLastUpdatedBy, T1.VehiclePurchaseInfo_RecLastU" +
                    "pdatedDt, T1.VehiclePurchaseInfo_RowVersion, T1.VehiclePurchaseInfo_UserDomainKe" +
                    "y)\r\n    FROM (\r\n        SELECT \r\n            T.VehicleID AS VehiclePurchaseInfo_" +
                    "VehicleId, \r\n            T.PurchaseDate AS VehiclePurchaseInfo_PurchaseDate, \r\n " +
                    "           T.PurchasedFrom AS VehiclePurchaseInfo_PurchasedFrom, \r\n            T" +
                    ".PurchaseOrderNumber AS VehiclePurchaseInfo_PurchaseOrderNumber, \r\n            T" +
                    ".PurchaseCost AS VehiclePurchaseInfo_PurchaseCost, \r\n            T.IsUsedVehicle" +
                    " AS VehiclePurchaseInfo_IsUsedVehicle, \r\n            T.PurchaseDescription AS Ve" +
                    "hiclePurchaseInfo_PurchaseDescription, \r\n            T.BPMainID AS VehiclePurcha" +
                    "seInfo_BusinessPartnerId, \r\n            T.RecCreatedDt AS VehiclePurchaseInfo_Re" +
                    "cCreatedDt, \r\n            T.RecCreatedBy AS VehiclePurchaseInfo_RecCreatedBy, \r\n" +
                    "            T.RecLastUpdatedBy AS VehiclePurchaseInfo_RecLastUpdatedBy, \r\n      " +
                    "      T.RecLastUpdatedDt AS VehiclePurchaseInfo_RecLastUpdatedDt, \r\n            " +
                    "T.RowVersion AS VehiclePurchaseInfo_RowVersion, \r\n            T.UserDomainKey AS" +
                    " VehiclePurchaseInfo_UserDomainKey, \r\n            True AS _from0\r\n        FROM C" +
                    "aresModelStoreContainer.VehiclePurchaseInfo AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BpRatingTypes1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView148()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BpRatingTypes1", "\r\n    SELECT VALUE -- Constructing BpRatingTypes1\r\n        [DomainModels.BpRating" +
                    "Type](T1.BpRatingType_BpRatingTypeId, T1.BpRatingType_BpRatingTypeCode, T1.BpRat" +
                    "ingType_BpRatingTypeName, T1.BpRatingType_BpRatingTypeDescription, T1.BpRatingTy" +
                    "pe_RowVersion, T1.BpRatingType_IsActive, T1.BpRatingType_IsDeleted, T1.BpRatingT" +
                    "ype_IsPrivate, T1.BpRatingType_IsReadOnly, T1.BpRatingType_RecCreatedDt, T1.BpRa" +
                    "tingType_RecCreatedBy, T1.BpRatingType_RecLastUpdatedDt, T1.BpRatingType_RecLast" +
                    "UpdatedBy, T1.BpRatingType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n        " +
                    "    T.BPRatingTypeID AS BpRatingType_BpRatingTypeId, \r\n            T.BPRatingTyp" +
                    "eCode AS BpRatingType_BpRatingTypeCode, \r\n            T.BPRatingTypeName AS BpRa" +
                    "tingType_BpRatingTypeName, \r\n            T.BPRatingTypeDescription AS BpRatingTy" +
                    "pe_BpRatingTypeDescription, \r\n            T.RowVersion AS BpRatingType_RowVersio" +
                    "n, \r\n            T.IsActive AS BpRatingType_IsActive, \r\n            T.IsDeleted " +
                    "AS BpRatingType_IsDeleted, \r\n            T.IsPrivate AS BpRatingType_IsPrivate, " +
                    "\r\n            T.IsReadOnly AS BpRatingType_IsReadOnly, \r\n            T.RecCreate" +
                    "dDt AS BpRatingType_RecCreatedDt, \r\n            T.RecCreatedBy AS BpRatingType_R" +
                    "ecCreatedBy, \r\n            T.RecLastUpdatedDt AS BpRatingType_RecLastUpdatedDt, " +
                    "\r\n            T.RecLastUpdatedBy AS BpRatingType_RecLastUpdatedBy, \r\n           " +
                    " T.UserDomainKey AS BpRatingType_UserDomainKey, \r\n            True AS _from0\r\n  " +
                    "      FROM CaresModelStoreContainer.BPRatingType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.BusinessPartnerRelationshipTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView149()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2256);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BusinessPartnerRelationshipTypes\r\n        [Do");
            viewString.Append("mainModels.BusinessPartnerRelationshipType](T1.BusinessPartnerRelationshipType_B");
            viewString.Append("usinessPartnerRelationshipTypeId, T1.BusinessPartnerRelationshipType_BusinessPar");
            viewString.Append("tnerRelationshpTypeCode, T1.BusinessPartnerRelationshipType_BusinessPartnerRelat");
            viewString.Append("ionshipTypeName, T1.BusinessPartnerRelationshipType_BusinessPartnerRelationshipT");
            viewString.Append("ypeDescription, T1.BusinessPartnerRelationshipType_RowVersion, T1.BusinessPartne");
            viewString.Append("rRelationshipType_IsActive, T1.BusinessPartnerRelationshipType_IsDeleted, T1.Bus");
            viewString.Append("inessPartnerRelationshipType_IsPrivate, T1.BusinessPartnerRelationshipType_IsRea");
            viewString.Append("dOnly, T1.BusinessPartnerRelationshipType_RecCreatedDt, T1.BusinessPartnerRelati");
            viewString.Append("onshipType_RecCreatedBy, T1.BusinessPartnerRelationshipType_RecLastUpdatedDt, T1");
            viewString.Append(".BusinessPartnerRelationshipType_RecLastUpdatedBy, T1.BusinessPartnerRelationshi");
            viewString.Append("pType_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.BPRelationshipT");
            viewString.Append("ypeID AS BusinessPartnerRelationshipType_BusinessPartnerRelationshipTypeId, \r\n  ");
            viewString.Append("          T.BPRelationshipTypeCode AS BusinessPartnerRelationshipType_BusinessPa");
            viewString.Append("rtnerRelationshpTypeCode, \r\n            T.BPRelationshipTypeName AS BusinessPart");
            viewString.Append("nerRelationshipType_BusinessPartnerRelationshipTypeName, \r\n            T.BPRelat");
            viewString.Append("ionshipTypeDescription AS BusinessPartnerRelationshipType_BusinessPartnerRelatio");
            viewString.Append("nshipTypeDescription, \r\n            T.RowVersion AS BusinessPartnerRelationshipT");
            viewString.Append("ype_RowVersion, \r\n            T.IsActive AS BusinessPartnerRelationshipType_IsAc");
            viewString.Append("tive, \r\n            T.IsDeleted AS BusinessPartnerRelationshipType_IsDeleted, \r\n");
            viewString.Append("            T.IsPrivate AS BusinessPartnerRelationshipType_IsPrivate, \r\n        ");
            viewString.Append("    T.IsReadOnly AS BusinessPartnerRelationshipType_IsReadOnly, \r\n            T.");
            viewString.Append("RecCreatedDt AS BusinessPartnerRelationshipType_RecCreatedDt, \r\n            T.Re");
            viewString.Append("cCreatedBy AS BusinessPartnerRelationshipType_RecCreatedBy, \r\n            T.RecL");
            viewString.Append("astUpdatedDt AS BusinessPartnerRelationshipType_RecLastUpdatedDt, \r\n            ");
            viewString.Append("T.RecLastUpdatedBy AS BusinessPartnerRelationshipType_RecLastUpdatedBy, \r\n      ");
            viewString.Append("      T.UserDomainKey AS BusinessPartnerRelationshipType_UserDomainKey, \r\n      ");
            viewString.Append("      True AS _from0\r\n        FROM CaresModelStoreContainer.BPRelationshipType A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.BusinessPartnerRelationshipTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VehicleDepreciations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView150()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VehicleDepreciations", "\r\n    SELECT VALUE -- Constructing VehicleDepreciations\r\n        [DomainModels.Ve" +
                    "hicleDepreciation](T1.VehicleDepreciation_VehicleId, T1.VehicleDepreciation_Usef" +
                    "ulPeriodStartDate, T1.VehicleDepreciation_FirstMonthDepAmount, T1.VehicleDepreci" +
                    "ation_MonthlyDepAmount, T1.VehicleDepreciation_LastMonthDepAmount, T1.VehicleDep" +
                    "reciation_ResidualValue, T1.VehicleDepreciation_UsefulPeriodEndDate, T1.VehicleD" +
                    "epreciation_RowVersion, T1.VehicleDepreciation_RecCreatedDt, T1.VehicleDepreciat" +
                    "ion_RecCreatedBy, T1.VehicleDepreciation_RecLastUpdatedBy, T1.VehicleDepreciatio" +
                    "n_RecLastUpdatedDt, T1.VehicleDepreciation_UserDomainKey)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.VehicleID AS VehicleDepreciation_VehicleId, \r\n            " +
                    "T.UsefulPeriodStartDate AS VehicleDepreciation_UsefulPeriodStartDate, \r\n        " +
                    "    T.FirstMonthDepAmount AS VehicleDepreciation_FirstMonthDepAmount, \r\n        " +
                    "    T.MonthlyDepAmount AS VehicleDepreciation_MonthlyDepAmount, \r\n            T." +
                    "LastMonthDepAmount AS VehicleDepreciation_LastMonthDepAmount, \r\n            T.Re" +
                    "sidualValue AS VehicleDepreciation_ResidualValue, \r\n            T.UsefulPeriodEn" +
                    "dDate AS VehicleDepreciation_UsefulPeriodEndDate, \r\n            T.RowVersion AS " +
                    "VehicleDepreciation_RowVersion, \r\n            T.RecCreatedDt AS VehicleDepreciat" +
                    "ion_RecCreatedDt, \r\n            T.RecCreatedBy AS VehicleDepreciation_RecCreated" +
                    "By, \r\n            T.RecLastUpdatedBy AS VehicleDepreciation_RecLastUpdatedBy, \r\n" +
                    "            T.RecLastUpdatedDt AS VehicleDepreciation_RecLastUpdatedDt, \r\n      " +
                    "      T.UserDomainKey AS VehicleDepreciation_UserDomainKey, \r\n            True A" +
                    "S _from0\r\n        FROM CaresModelStoreContainer.VehicleDepreciation AS T\r\n    ) " +
                    "AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Addresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView151()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2047);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Addresses\r\n        [DomainModels.Address](T1.");
            viewString.Append("Address_AddressId, T1.Address_ContactPerson, T1.Address_StreetAddress, T1.Addres");
            viewString.Append("s_EmailAddress, T1.Address_WebPage, T1.Address_ZipCode, T1.Address_POBox, T1.Add");
            viewString.Append("ress_CountryId, T1.Address_RegionId, T1.Address_SubRegionId, T1.Address_CityId, ");
            viewString.Append("T1.Address_AreaId, T1.Address_AddressTypeId, T1.Address_BusinessPartnerId, T1.Ad");
            viewString.Append("dress_EmployeeId, T1.Address_RowVersion, T1.Address_IsActive, T1.Address_IsDelet");
            viewString.Append("ed, T1.Address_IsPrivate, T1.Address_IsReadOnly, T1.Address_RecCreatedDt, T1.Add");
            viewString.Append("ress_RecCreatedBy, T1.Address_RecLastUpdatedDt, T1.Address_RecLastUpdatedBy, T1.");
            viewString.Append("Address_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T.AddressID AS ");
            viewString.Append("Address_AddressId, \r\n            T.ContactPerson AS Address_ContactPerson, \r\n   ");
            viewString.Append("         T.StreetAddress AS Address_StreetAddress, \r\n            T.EmailAddress ");
            viewString.Append("AS Address_EmailAddress, \r\n            T.WebPage AS Address_WebPage, \r\n         ");
            viewString.Append("   T.ZipCode AS Address_ZipCode, \r\n            T.POBox AS Address_POBox, \r\n     ");
            viewString.Append("       T.CountryID AS Address_CountryId, \r\n            T.RegionID AS Address_Reg");
            viewString.Append("ionId, \r\n            T.SubRegionID AS Address_SubRegionId, \r\n            T.CityI");
            viewString.Append("D AS Address_CityId, \r\n            T.AreaID AS Address_AreaId, \r\n            T.A");
            viewString.Append("ddressTypeID AS Address_AddressTypeId, \r\n            T.BPMainID AS Address_Busin");
            viewString.Append("essPartnerId, \r\n            T.EmployeeID AS Address_EmployeeId, \r\n            T.");
            viewString.Append("RowVersion AS Address_RowVersion, \r\n            T.IsActive AS Address_IsActive, ");
            viewString.Append("\r\n            T.IsDeleted AS Address_IsDeleted, \r\n            T.IsPrivate AS Add");
            viewString.Append("ress_IsPrivate, \r\n            T.IsReadOnly AS Address_IsReadOnly, \r\n            ");
            viewString.Append("T.RecCreatedDt AS Address_RecCreatedDt, \r\n            T.RecCreatedBy AS Address_");
            viewString.Append("RecCreatedBy, \r\n            T.RecLastUpdatedDt AS Address_RecLastUpdatedDt, \r\n  ");
            viewString.Append("          T.RecLastUpdatedBy AS Address_RecLastUpdatedBy, \r\n            T.UserDo");
            viewString.Append("mainKey AS Address_UserDomainKey, \r\n            True AS _from0\r\n        FROM Car");
            viewString.Append("esModelStoreContainer.Address AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Addresses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.ServiceRt
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView152()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.ServiceRt", "\r\n    SELECT VALUE -- Constructing ServiceRt\r\n        [CaresModel.Store.ServiceRt" +
                    "](T1.ServiceRt_ServiceRtID, T1.ServiceRt_ServiceRtMainID, T1.ServiceRt_ServiceIt" +
                    "emID, T1.ServiceRt_ChildServiceRtID, T1.ServiceRt_ServiceRate, T1.ServiceRt_Revi" +
                    "sionNumber, T1.ServiceRt_StartDt, T1.ServiceRt_IsActive, T1.ServiceRt_IsDeleted," +
                    " T1.ServiceRt_IsPrivate, T1.ServiceRt_IsReadOnly, T1.ServiceRt_RowVersion, T1.Se" +
                    "rviceRt_RecCreatedDt, T1.ServiceRt_RecLastUpdatedDt, T1.ServiceRt_RecLastUpdated" +
                    "By, T1.ServiceRt_RecCreatedBy, T1.ServiceRt_UserDomainKey)\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.ServiceRtId AS ServiceRt_ServiceRtID, \r\n            T.Ser" +
                    "viceRtMainId AS ServiceRt_ServiceRtMainID, \r\n            T.ServiceItemId AS Serv" +
                    "iceRt_ServiceItemID, \r\n            T.ChildServiceRtId AS ServiceRt_ChildServiceR" +
                    "tID, \r\n            T.ServiceRate AS ServiceRt_ServiceRate, \r\n            T.Revis" +
                    "ionNumber AS ServiceRt_RevisionNumber, \r\n            T.StartDt AS ServiceRt_Star" +
                    "tDt, \r\n            T.IsActive AS ServiceRt_IsActive, \r\n            T.IsDeleted A" +
                    "S ServiceRt_IsDeleted, \r\n            T.IsPrivate AS ServiceRt_IsPrivate, \r\n     " +
                    "       T.IsReadOnly AS ServiceRt_IsReadOnly, \r\n            T.RowVersion AS Servi" +
                    "ceRt_RowVersion, \r\n            T.RecCreatedDt AS ServiceRt_RecCreatedDt, \r\n     " +
                    "       T.RecLastUpdatedDt AS ServiceRt_RecLastUpdatedDt, \r\n            T.RecLast" +
                    "UpdatedBy AS ServiceRt_RecLastUpdatedBy, \r\n            T.RecCreatedBy AS Service" +
                    "Rt_RecCreatedBy, \r\n            T.UserDomainKey AS ServiceRt_UserDomainKey, \r\n   " +
                    "         True AS _from0\r\n        FROM BaseDbContext.ServiceRts AS T\r\n    ) AS T1" +
                    "");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.ServiceRtMain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView153()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.ServiceRtMain", "\r\n    SELECT VALUE -- Constructing ServiceRtMain\r\n        [CaresModel.Store.Servi" +
                    "ceRtMain](T1.ServiceRtMain_ServiceRtMainID, T1.ServiceRtMain_ServiceRtMainCode, " +
                    "T1.ServiceRtMain_TariffTypeCode, T1.ServiceRtMain_ServiceRtMainName, T1.ServiceR" +
                    "tMain_ServiceRtMainDescription, T1.ServiceRtMain_StartDt, T1.ServiceRtMain_IsAct" +
                    "ive, T1.ServiceRtMain_IsDeleted, T1.ServiceRtMain_IsPrivate, T1.ServiceRtMain_Is" +
                    "ReadOnly, T1.ServiceRtMain_RowVersion, T1.ServiceRtMain_RecCreatedDt, T1.Service" +
                    "RtMain_RecLastUpdatedDt, T1.ServiceRtMain_RecLastUpdatedBy, T1.ServiceRtMain_Rec" +
                    "CreatedBy, T1.ServiceRtMain_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.ServiceRtMainId AS ServiceRtMain_ServiceRtMainID, \r\n            T.Service" +
                    "RtMainCode AS ServiceRtMain_ServiceRtMainCode, \r\n            T.TariffTypeCode AS" +
                    " ServiceRtMain_TariffTypeCode, \r\n            T.ServiceRtMainName AS ServiceRtMai" +
                    "n_ServiceRtMainName, \r\n            T.ServiceRtMainDescription AS ServiceRtMain_S" +
                    "erviceRtMainDescription, \r\n            T.StartDt AS ServiceRtMain_StartDt, \r\n   " +
                    "         T.IsActive AS ServiceRtMain_IsActive, \r\n            T.IsDeleted AS Serv" +
                    "iceRtMain_IsDeleted, \r\n            T.IsPrivate AS ServiceRtMain_IsPrivate, \r\n   " +
                    "         T.IsReadOnly AS ServiceRtMain_IsReadOnly, \r\n            T.RowVersion AS" +
                    " ServiceRtMain_RowVersion, \r\n            T.RecCreatedDt AS ServiceRtMain_RecCrea" +
                    "tedDt, \r\n            T.RecLastUpdatedDt AS ServiceRtMain_RecLastUpdatedDt, \r\n   " +
                    "         T.RecLastUpdatedBy AS ServiceRtMain_RecLastUpdatedBy, \r\n            T.R" +
                    "ecCreatedBy AS ServiceRtMain_RecCreatedBy, \r\n            T.UserDomainKey AS Serv" +
                    "iceRtMain_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContex" +
                    "t.ServiceRtMains AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.ServiceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView154()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.ServiceType", @"
    SELECT VALUE -- Constructing ServiceType
        [CaresModel.Store.ServiceType](T1.ServiceType_ServiceTypeID, T1.ServiceType_ServiceTypeCode, T1.ServiceType_ServiceTypeName, T1.ServiceType_ServiceTypeDescription, T1.ServiceType_RowVersion, T1.ServiceType_IsActive, T1.ServiceType_IsDeleted, T1.ServiceType_IsPrivate, T1.ServiceType_IsReadOnly, T1.ServiceType_RecCreatedBy, T1.ServiceType_RecCreatedDt, T1.ServiceType_RecLastUpdatedBy, T1.ServiceType_RecLastUpdatedDt, T1.ServiceType_UserDomainKey)
    FROM (
        SELECT 
            T.ServiceTypeId AS ServiceType_ServiceTypeID, 
            T.ServiceTypeCode AS ServiceType_ServiceTypeCode, 
            T.ServiceTypeName AS ServiceType_ServiceTypeName, 
            T.ServiceTypeDescription AS ServiceType_ServiceTypeDescription, 
            T.RowVersion AS ServiceType_RowVersion, 
            T.IsActive AS ServiceType_IsActive, 
            T.IsDeleted AS ServiceType_IsDeleted, 
            T.IsPrivate AS ServiceType_IsPrivate, 
            T.IsReadOnly AS ServiceType_IsReadOnly, 
            T.RecCreatedBy AS ServiceType_RecCreatedBy, 
            T.RecCreatedDt AS ServiceType_RecCreatedDt, 
            T.RecLastUpdatedBy AS ServiceType_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS ServiceType_RecLastUpdatedDt, 
            T.UserDomainKey AS ServiceType_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.ServiceTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.ServiceItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView155()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.ServiceItem", "\r\n    SELECT VALUE -- Constructing ServiceItem\r\n        [CaresModel.Store.Service" +
                    "Item](T1.ServiceItem_ServiceItemID, T1.ServiceItem_ServiceItemCode, T1.ServiceIt" +
                    "em_ServiceItemName, T1.ServiceItem_ServiceItemDescription, T1.ServiceItem_RowVer" +
                    "sion, T1.ServiceItem_IsActive, T1.ServiceItem_IsReadOnly, T1.ServiceItem_IsPriva" +
                    "te, T1.ServiceItem_IsDeleted, T1.ServiceItem_RecCreatedDt, T1.ServiceItem_RecLas" +
                    "tUpdatedDt, T1.ServiceItem_RecCreatedBy, T1.ServiceItem_RecLastUpdatedBy, T1.Ser" +
                    "viceItem_ServiceTypeID, T1.ServiceItem_UserDomainKey)\r\n    FROM (\r\n        SELEC" +
                    "T \r\n            T.ServiceItemId AS ServiceItem_ServiceItemID, \r\n            T.Se" +
                    "rviceItemCode AS ServiceItem_ServiceItemCode, \r\n            T.ServiceItemName AS" +
                    " ServiceItem_ServiceItemName, \r\n            T.ServiceItemDescription AS ServiceI" +
                    "tem_ServiceItemDescription, \r\n            T.RowVersion AS ServiceItem_RowVersion" +
                    ", \r\n            T.IsActive AS ServiceItem_IsActive, \r\n            T.IsReadOnly A" +
                    "S ServiceItem_IsReadOnly, \r\n            T.IsPrivate AS ServiceItem_IsPrivate, \r\n" +
                    "            T.IsDeleted AS ServiceItem_IsDeleted, \r\n            T.RecCreatedDt A" +
                    "S ServiceItem_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS ServiceItem_RecL" +
                    "astUpdatedDt, \r\n            T.RecCreatedBy AS ServiceItem_RecCreatedBy, \r\n      " +
                    "      T.RecLastUpdatedBy AS ServiceItem_RecLastUpdatedBy, \r\n            T.Servic" +
                    "eTypeId AS ServiceItem_ServiceTypeID, \r\n            T.UserDomainKey AS ServiceIt" +
                    "em_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDbContext.Servi" +
                    "ceItems AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ServiceRts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView156()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ServiceRts", "\r\n    SELECT VALUE -- Constructing ServiceRts\r\n        [DomainModels.ServiceRt](T" +
                    "1.ServiceRt_ServiceRtId, T1.ServiceRt_ServiceRtMainId, T1.ServiceRt_ServiceItemI" +
                    "d, T1.ServiceRt_ChildServiceRtId, T1.ServiceRt_ServiceRate, T1.ServiceRt_Revisio" +
                    "nNumber, T1.ServiceRt_StartDt, T1.ServiceRt_IsActive, T1.ServiceRt_IsDeleted, T1" +
                    ".ServiceRt_IsPrivate, T1.ServiceRt_IsReadOnly, T1.ServiceRt_RowVersion, T1.Servi" +
                    "ceRt_RecCreatedDt, T1.ServiceRt_RecLastUpdatedDt, T1.ServiceRt_RecLastUpdatedBy," +
                    " T1.ServiceRt_RecCreatedBy, T1.ServiceRt_UserDomainKey)\r\n    FROM (\r\n        SEL" +
                    "ECT \r\n            T.ServiceRtID AS ServiceRt_ServiceRtId, \r\n            T.Servic" +
                    "eRtMainID AS ServiceRt_ServiceRtMainId, \r\n            T.ServiceItemID AS Service" +
                    "Rt_ServiceItemId, \r\n            T.ChildServiceRtID AS ServiceRt_ChildServiceRtId" +
                    ", \r\n            T.ServiceRate AS ServiceRt_ServiceRate, \r\n            T.Revision" +
                    "Number AS ServiceRt_RevisionNumber, \r\n            T.StartDt AS ServiceRt_StartDt" +
                    ", \r\n            T.IsActive AS ServiceRt_IsActive, \r\n            T.IsDeleted AS S" +
                    "erviceRt_IsDeleted, \r\n            T.IsPrivate AS ServiceRt_IsPrivate, \r\n        " +
                    "    T.IsReadOnly AS ServiceRt_IsReadOnly, \r\n            T.RowVersion AS ServiceR" +
                    "t_RowVersion, \r\n            T.RecCreatedDt AS ServiceRt_RecCreatedDt, \r\n        " +
                    "    T.RecLastUpdatedDt AS ServiceRt_RecLastUpdatedDt, \r\n            T.RecLastUpd" +
                    "atedBy AS ServiceRt_RecLastUpdatedBy, \r\n            T.RecCreatedBy AS ServiceRt_" +
                    "RecCreatedBy, \r\n            T.UserDomainKey AS ServiceRt_UserDomainKey, \r\n      " +
                    "      True AS _from0\r\n        FROM CaresModelStoreContainer.ServiceRt AS T\r\n    " +
                    ") AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ServiceRtMains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView157()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ServiceRtMains", "\r\n    SELECT VALUE -- Constructing ServiceRtMains\r\n        [DomainModels.ServiceR" +
                    "tMain](T1.ServiceRtMain_ServiceRtMainId, T1.ServiceRtMain_ServiceRtMainCode, T1." +
                    "ServiceRtMain_TariffTypeCode, T1.ServiceRtMain_ServiceRtMainName, T1.ServiceRtMa" +
                    "in_ServiceRtMainDescription, T1.ServiceRtMain_StartDt, T1.ServiceRtMain_IsActive" +
                    ", T1.ServiceRtMain_IsDeleted, T1.ServiceRtMain_IsPrivate, T1.ServiceRtMain_IsRea" +
                    "dOnly, T1.ServiceRtMain_RowVersion, T1.ServiceRtMain_RecCreatedDt, T1.ServiceRtM" +
                    "ain_RecLastUpdatedDt, T1.ServiceRtMain_RecLastUpdatedBy, T1.ServiceRtMain_RecCre" +
                    "atedBy, T1.ServiceRtMain_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n          " +
                    "  T.ServiceRtMainID AS ServiceRtMain_ServiceRtMainId, \r\n            T.ServiceRtM" +
                    "ainCode AS ServiceRtMain_ServiceRtMainCode, \r\n            T.TariffTypeCode AS Se" +
                    "rviceRtMain_TariffTypeCode, \r\n            T.ServiceRtMainName AS ServiceRtMain_S" +
                    "erviceRtMainName, \r\n            T.ServiceRtMainDescription AS ServiceRtMain_Serv" +
                    "iceRtMainDescription, \r\n            T.StartDt AS ServiceRtMain_StartDt, \r\n      " +
                    "      T.IsActive AS ServiceRtMain_IsActive, \r\n            T.IsDeleted AS Service" +
                    "RtMain_IsDeleted, \r\n            T.IsPrivate AS ServiceRtMain_IsPrivate, \r\n      " +
                    "      T.IsReadOnly AS ServiceRtMain_IsReadOnly, \r\n            T.RowVersion AS Se" +
                    "rviceRtMain_RowVersion, \r\n            T.RecCreatedDt AS ServiceRtMain_RecCreated" +
                    "Dt, \r\n            T.RecLastUpdatedDt AS ServiceRtMain_RecLastUpdatedDt, \r\n      " +
                    "      T.RecLastUpdatedBy AS ServiceRtMain_RecLastUpdatedBy, \r\n            T.RecC" +
                    "reatedBy AS ServiceRtMain_RecCreatedBy, \r\n            T.UserDomainKey AS Service" +
                    "RtMain_UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStore" +
                    "Container.ServiceRtMain AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ServiceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView158()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ServiceTypes", @"
    SELECT VALUE -- Constructing ServiceTypes
        [DomainModels.ServiceType](T1.ServiceType_ServiceTypeId, T1.ServiceType_ServiceTypeCode, T1.ServiceType_ServiceTypeName, T1.ServiceType_ServiceTypeDescription, T1.ServiceType_RowVersion, T1.ServiceType_IsActive, T1.ServiceType_IsDeleted, T1.ServiceType_IsPrivate, T1.ServiceType_IsReadOnly, T1.ServiceType_RecCreatedBy, T1.ServiceType_RecCreatedDt, T1.ServiceType_RecLastUpdatedBy, T1.ServiceType_RecLastUpdatedDt, T1.ServiceType_UserDomainKey)
    FROM (
        SELECT 
            T.ServiceTypeID AS ServiceType_ServiceTypeId, 
            T.ServiceTypeCode AS ServiceType_ServiceTypeCode, 
            T.ServiceTypeName AS ServiceType_ServiceTypeName, 
            T.ServiceTypeDescription AS ServiceType_ServiceTypeDescription, 
            T.RowVersion AS ServiceType_RowVersion, 
            T.IsActive AS ServiceType_IsActive, 
            T.IsDeleted AS ServiceType_IsDeleted, 
            T.IsPrivate AS ServiceType_IsPrivate, 
            T.IsReadOnly AS ServiceType_IsReadOnly, 
            T.RecCreatedBy AS ServiceType_RecCreatedBy, 
            T.RecCreatedDt AS ServiceType_RecCreatedDt, 
            T.RecLastUpdatedBy AS ServiceType_RecLastUpdatedBy, 
            T.RecLastUpdatedDt AS ServiceType_RecLastUpdatedDt, 
            T.UserDomainKey AS ServiceType_UserDomainKey, 
            True AS _from0
        FROM CaresModelStoreContainer.ServiceType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ServiceItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView159()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ServiceItems", "\r\n    SELECT VALUE -- Constructing ServiceItems\r\n        [DomainModels.ServiceIte" +
                    "m](T1.ServiceItem_ServiceItemId, T1.ServiceItem_ServiceItemCode, T1.ServiceItem_" +
                    "ServiceItemName, T1.ServiceItem_ServiceItemDescription, T1.ServiceItem_RowVersio" +
                    "n, T1.ServiceItem_IsActive, T1.ServiceItem_IsReadOnly, T1.ServiceItem_IsPrivate," +
                    " T1.ServiceItem_IsDeleted, T1.ServiceItem_RecCreatedDt, T1.ServiceItem_RecLastUp" +
                    "datedDt, T1.ServiceItem_RecCreatedBy, T1.ServiceItem_RecLastUpdatedBy, T1.Servic" +
                    "eItem_ServiceTypeId, T1.ServiceItem_UserDomainKey)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.ServiceItemID AS ServiceItem_ServiceItemId, \r\n            T.Servi" +
                    "ceItemCode AS ServiceItem_ServiceItemCode, \r\n            T.ServiceItemName AS Se" +
                    "rviceItem_ServiceItemName, \r\n            T.ServiceItemDescription AS ServiceItem" +
                    "_ServiceItemDescription, \r\n            T.RowVersion AS ServiceItem_RowVersion, \r" +
                    "\n            T.IsActive AS ServiceItem_IsActive, \r\n            T.IsReadOnly AS S" +
                    "erviceItem_IsReadOnly, \r\n            T.IsPrivate AS ServiceItem_IsPrivate, \r\n   " +
                    "         T.IsDeleted AS ServiceItem_IsDeleted, \r\n            T.RecCreatedDt AS S" +
                    "erviceItem_RecCreatedDt, \r\n            T.RecLastUpdatedDt AS ServiceItem_RecLast" +
                    "UpdatedDt, \r\n            T.RecCreatedBy AS ServiceItem_RecCreatedBy, \r\n         " +
                    "   T.RecLastUpdatedBy AS ServiceItem_RecLastUpdatedBy, \r\n            T.ServiceTy" +
                    "peID AS ServiceItem_ServiceTypeId, \r\n            T.UserDomainKey AS ServiceItem_" +
                    "UserDomainKey, \r\n            True AS _from0\r\n        FROM CaresModelStoreContain" +
                    "er.ServiceItem AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.CategoryLog
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView160()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.CategoryLog", @"
    SELECT VALUE -- Constructing CategoryLog
        [CaresModel.Store.CategoryLog](T1.CategoryLog_CategoryLogID, T1.CategoryLog_LogCategoryID, T1.CategoryLog_LogID)
    FROM (
        SELECT 
            T.CategoryLogId AS CategoryLog_CategoryLogID, 
            T.LogCategoryId AS CategoryLog_LogCategoryID, 
            T.LogId AS CategoryLog_LogID, 
            True AS _from0
        FROM BaseDbContext.CategoryLogs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Log
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView161()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Log", @"
    SELECT VALUE -- Constructing Log
        [CaresModel.Store.Log](T1.Log_LogID, T1.Log_EventID, T1.Log_Priority, T1.Log_Severity, T1.Log_Title, T1.Log_Timestamp, T1.Log_MachineName, T1.Log_AppDomainName, T1.Log_ProcessID, T1.Log_ProcessName, T1.Log_ThreadName, T1.Log_Win32ThreadId, T1.Log_Message, T1.Log_FormattedMessage, T1.Log_HandlingInstanceId)
    FROM (
        SELECT 
            T.LogId AS Log_LogID, 
            T.EventId AS Log_EventID, 
            T.Priority AS Log_Priority, 
            T.Severity AS Log_Severity, 
            T.Title AS Log_Title, 
            T.Timestamp AS Log_Timestamp, 
            T.MachineName AS Log_MachineName, 
            T.AppDomainName AS Log_AppDomainName, 
            T.ProcessId AS Log_ProcessID, 
            T.ProcessName AS Log_ProcessName, 
            T.ThreadName AS Log_ThreadName, 
            T.Win32ThreadId AS Log_Win32ThreadId, 
            T.Message AS Log_Message, 
            T.FormattedMessage AS Log_FormattedMessage, 
            T.HandlingInstanceId AS Log_HandlingInstanceId, 
            True AS _from0
        FROM BaseDbContext.Logs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.LogCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView162()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.LogCategory", @"
    SELECT VALUE -- Constructing LogCategory
        [CaresModel.Store.LogCategory](T1.LogCategory_LogCategoryID, T1.LogCategory_CategoryName)
    FROM (
        SELECT 
            T.LogCategoryId AS LogCategory_LogCategoryID, 
            T.CategoryName AS LogCategory_CategoryName, 
            True AS _from0
        FROM BaseDbContext.LogCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CategoryLogs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView163()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CategoryLogs", @"
    SELECT VALUE -- Constructing CategoryLogs
        [DomainModels.CategoryLog](T1.CategoryLog_CategoryLogId, T1.CategoryLog_LogCategoryId, T1.CategoryLog_LogId)
    FROM (
        SELECT 
            T.CategoryLogID AS CategoryLog_CategoryLogId, 
            T.LogCategoryID AS CategoryLog_LogCategoryId, 
            T.LogID AS CategoryLog_LogId, 
            True AS _from0
        FROM CaresModelStoreContainer.CategoryLog AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Logs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView164()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Logs", @"
    SELECT VALUE -- Constructing Logs
        [DomainModels.Log](T1.Log_LogId, T1.Log_EventId, T1.Log_Priority, T1.Log_Severity, T1.Log_Title, T1.Log_Timestamp, T1.Log_MachineName, T1.Log_AppDomainName, T1.Log_ProcessId, T1.Log_ProcessName, T1.Log_ThreadName, T1.Log_Win32ThreadId, T1.Log_Message, T1.Log_FormattedMessage, T1.Log_HandlingInstanceId)
    FROM (
        SELECT 
            T.LogID AS Log_LogId, 
            T.EventID AS Log_EventId, 
            T.Priority AS Log_Priority, 
            T.Severity AS Log_Severity, 
            T.Title AS Log_Title, 
            T.Timestamp AS Log_Timestamp, 
            T.MachineName AS Log_MachineName, 
            T.AppDomainName AS Log_AppDomainName, 
            T.ProcessID AS Log_ProcessId, 
            T.ProcessName AS Log_ProcessName, 
            T.ThreadName AS Log_ThreadName, 
            T.Win32ThreadId AS Log_Win32ThreadId, 
            T.Message AS Log_Message, 
            T.FormattedMessage AS Log_FormattedMessage, 
            T.HandlingInstanceId AS Log_HandlingInstanceId, 
            True AS _from0
        FROM CaresModelStoreContainer.Log AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.LogCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView165()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.LogCategories", @"
    SELECT VALUE -- Constructing LogCategories
        [DomainModels.LogCategory](T1.LogCategory_LogCategoryId, T1.LogCategory_CategoryName)
    FROM (
        SELECT 
            T.LogCategoryID AS LogCategory_LogCategoryId, 
            T.CategoryName AS LogCategory_CategoryName, 
            True AS _from0
        FROM CaresModelStoreContainer.LogCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.Menu
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView166()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.Menu", @"
    SELECT VALUE -- Constructing Menu
        [CaresModel.Store.Menu](T1.Menu_MenuId, T1.Menu_MenuKey, T1.Menu_MenuTitle, T1.Menu_SortOrder, T1.Menu_MenuTargetController, T1.Menu_MenuImagePath, T1.Menu_MenuFunction, T1.Menu_PermissionKey, T1.Menu_IsRootItem, T1.[Menu.ParentItem_MenuId])
    FROM (
        SELECT 
            T.MenuId AS Menu_MenuId, 
            T.MenuKey AS Menu_MenuKey, 
            T.MenuTitle AS Menu_MenuTitle, 
            T.SortOrder AS Menu_SortOrder, 
            T.MenuTargetController AS Menu_MenuTargetController, 
            T.MenuImagePath AS Menu_MenuImagePath, 
            T.MenuFunction AS Menu_MenuFunction, 
            T.PermissionKey AS Menu_PermissionKey, 
            T.IsRootItem AS Menu_IsRootItem, 
            T.ParentMenuId AS [Menu.ParentItem_MenuId], 
            True AS _from0
        FROM BaseDbContext.Menus AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CaresModelStoreContainer.MenuRight
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView167()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CaresModelStoreContainer.MenuRight", @"
    SELECT VALUE -- Constructing MenuRight
        [CaresModel.Store.MenuRight](T1.MenuRight_MenuRightId, T1.[MenuRight.Menu_MenuId], T1.[MenuRight.Role_Id])
    FROM (
        SELECT 
            T.MenuRightId AS MenuRight_MenuRightId, 
            T.MenuId AS [MenuRight.Menu_MenuId], 
            T.RoleId AS [MenuRight.Role_Id], 
            True AS _from0
        FROM BaseDbContext.MenuRights AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Menus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView168()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Menus", @"
    SELECT VALUE -- Constructing Menus
        [DomainModels.Menu](T1.Menu_MenuId, T1.Menu_MenuKey, T1.Menu_MenuTitle, T1.Menu_SortOrder, T1.Menu_MenuTargetController, T1.Menu_MenuImagePath, T1.Menu_MenuFunction, T1.Menu_PermissionKey, T1.Menu_IsRootItem, T1.Menu_ParentMenuId)
    FROM (
        SELECT 
            T.MenuId AS Menu_MenuId, 
            T.MenuKey AS Menu_MenuKey, 
            T.MenuTitle AS Menu_MenuTitle, 
            T.SortOrder AS Menu_SortOrder, 
            T.MenuTargetController AS Menu_MenuTargetController, 
            T.MenuImagePath AS Menu_MenuImagePath, 
            T.MenuFunction AS Menu_MenuFunction, 
            T.PermissionKey AS Menu_PermissionKey, 
            T.IsRootItem AS Menu_IsRootItem, 
            T.ParentItem_MenuId AS Menu_ParentMenuId, 
            True AS _from0
        FROM CaresModelStoreContainer.Menu AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MenuRights
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView169()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MenuRights", @"
    SELECT VALUE -- Constructing MenuRights
        [DomainModels.MenuRight](T1.MenuRight_MenuRightId, T1.MenuRight_MenuId, T1.MenuRight_RoleId)
    FROM (
        SELECT 
            T.MenuRightId AS MenuRight_MenuRightId, 
            T.Menu_MenuId AS MenuRight_MenuId, 
            T.Role_Id AS MenuRight_RoleId, 
            True AS _from0
        FROM CaresModelStoreContainer.MenuRight AS T
    ) AS T1");
        }
    }
}



