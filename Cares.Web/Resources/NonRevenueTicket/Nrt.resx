<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddActivity" xml:space="preserve">
    <value>Add Activity</value>
  </data>
  <data name="AddChauffeur" xml:space="preserve">
    <value>Add Chauffeur</value>
  </data>
  <data name="AddEdit" xml:space="preserve">
    <value>Add/Edit</value>
  </data>
  <data name="AdditionalChargeTypeCode" xml:space="preserve">
    <value>Additional Charge Type Code</value>
  </data>
  <data name="AdditionalChargeTypeName" xml:space="preserve">
    <value>Additional Charge Type Name</value>
  </data>
  <data name="AddVehicleDetail" xml:space="preserve">
    <value>Add Vehicle Detail</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Chauffeur" xml:space="preserve">
    <value>Chauffeur</value>
  </data>
  <data name="ChauffeurCode" xml:space="preserve">
    <value>Chauffeur Code</value>
  </data>
  <data name="ChauffeurName" xml:space="preserve">
    <value>Chauffeur Name</value>
  </data>
  <data name="CloseTicket" xml:space="preserve">
    <value>Close Ticket</value>
  </data>
  <data name="ConditionIn" xml:space="preserve">
    <value>Condition In</value>
  </data>
  <data name="ConditionOut" xml:space="preserve">
    <value>Condition Out</value>
  </data>
  <data name="ContactPerson" xml:space="preserve">
    <value>Contact Person</value>
  </data>
  <data name="CurrentOdemetor" xml:space="preserve">
    <value>Current Odemetor</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="EndDateTime" xml:space="preserve">
    <value>End Date/Time</value>
  </data>
  <data name="EndHour" xml:space="preserve">
    <value>End Hour</value>
  </data>
  <data name="EndMinute" xml:space="preserve">
    <value>End Minute</value>
  </data>
  <data name="FuelDifference" xml:space="preserve">
    <value>Fuel Difference (ltrs)</value>
  </data>
  <data name="FuelIn" xml:space="preserve">
    <value>Fuel In</value>
  </data>
  <data name="FuelOut" xml:space="preserve">
    <value>Fuel Out</value>
  </data>
  <data name="HireGroup" xml:space="preserve">
    <value>Hire Group</value>
  </data>
  <data name="InDateTime" xml:space="preserve">
    <value>In Date/Time</value>
  </data>
  <data name="LicenseExpiry" xml:space="preserve">
    <value>License Expiry</value>
  </data>
  <data name="LicenseExpiryDate" xml:space="preserve">
    <value>License Expiry Date</value>
  </data>
  <data name="LicenseNumber" xml:space="preserve">
    <value>License No.</value>
  </data>
  <data name="LoadBaseDataFailedMsg" xml:space="preserve">
    <value>Failed to load base data.</value>
  </data>
  <data name="LoadChuaffeurFailedMsg" xml:space="preserve">
    <value>Failed to load chauffeurs.</value>
  </data>
  <data name="LoadMaintenanceActivityFailedMsg" xml:space="preserve">
    <value>Failed to load maintenance activities.</value>
  </data>
  <data name="LoadVehicleFailedMsg" xml:space="preserve">
    <value>Failed to load vehicles.</value>
  </data>
  <data name="MaintenanceActivities" xml:space="preserve">
    <value>Maintenance Activities</value>
  </data>
  <data name="ModelYear" xml:space="preserve">
    <value>Model Year</value>
  </data>
  <data name="NRT" xml:space="preserve">
    <value>Non Revenue Ticket</value>
  </data>
  <data name="NRTCloseSuccessMsg" xml:space="preserve">
    <value>Non Revenue Ticket has been successfully closed.</value>
  </data>
  <data name="NRTDetailFailedMsg" xml:space="preserve">
    <value>Failed to load Non Revenue Ticket.</value>
  </data>
  <data name="NRTNumber" xml:space="preserve">
    <value>Non Revenue Ticket #</value>
  </data>
  <data name="NRTOpenFailedMsg" xml:space="preserve">
    <value>Failed to Open Ticket.</value>
  </data>
  <data name="NRTOpenSuccessMsg" xml:space="preserve">
    <value>Non Revenue Ticket has been successfully opened.</value>
  </data>
  <data name="NRTTYpe" xml:space="preserve">
    <value>NRT Type</value>
  </data>
  <data name="OdometerIn" xml:space="preserve">
    <value>Odometer In</value>
  </data>
  <data name="OdometerOut" xml:space="preserve">
    <value>Odometer Out</value>
  </data>
  <data name="OpenTicket" xml:space="preserve">
    <value>Open Ticket</value>
  </data>
  <data name="Operation" xml:space="preserve">
    <value>Operation</value>
  </data>
  <data name="OutDateTime" xml:space="preserve">
    <value>Out Date/Time</value>
  </data>
  <data name="OutLocation" xml:space="preserve">
    <value>Out Location</value>
  </data>
  <data name="PlateNumber" xml:space="preserve">
    <value>Plate Number</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Rate" xml:space="preserve">
    <value>Rate</value>
  </data>
  <data name="ReturnLocation" xml:space="preserve">
    <value>Return Location</value>
  </data>
  <data name="ReturnVehicle" xml:space="preserve">
    <value>Return Vehicle?</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="StartDateTime" xml:space="preserve">
    <value>Start Date/Time</value>
  </data>
  <data name="StartHour" xml:space="preserve">
    <value>Start Hour</value>
  </data>
  <data name="StartMinute" xml:space="preserve">
    <value>Start Minute</value>
  </data>
  <data name="TankSize" xml:space="preserve">
    <value>Tank Size</value>
  </data>
  <data name="TotalRate" xml:space="preserve">
    <value>Total Rate</value>
  </data>
  <data name="UpdateTicket" xml:space="preserve">
    <value>Update Ticket</value>
  </data>
  <data name="Vehicle" xml:space="preserve">
    <value>Vehicle</value>
  </data>
  <data name="VehicleCategory" xml:space="preserve">
    <value>Vehicle Category</value>
  </data>
  <data name="VehicleDetails" xml:space="preserve">
    <value>Vehicle Details</value>
  </data>
  <data name="VehicleInStatus" xml:space="preserve">
    <value>Vehicle In Status</value>
  </data>
  <data name="VehicleMake" xml:space="preserve">
    <value>Vehicle Make</value>
  </data>
  <data name="VehicleModel" xml:space="preserve">
    <value>Vehicle Model</value>
  </data>
  <data name="VehicleOutStatus" xml:space="preserve">
    <value>Vehicle Out Status</value>
  </data>
  <data name="VehiclePlateNumber" xml:space="preserve">
    <value>Vehicle Plate Number</value>
  </data>
  <data name="VehicleStatus" xml:space="preserve">
    <value>Vehicle Status</value>
  </data>
</root>